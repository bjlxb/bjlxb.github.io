<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Django-ERROR</title>
    <url>/2019/03/04/Django-ERROR/</url>
    <content><![CDATA[<p>记录一下Django中遇到的错误。<br><a id="more"></a></p>
<h1 id="Django中的Error"><a href="#Django中的Error" class="headerlink" title="Django中的Error"></a>Django中的Error</h1><p>出现<font color="#FF0000">UNICODEENCODEERROR: ‘ASCII’ CODEC CAN’T ENCODE CHARACTERS IN POSITION 2-5: ORDINAL NOT IN RANGE(128)</font>错误<br><!--more--><br>解决方案：<br>字符集出现问题，在文件前加两行代码解决问题。<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line">reload(sys)</span><br><span class="line">sys.setdefaultencoding(<span class="string">'utf-8'</span>)</span><br></pre></td></tr></table></figure></div></p>
]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>Python字典</title>
    <url>/2019/03/04/Python%E5%AD%97%E5%85%B8/</url>
    <content><![CDATA[<p>字典是Python中常见的数据类型，是一个可变数据类型，且可以存储任意类型对象。<br><a id="more"></a></p>
<h2 id="1-什么是字典"><a href="#1-什么是字典" class="headerlink" title="1.什么是字典"></a>1.什么是字典</h2><p>字典是由键值对组成，是Python中唯一的映射类型。</p>
<p>字典是可变的，字典也被称为关联数组或哈希表。</p>
<p>字典中每个键值(key=&gt;value)对用冒号(:)进行分割，每个键值对之间用逗号(,)分割，用花括号包裹起来。</p>
<p>字典的格式：<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line">dict=&#123;key1:value1, key2:value2&#125;</span><br></pre></td></tr></table></figure></div></p>
<p>字典中键是必须唯一，值可以重复。</p>
<p>字典中键必须是不可变类型（字符串，数字或元组），值可以为任意类型。</p>
<h2 id="2-字典的基本操作"><a href="#2-字典的基本操作" class="headerlink" title="2.字典的基本操作"></a>2.字典的基本操作</h2><h5 id="1-根据键取值："><a href="#1-根据键取值：" class="headerlink" title="1.根据键取值："></a>1.根据键取值：</h5><p>dict[‘key’] 若不存在会报错,KeyError</p>
<p>dict.get(‘key’) 若不存在,返回None</p>
<p>dict.get(‘key’,’not exist’)</p>
<h5 id="2-判断key或value是否存在："><a href="#2-判断key或value是否存在：" class="headerlink" title="2.判断key或value是否存在："></a>2.判断key或value是否存在：</h5><p>has_key()：有返回True，没有返回False</p>
<p>in 有返回True，没有返回False 、not in 有返回False，没有返回True</p>
<p>dict.keys() 以列表形式返回一个字典所有的键</p>
<p>dict.values() 以列表形式返回字典中的所有值</p>
<p>dict.items() 以列表形式返回可遍历的(键, 值) 元组数组</p>
<h5 id="3-修改字典"><a href="#3-修改字典" class="headerlink" title="3.修改字典"></a>3.修改字典</h5><p>dict[‘key’] = value  key值不存在即新增，key值存在即修改</p>
<p>dict.setdefault(‘key’,value)   只能新增</p>
<h5 id="4-删除字典"><a href="#4-删除字典" class="headerlink" title="4.删除字典"></a>4.删除字典</h5><p>del dict[‘key’] 删除键key的项</p>
<p>del dict 删除整个字典</p>
<p>dict.popitem()  随机删除字典中的一对键和值并将该键值对返回</p>
<p>dict.pop(key[,default]) 删除字典给定键 key 所对应的值，返回值为被删除的值。key值必须给出。 否则，返回default值。</p>
<p>dict.clear()  清空字典,字典存在，只清空了所有元素</p>
<h5 id="5-字典其他内置函数或方法"><a href="#5-字典其他内置函数或方法" class="headerlink" title="5.字典其他内置函数或方法"></a>5.字典其他内置函数或方法</h5><h6 id="内置函数："><a href="#内置函数：" class="headerlink" title="内置函数："></a>内置函数：</h6><p>cmp(dict1, dict2) 比较两个字典元素</p>
<p>len(dict) 计算字典元素个数，即键的总数</p>
<p>str(dict) 输出字典的字符串格式</p>
<p>type(variable) 返回输入的变量类型</p>
<h6 id="内置方法："><a href="#内置方法：" class="headerlink" title="内置方法："></a>内置方法：</h6><p>dict.copy() 返回一个字典的浅复制</p>
<p>dict.fromkeys(seq, val=None) 创建并返回一个新字典，以seq中的元素做该字典的键，val做该字典中所有键对应的初始值（默认为None）</p>
<p>dict.update(dict2) 把字典dict2的键/值对更新到dict里</p>
<h3 id="Python-中两个字典（dict）合并"><a href="#Python-中两个字典（dict）合并" class="headerlink" title="Python 中两个字典（dict）合并"></a>Python 中两个字典（dict）合并</h3><h6 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h6><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line">merge_dict = dict( dict1, **dict2 )</span><br><span class="line"></span><br><span class="line">   注：如果当key不是字符串的时候，python3中会运行失败</span><br><span class="line">   	TypeError: keyword arguments must be strings</span><br></pre></td></tr></table></figure></div>
<h6 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h6><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line">merge_dict = dict(dict1.items() + dict2.items())</span><br><span class="line"></span><br><span class="line">注：</span><br><span class="line">在python3中会出现错误</span><br><span class="line">TypeError: unsupported operand type(s) <span class="keyword">for</span> +: <span class="string">'dict_items'</span> <span class="keyword">and</span> <span class="string">'dict_items'</span></span><br><span class="line">解决方案：</span><br><span class="line">dict3 = dict(list(dict1.items()) + list(dict2.items()))</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h6 id="方法三："><a href="#方法三：" class="headerlink" title="方法三："></a>方法三：</h6><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line">merge_dict = dict1.copy()</span><br><span class="line">merge_dict.update( dict2 )</span><br></pre></td></tr></table></figure></div>
<h6 id="方法四："><a href="#方法四：" class="headerlink" title="方法四："></a>方法四：</h6><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line">merge_dict = dict( dict1 )</span><br><span class="line">merge_dict.update( dict2 )</span><br></pre></td></tr></table></figure></div>
<h6 id="方法五："><a href="#方法五：" class="headerlink" title="方法五："></a>方法五：</h6><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> dict1.items():</span><br><span class="line">	dict3[k] = v</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> dict2.items():</span><br><span class="line">	dict3[k] = v</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>在阿里云服务器上部署nginx+uWSGI+Django</title>
    <url>/2019/03/06/%E5%9C%A8%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E9%83%A8%E7%BD%B2nginx-uWSGI-Django/</url>
    <content><![CDATA[<p>公司小程序上线，需要在阿里云Centos服务器上部署，使用nginx+uWSGI+Django来部署服务器。<br><a id="more"></a></p>
<h2 id="第一步：前期准备工作"><a href="#第一步：前期准备工作" class="headerlink" title="第一步：前期准备工作"></a>第一步：前期准备工作</h2><p>1.因为测试期间使用的sqlite3数据库，考虑是否更换为mysql和oracle数据库，提前将settings中配置好，是很有必要的。<br>2.将测试环境使用的工具包收集，收集命令为：<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line">pip freeze &gt; requirements.txt</span><br></pre></td></tr></table></figure></div><br>安装命令为：<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure></div><br>3.修改ALLOWED_HOSTS，同时将DEBUG = True设置为DEBUG = False</p>
<p>4.上传目录到服务器</p>
<pre><code>scp  -r local_dir username@servername:remote_dir
</code></pre><h2 id="第二步：配置uWSGI"><a href="#第二步：配置uWSGI" class="headerlink" title="第二步：配置uWSGI"></a>第二步：配置uWSGI</h2><h5 id="1-安装uWSGI"><a href="#1-安装uWSGI" class="headerlink" title="1.安装uWSGI"></a>1.安装uWSGI</h5><p>推荐使用pip install uwsgi或pip3 install uwsgi</p>
<h5 id="2-配置uWSGI"><a href="#2-配置uWSGI" class="headerlink" title="2.配置uWSGI"></a>2.配置uWSGI</h5><p>1.新建uwsgi.ini文件</p>
<p>注：uwsgi.ini文件在django根目录下与manage.py在同一目录下</p>
<p>2.uwsgi.ini内容：<br>    [uwsgi]</p>
<pre><code>chdir = /root/project/adv/ppmoney
module = ppmoney.wsgi:application
socket = 127.0.0.1:8001 #端口号与nginx内一致
master = true         
pidfile = /root/project/adv/ppmoney/uwsgi.pid
vacuum=True
max-requests=5000
daemonize = /root/project/adv/ppmoney/uwsgi_bug.log
disable-logging = true
</code></pre><p>详细说明：</p>
<pre><code>配置项中以‘#’开头的都是被注释的项目，不起作用；
以双斜杠开头，表示注释；
chdir是你的项目根目录。我这里的项目名叫for_test；
moudule是你的入口wsgi模块，将for_test替换成你的项目名称；
socket是通信端口设置，和我一样就行；
master=True表示以主进程模式运行；
demonize是你的日志文件，会自动建立
disable-logging = true 表示不记录正常信息，只记录错误信息。否则你的日志可能很快就爆满了。
</code></pre><h5 id="3-启动uWSGI"><a href="#3-启动uWSGI" class="headerlink" title="3.启动uWSGI"></a>3.启动uWSGI</h5><p>在该目录下使用sudo uwsgi uwsgi.ini启动uwsgi<br>    uwsgi –ini uwsgi.ini # 启动<br>    uwsgi –reload uwsgi.pid # 重启<br>    uwsgi –stop uwsgi.pid # 关闭</p>
<h2 id="第三步：配置nginx"><a href="#第三步：配置nginx" class="headerlink" title="第三步：配置nginx"></a>第三步：配置nginx</h2><h5 id="1-安装nginx"><a href="#1-安装nginx" class="headerlink" title="1.安装nginx"></a>1.安装nginx</h5><p>Centos使用：<br>    yum install nginx<br>Ubuntu使用：<br>    sudo apt-get update<br>    sudo apt-get install nginx</p>
<h5 id="2-配置nginx"><a href="#2-配置nginx" class="headerlink" title="2.配置nginx"></a>2.配置nginx</h5><p>在/etc/nginx/conf.d目录下新建[项目名].conf文件</p>
<p>文件内容：</p>
<pre><code>server {
  listen 80;  #启动的nginx进程监听请求的端口
  server_name ;   #域名或ip
  location / {
    include /etc/nginx/uwsgi_params;
    uwsgi_pass 127.0.0.1:8001;  #对于动态请求，转发到本机的8001端口，也就是uwsgi监听的端口
  }

  location /static/ {
    alias /www/data/static/;    #设定静态文件所在目录
  }
}
</code></pre><h5 id="3-启动nginx"><a href="#3-启动nginx" class="headerlink" title="3.启动nginx"></a>3.启动nginx</h5><p>centos 7之前的系统和Ubuntu使用命令：</p>
<pre><code>nginx：service nginx start #启动
nginx：service nginx stop #停止
nginx：service nginx restart #重启
</code></pre><p>centos7+系统使用命令：</p>
<pre><code>systemctl start nginx #启动
systemctl stop nginx #停止
systemctl restart nginx #重启
</code></pre><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><h3 id="一-django-项目部署后通过-admin-上传的图片的路径问题"><a href="#一-django-项目部署后通过-admin-上传的图片的路径问题" class="headerlink" title="一 django 项目部署后通过 admin 上传的图片的路径问题"></a>一 django 项目部署后通过 admin 上传的图片的路径问题</h3><p>有时项目部署后会出现通过 admin 上传图片后，图片会存放在 django 项目的 static/media 目录下，nginx的静态文件目录下没有</p>
<h6 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h6><pre><code>MEDIA_ROOT 直接改成 nginx 配置的目录
</code></pre><h3 id="二-通过nginx-uwsgi服务器部署Django出现的502错误"><a href="#二-通过nginx-uwsgi服务器部署Django出现的502错误" class="headerlink" title="二 通过nginx+uwsgi服务器部署Django出现的502错误"></a>二 通过nginx+uwsgi服务器部署Django出现的502错误</h3><p>当同一云服务器配置了多个Django项目时，会出现该问题,<br>查看uWSGI的log会发现错误信息：</p>
<pre><code>-- unavailable modifier requested: 0 --
</code></pre><h6 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h6><pre><code>1 apt-get install uwsgi-plugin-python #安装 uwsgi-plugin-python
2 在项目目录uWSGI.ini文件最后一行加入plugins = python
3. 重启uwsgi-Django项目
4. 重启nginx
</code></pre>]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>Django创建同一个模型的多个外键</title>
    <url>/2019/03/05/Django%E5%88%9B%E5%BB%BA%E5%90%8C%E4%B8%80%E4%B8%AA%E6%A8%A1%E5%9E%8B%E7%9A%84%E5%A4%9A%E4%B8%AA%E5%A4%96%E9%94%AE/</url>
    <content><![CDATA[<p>有时推荐关系记录时，可能会出现同一表中两个字段设置外键对应另外同一个表！<br><a id="more"></a><br>若默认models.ForeignKey(）会报错，错误信息如下：<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line">Unhandled exception <span class="keyword">in</span> thread started by &lt;function wrapper at <span class="number">0x101f46758</span>&gt;</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"/Users/liuxin/myworkspace/weixinmp/lib/python2.7/site-packages/django/utils/autoreload.py"</span>, line <span class="number">228</span>, <span class="keyword">in</span> wrapper</span><br><span class="line">    fn(*args, **kwargs)</span><br><span class="line">  File <span class="string">"/Users/liuxin/myworkspace/weixinmp/lib/python2.7/site-packages/django/core/management/commands/runserver.py"</span>, line <span class="number">124</span>, <span class="keyword">in</span> inner_run</span><br><span class="line">    self.check(display_num_errors=<span class="literal">True</span>)</span><br><span class="line">  File <span class="string">"/Users/liuxin/myworkspace/weixinmp/lib/python2.7/site-packages/django/core/management/base.py"</span>, line <span class="number">405</span>, <span class="keyword">in</span> check</span><br><span class="line">    <span class="keyword">raise</span> SystemCheckError(msg)</span><br><span class="line">django.core.management.base.SystemCheckError: SystemCheckError: System check identified some issues:</span><br><span class="line"></span><br><span class="line">ERRORS:</span><br><span class="line">wx_user.ShareHistory.recommend_user: (fields.E304) Reverse accessor <span class="keyword">for</span> <span class="string">'ShareHistory.recommend_user'</span> clashes <span class="keyword">with</span> reverse accessor <span class="keyword">for</span> <span class="string">'ShareHistory.share_user'</span>.</span><br><span class="line">	HINT: Add <span class="keyword">or</span> change a related_name argument to the definition <span class="keyword">for</span> <span class="string">'ShareHistory.recommend_user'</span> <span class="keyword">or</span> <span class="string">'ShareHistory.share_user'</span>.</span><br><span class="line">wx_user.ShareHistory.recommend_wechat: (fields.E304) Reverse accessor <span class="keyword">for</span> <span class="string">'ShareHistory.recommend_wechat'</span> clashes <span class="keyword">with</span> reverse accessor <span class="keyword">for</span> <span class="string">'ShareHistory.share_wechat'</span>.</span><br><span class="line">	HINT: Add <span class="keyword">or</span> change a related_name argument to the definition <span class="keyword">for</span> <span class="string">'ShareHistory.recommend_wechat'</span> <span class="keyword">or</span> <span class="string">'ShareHistory.share_wechat'</span>.</span><br><span class="line">wx_user.ShareHistory.share_user: (fields.E304) Reverse accessor <span class="keyword">for</span> <span class="string">'ShareHistory.share_user'</span> clashes <span class="keyword">with</span> reverse accessor <span class="keyword">for</span> <span class="string">'ShareHistory.recommend_user'</span>.</span><br><span class="line">	HINT: Add <span class="keyword">or</span> change a related_name argument to the definition <span class="keyword">for</span> <span class="string">'ShareHistory.share_user'</span> <span class="keyword">or</span> <span class="string">'ShareHistory.recommend_user'</span>.</span><br><span class="line">wx_user.ShareHistory.share_wechat: (fields.E304) Reverse accessor <span class="keyword">for</span> <span class="string">'ShareHistory.share_wechat'</span> clashes <span class="keyword">with</span> reverse accessor <span class="keyword">for</span> <span class="string">'ShareHistory.recommend_wechat'</span>.</span><br><span class="line">	HINT: Add <span class="keyword">or</span> change a related_name argument to the definition <span class="keyword">for</span> <span class="string">'ShareHistory.share_wechat'</span> <span class="keyword">or</span> <span class="string">'ShareHistory.recommend_wechat'</span>.</span><br></pre></td></tr></table></figure></div><br>解决方案：<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShareHistory</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">	share_user = models.ForeignKey(UserInfo, related_name=<span class="string">'share_user'</span>, verbose_name=<span class="string">'分享用户信息'</span>)</span><br><span class="line">	share_wechat = models.ForeignKey(WeChatInfo, related_name=<span class="string">'share_wechat'</span>, verbose_name=<span class="string">'分享微信信息'</span>)</span><br><span class="line">	recommend_user = models.ForeignKey(UserInfo, related_name=<span class="string">'recommend_user'</span>, verbose_name=<span class="string">'被推荐用户信息'</span>)</span><br><span class="line">	recommend_wechat = models.ForeignKey(WeChatInfo, related_name=<span class="string">'recommend_wechat'</span>, verbose_name=<span class="string">'被推荐微信信息'</span>)</span><br><span class="line">	share_time = models.FloatField(verbose_name=<span class="string">'分享时间'</span>)</span><br></pre></td></tr></table></figure></div><br>在外键对应的字段添加 related_name=’’，内容不能重复，否则会报错！</p>
]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>阿里云服务器配置HTTPS</title>
    <url>/2019/03/07/%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AEHTTPS/</url>
    <content><![CDATA[<p>小程序开发前期可以选择忽略HTTPS的校验，发布上线时必须使用HTTPS的域名，否则无法成功上线，故将之前的部署的http的程序改为HTTPS。<br><a id="more"></a></p>
<h2 id="配置HTTPS"><a href="#配置HTTPS" class="headerlink" title="配置HTTPS"></a>配置HTTPS</h2><h5 id="1-阿里云申请免费的SSL证书"><a href="#1-阿里云申请免费的SSL证书" class="headerlink" title="1.阿里云申请免费的SSL证书"></a>1.阿里云申请免费的SSL证书</h5><pre><code>申请域名对应的证书，将证书两个文件拷贝/etc/nginx目录下，新建一个名为cert文件
</code></pre><h5 id="2-修改nginx位置文件"><a href="#2-修改nginx位置文件" class="headerlink" title="2.修改nginx位置文件"></a>2.修改nginx位置文件</h5><pre><code>server {
 listen 443;
 server_name localhost;
 ssl on;
 root html;
 index index.html index.htm;
 ssl_certificate   cert/XXX.pem; #新建cert文件夹
 ssl_certificate_key  cert/XXX.key; #新建cert文件夹
 ssl_session_timeout 5m;
 ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;
 ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
 ssl_prefer_server_ciphers on;
 location / {
    include /etc/nginx/uwsgi_params;
    uwsgi_pass 127.0.0.1:8001;  #对于动态请求，转发到本机的8001端口，也就是uwsgi监听的端口
  }

  location /static/ {
    alias /www/data/static/;    #设定静态文件所在目录
  }
}    
</code></pre><p>注：</p>
<p>查看443：</p>
<pre><code>netstat  -ano  | grep  :443
返回为空，没有任何返回结果，重启了nginx就好了。此处是最大的坑，配置好了conf，一定要重启nginx服务，让它监听443端口
</code></pre><h1 id="注：阿里云-ecs-安全组上添加443端口访问"><a href="#注：阿里云-ecs-安全组上添加443端口访问" class="headerlink" title="注：阿里云-ecs-安全组上添加443端口访问"></a>注：阿里云-ecs-安全组上添加443端口访问</h1><p>若有结果用kill将其杀掉，再重启nginx</p>
<p>参考链接：<a href="https://help.aliyun.com/knowledge_detail/95491.html?spm=5176.2020520154.cas.29.549c56a7ayzM1I" target="_blank" rel="noopener">阿里云官方教程</a></p>
]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>GIT相关操作</title>
    <url>/2019/03/08/GIT%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<p>记录一下平时用的比较频繁的Git相关操作！<br><a id="more"></a></p>
<h3 id="第一步：进入需要提交的文件夹中"><a href="#第一步：进入需要提交的文件夹中" class="headerlink" title="第一步：进入需要提交的文件夹中"></a>第一步：进入需要提交的文件夹中</h3><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure></div>
<h3 id="第二步：输入提交"><a href="#第二步：输入提交" class="headerlink" title="第二步：输入提交"></a>第二步：输入提交</h3><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="code"><pre><span class="line">git commit -m “解释说明”</span><br></pre></td></tr></table></figure></div>
<p>问题：</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="code"><pre><span class="line">*** Please tell me who you are.</span><br><span class="line"></span><br><span class="line">Run</span><br><span class="line"></span><br><span class="line">  git config --global user.email "you@example.com"</span><br><span class="line">  git config --global user.name "Your Name"</span><br><span class="line"></span><br><span class="line">to set your account's default identity.</span><br><span class="line">Omit --global to set the identity only in this repository.</span><br><span class="line"></span><br><span class="line">fatal: unable to auto-detect email address (got 'liuxin@liudembp.(none)')</span><br><span class="line">liudembp:adv liuxin$ git push</span><br><span class="line">Enter passphrase for key '/Users/liuxin/.ssh/id_rsa': </span><br><span class="line">Everything up-to-date</span><br><span class="line">liudembp:adv liuxin$ git commit -m "2018.09.30前端流程基本跑通"</span><br><span class="line">*** Please tell me who you are.</span><br><span class="line"></span><br><span class="line">Run</span><br><span class="line"></span><br><span class="line">  git config --global user.email "you@example.com"</span><br><span class="line">  git config --global user.name "Your Name"</span><br><span class="line"></span><br><span class="line">to set your account's default identity.</span><br><span class="line">Omit --global to set the identity only in this repository.</span><br><span class="line"></span><br><span class="line">fatal: unable to auto-detect email address (got 'liuxin@liudembp.(none)')</span><br></pre></td></tr></table></figure></div>
<p>找到工程目录的.git文件夹，打开之后找到config文件，在最后边加上一句话</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="code"><pre><span class="line">[user]</span><br><span class="line">email=your email</span><br><span class="line">name=your name</span><br></pre></td></tr></table></figure></div>
<h3 id="第三步：提交到远程服务器："><a href="#第三步：提交到远程服务器：" class="headerlink" title="第三步：提交到远程服务器："></a>第三步：提交到远程服务器：</h3><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="code"><pre><span class="line">git push</span><br></pre></td></tr></table></figure></div>
<h3 id="第四步：查看记录："><a href="#第四步：查看记录：" class="headerlink" title="第四步：查看记录："></a>第四步：查看记录：</h3><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="code"><pre><span class="line">git log</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Django中CSRF操作</title>
    <url>/2019/03/11/Django%E4%B8%ADCSRF%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<p>Django通过中间件 django.middleware.csrf.CsrfViewMiddleware 来防止跨站请求伪造，可以通过全局或局部设置来防止跨站请求伪造。<br><a id="more"></a></p>
<h2 id="1-CSRF基本使用"><a href="#1-CSRF基本使用" class="headerlink" title="1.CSRF基本使用"></a>1.CSRF基本使用</h2><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="DJANGO"><figure class="iseeu highlight /django"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">csrf_token</span></span> %&#125;</span><span class="xml"></span></span><br></pre></td></tr></table></figure></div>
<h2 id="2-禁用或启用CSRF"><a href="#2-禁用或启用CSRF" class="headerlink" title="2.禁用或启用CSRF"></a>2.禁用或启用CSRF</h2><h4 id="2-1-全局禁用"><a href="#2-1-全局禁用" class="headerlink" title="2.1.全局禁用"></a>2.1.全局禁用</h4><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 'django.middleware.csrf.CsrfViewMiddleware'</span></span><br></pre></td></tr></table></figure></div>
<h4 id="2-2-局部禁用"><a href="#2-2-局部禁用" class="headerlink" title="2.2.局部禁用"></a>2.2.局部禁用</h4><p>为当前函数强制设置防跨站请求伪造功能，即便settings中禁用了CSRF<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> django.views.decorators.csrf <span class="keyword">import</span> csrf_exempt</span><br><span class="line"></span><br><span class="line"><span class="meta">@csrf_exempt</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_view</span><span class="params">(request)</span>:</span></span><br><span class="line">    c = &#123;&#125;</span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">"a_template.html"</span>, c)</span><br></pre></td></tr></table></figure></div></p>
<h4 id="2-3-局部启用"><a href="#2-3-局部启用" class="headerlink" title="2.3.局部启用"></a>2.3.局部启用</h4><p>为当前函数强制设置防跨站请求伪造功能，即便settings中禁用了CSRF<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> django.views.decorators.csrf <span class="keyword">import</span> csrf_protect</span><br><span class="line"></span><br><span class="line"><span class="meta">@csrf_protect</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_view</span><span class="params">(request)</span>:</span></span><br><span class="line">    c = &#123;&#125;</span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">"a_template.html"</span>, c)</span><br></pre></td></tr></table></figure></div></p>
<h2 id="3-普通FORM表单的POST提交"><a href="#3-普通FORM表单的POST提交" class="headerlink" title="3.普通FORM表单的POST提交"></a>3.普通FORM表单的POST提交</h2><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="DJANGO"><figure class="iseeu highlight /django"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">csrf_token</span></span> %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml"></span><span class="template-variable">&#123;&#123; csrf_input &#125;&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br></pre></td></tr></table></figure></div>
<h2 id="4-AJAX"><a href="#4-AJAX" class="headerlink" title="4.AJAX"></a>4.AJAX</h2><h4 id="4-1-HTML中有FORM表单的AJAX"><a href="#4-1-HTML中有FORM表单的AJAX" class="headerlink" title="4.1.HTML中有FORM表单的AJAX"></a>4.1.HTML中有FORM表单的AJAX</h4><p>若HTML中有FORM表单，使用Ajax的POST请求较为简单，只需要获取页面的CSRF token就可以成功提交至后台。<br><strong>HTML：</strong><br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">&#123;% csrf_token %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></div></p>
<p><strong>javascript</strong><br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"><span class="comment">// using jQuery</span></span><br><span class="line"><span class="keyword">var</span> csrftoken = jQuery(<span class="string">"[name=csrfmiddlewaretoken]"</span>).val();</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></div></p>
<h4 id="4-2-HTML中无FORM表单，直接使用AJAX进行POST提交"><a href="#4-2-HTML中无FORM表单，直接使用AJAX进行POST提交" class="headerlink" title="4.2.HTML中无FORM表单，直接使用AJAX进行POST提交"></a>4.2.HTML中无FORM表单，直接使用AJAX进行POST提交</h4><p>有时候我们页面并没有FORM表单，却需要使用POST提交数据，因为cookie中存放着CSRF token，故我们可以通过cookie获取。<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// using jQuery</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCookie</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> cookieValue = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">document</span>.cookie &amp;&amp; <span class="built_in">document</span>.cookie !== <span class="string">''</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> cookies = <span class="built_in">document</span>.cookie.split(<span class="string">';'</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; cookies.length; i++) &#123;</span><br><span class="line">            <span class="keyword">var</span> cookie = jQuery.trim(cookies[i]);</span><br><span class="line">            <span class="comment">// Does this cookie string begin with the name we want?</span></span><br><span class="line">            <span class="keyword">if</span> (cookie.substring(<span class="number">0</span>, name.length + <span class="number">1</span>) === (name + <span class="string">'='</span>)) &#123;</span><br><span class="line">                cookieValue = <span class="built_in">decodeURIComponent</span>(cookie.substring(name.length + <span class="number">1</span>));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cookieValue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> csrftoken = getCookie(<span class="string">'csrftoken'</span>);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></div></p>
<p>通过使用<a href="https://github.com/js-cookie/js-cookie/" target="_blank" rel="noopener">“JavaScript Cookie library”</a>库替换以上代码可以简化getCookie：<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> csrftoken = Cookies.get(<span class="string">'csrftoken'</span>);</span><br></pre></td></tr></table></figure></div></p>
<p>当POST请求需要CSRF token，而GET请求不需要提交CSRF token，可以添加如下代码：<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">csrfSafeMethod</span>(<span class="params">method</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// these HTTP methods do not require CSRF protection</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="regexp">/^(GET|HEAD|OPTIONS|TRACE)$/</span>.test(method));</span><br><span class="line">&#125;</span><br><span class="line">$.ajaxSetup(&#123;</span><br><span class="line">    beforeSend: <span class="function"><span class="keyword">function</span>(<span class="params">xhr, settings</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!csrfSafeMethod(settings.type) &amp;&amp; !<span class="keyword">this</span>.crossDomain) &#123;</span><br><span class="line">            xhr.setRequestHeader(<span class="string">"X-CSRFToken"</span>, csrftoken);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div></p>
<h6 id="参考链接：https-docs-djangoproject-com-en-2-2-ref-csrf"><a href="#参考链接：https-docs-djangoproject-com-en-2-2-ref-csrf" class="headerlink" title="参考链接：https://docs.djangoproject.com/en/2.2/ref/csrf/"></a>参考链接：<a href="https://docs.djangoproject.com/en/2.2/ref/csrf/" target="_blank" rel="noopener">https://docs.djangoproject.com/en/2.2/ref/csrf/</a></h6>]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>python生成6位随机字符串</title>
    <url>/2019/03/10/python%E7%94%9F%E6%88%906%E4%BD%8D%E9%9A%8F%E6%9C%BA%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    <content><![CDATA[<p>项目中需要生成6位随机字符串，字符为数字和大小写字母随机组合，记录一下方便以后再使用。<br><a id="more"></a></p>
<h2 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h2><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="string">'#'</span> coding:UTF<span class="number">-8</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">randomStr= <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line">    temp = random.randrange(<span class="number">0</span>,<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">if</span> temp == <span class="number">0</span>:</span><br><span class="line">        upper_ch = chr(random.randrange(ord(<span class="string">'A'</span>),ord(<span class="string">'Z'</span>) + <span class="number">1</span>))</span><br><span class="line">        randomStr += upper_ch</span><br><span class="line">    <span class="keyword">elif</span> temp == <span class="number">1</span>:</span><br><span class="line">        lower_ch = chr(random.randrange(ord(<span class="string">'a'</span>),ord(<span class="string">'z'</span>) + <span class="number">1</span>))</span><br><span class="line">        randomStr += lower_ch</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        num = str((random.randrange(<span class="number">0</span>,<span class="number">10</span>)))</span><br><span class="line">        randomStr += num</span><br><span class="line"></span><br><span class="line">print(randomStr)</span><br></pre></td></tr></table></figure></div>
<h2 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h2><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">randomStr = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line">    num = random.randint(<span class="number">0</span>, <span class="number">9</span>)</span><br><span class="line">    <span class="comment"># num = chr(random.randint(48,57))#ASCII表示数字</span></span><br><span class="line">    letter = chr(random.randint(<span class="number">97</span>, <span class="number">122</span>))<span class="comment">#取小写字母</span></span><br><span class="line">    Letter = chr(random.randint(<span class="number">65</span>, <span class="number">90</span>))<span class="comment">#取大写字母</span></span><br><span class="line">    randomStr += str(random.choice([num,letter,Letter]))</span><br><span class="line">print(randomStr)</span><br></pre></td></tr></table></figure></div>
<h2 id="方法三："><a href="#方法三：" class="headerlink" title="方法三："></a>方法三：</h2><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="comment">#建立空字符串</span></span><br><span class="line">randomStr = <span class="string">""</span></span><br><span class="line"><span class="comment">#循环6次，从0到5</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line">    <span class="comment">#生成一个数字随机数</span></span><br><span class="line">    random_num = random.randrange(<span class="number">0</span>,<span class="number">6</span>)</span><br><span class="line">    <span class="comment">#这个随机数为2或者4时，生成一个1到9的随机数放到字符串中，否则在65到91中随机生成一个数并转换成大写字母，然后加入到字符串中</span></span><br><span class="line">    <span class="keyword">if</span> random_num == <span class="number">2</span> <span class="keyword">or</span> random_num == <span class="number">4</span>:</span><br><span class="line">        randomStr = randomStr + str(random.randrange(<span class="number">0</span>,<span class="number">10</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        random_str = chr(random.randrange(<span class="number">65</span>,<span class="number">91</span>))</span><br><span class="line">        randomStr = randomStr + random_str</span><br><span class="line"></span><br><span class="line">print(randomStr)</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA基础面试题整理</title>
    <url>/2019/03/14/JAVA%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<p>近期公司需要招聘安卓岗位，整理一些简单的java面试题，进行基础部分的面试。<br><a id="more"></a><br>1.String是基础数据类型吗？是否可以被继承？<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line">基本数据类型包括<span class="keyword">byte</span>、<span class="keyword">int</span>、<span class="keyword">char</span>、<span class="keyword">long</span>、<span class="keyword">float</span>、<span class="keyword">double</span>、<span class="keyword">boolean</span>和<span class="keyword">short</span>。</span><br><span class="line">java.lang.String类是<span class="keyword">final</span>类型的，因此不可以继承这个类、不能修改这个类。</span><br></pre></td></tr></table></figure></div></p>
<p>2.int 和 Integer 有什么区别<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line">Int是java的原始数据类型，Integer是java为<span class="keyword">int</span>提供的封装类。Java为每个原始类型提供了封装类。</span><br><span class="line">原始类型   封装类</span><br><span class="line"><span class="keyword">boolean</span>  Boolean</span><br><span class="line"><span class="keyword">char</span>  Character</span><br><span class="line"><span class="keyword">byte</span>  Byte</span><br><span class="line"><span class="keyword">short</span>  Short</span><br><span class="line"><span class="keyword">int</span>  Integer</span><br><span class="line"><span class="keyword">long</span>  Long</span><br><span class="line"><span class="keyword">float</span>  Float</span><br><span class="line"><span class="keyword">double</span>  Double</span><br></pre></td></tr></table></figure></div></p>
<p>3.String 和StringBuffer的区别<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line">String类提供数值不可改变的字符串</span><br><span class="line">StringBuffer类提供字符串进行修改。当你知道字符数据要改变的时候你就可以使用StringBuffer。典型地，你可以使用 StringBuffers来动态构造字符数据。</span><br></pre></td></tr></table></figure></div></p>
<p>4.说出ArrayList,Vector, LinkedList的存储性能和特性<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line">ArrayList和Vector底层为数组，数据查找快而增删慢。</span><br><span class="line">Vector由于使用了<span class="keyword">synchronized</span>方法（线程安全），通常性能上较ArrayList差。</span><br><span class="line">LinkedList底层为双向链表，增删快而查找慢。</span><br></pre></td></tr></table></figure></div></p>
<p>5.&amp;和&amp;&amp;的区别<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line">&amp;是位运算符，表示按位与运算，&amp;&amp;是逻辑运算符，表示逻辑与（and）</span><br></pre></td></tr></table></figure></div></p>
<p>6.HashMap和Hashtable的区别<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line">HashMap是Hashtable的轻量级实现（非线程安全的实现），他们都完成了Map接口，主要区别在于HashMap允许空（<span class="keyword">null</span>）键值（key）,由于非线程安全，效率上可能高于Hashtable。</span><br><span class="line">HashMap允许将<span class="keyword">null</span>作为一个entry的key或者value，而Hashtable不允许。</span><br></pre></td></tr></table></figure></div></p>
<p>7.final, finally, finalize的区别。<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">final 用于声明属性，方法和类，分别表示属性不可变，方法不可覆盖，类不可继承。</span><br><span class="line">finally是异常处理语句结构的一部分，表示总是执行。</span><br><span class="line">finalize是Object类的一个方法，在垃圾收集器执行的时候会调用被回收对象的此方法，可以覆盖此方法提供垃圾收集时的其他资源回收，例如关闭文件等。</span><br></pre></td></tr></table></figure></div></p>
<p>8.sleep() 和 wait() 有什么区别?<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">sleep是线程类（Thread）的方法，导致此线程暂停执行指定时间，给执行机会给其他线程，但是监控状态依然保持，到时后会自动恢复。调用sleep不会释放对象锁。</span><br><span class="line">wait是Object类的方法，对此对象调用wait方法导致本线程放弃对象锁，进入等待此对象的等待锁定池，只有针对此对象发出notify方法（或notifyAll）后本线程才进入对象锁定池准备获得对象锁进入运行状态。</span><br></pre></td></tr></table></figure></div></p>
<p>9.Overload和Override的区别。Overloaded的方法是否可以改变返回值的类型？<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">方法的重写Overriding和重载Overloading是Java多态性的不同表现。</span><br><span class="line">重写Overriding是父类与子类之间多态性的一种表现，重载Overloading是一个类中多态性的一种表现。</span><br><span class="line">如果在子类中定义某方法与其父类有相同的名称和参数，我们说该方法被重写 (Overriding)。子类的对象使用这个方法时，将调用子类中的定义，对它而言，父类中的定义如同被&quot;屏蔽&quot;了。</span><br><span class="line">如果在一个类中定义了多个同名的方法，它们或有不同的参数个数或有不同的参数类型，则称为方法的重载(Overloading)。</span><br><span class="line">Overloaded的方法是可以改变返回值的类型。</span><br></pre></td></tr></table></figure></div></p>
<p>10.abstract class和interface有什么区别?<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div></p>
<p>11.GC是什么?<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div></p>
<p>12判断运算是否正确?<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">short s1 = 1; </span><br><span class="line">s1 = s1 + 1; </span><br><span class="line">//s1+1运算结果是int型，需要强制转换类型</span><br><span class="line">short s1 = 1; </span><br><span class="line">s1 += 1;</span><br><span class="line">//可以正确编译</span><br></pre></td></tr></table></figure></div></p>
<p>13.==和equals()有何区别?<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div></p>
<p>14.break，continue和return区别<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">continue 结束本次循环，执行下一次循环</span><br><span class="line">return 结束该方法，返回值给调用者</span><br><span class="line">break 结束内层循环，到外层循环去</span><br></pre></td></tr></table></figure></div></p>
<p>15.try {}里有一个return语句，try后的finally {}里的代码是否会执行，是在return前还是后?<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">会执行，在return前执行。</span><br></pre></td></tr></table></figure></div></p>
<p>16.多线程的实现方法，同步的实现方法?<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">多线程有两种实现方法，分别是继承Thread类与实现Runnable接口 </span><br><span class="line">同步的实现方面有两种，分别是synchronized,wait与notify</span><br></pre></td></tr></table></figure></div></p>
<p>17.什么是java序列化，如何实现java序列化<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">序列化就是一种用来处理对象流的机制，所谓对象流也就是将对象的内容进行流化。可以对流化后的对象进行读写操作，也可将流化后的对象传输于网络之间。序列化是为了解决在对对象流进行读写操作时所引发的问题。</span><br><span class="line">序列化的实现：将需要被序列化的类实现Serializable接口，该接口没有需要实现的方法，implements Serializable只是为了标注该对象是可被序列化的，然后使用一个输出流(如：FileOutputStream)来构造一个 ObjectOutputStream(对象流)对象，接着，使用ObjectOutputStream对象的writeObject(Object obj)方法就可以将参数为obj的对象写出(即保存其状态)，要恢复的话则用输入流。</span><br></pre></td></tr></table></figure></div></p>
<p>18this和super<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">this是自身的一个对象，代表对象本身，可以理解为：指向对象本身的一个指针。</span><br><span class="line">super相当于是指向当前对象的父类，这样就可以用super.xxx来引用父类的成员。</span><br></pre></td></tr></table></figure></div></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>sublime常见错误及解决方案</title>
    <url>/2019/03/15/sublime%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<p>Sublime Text3是一个非常好用的跨平台编辑器，拥有大量的插件可以使用，最近在配置和使用该编辑器，出现了一些问题，记录一下！<br><a id="more"></a></p>
<h2 id="问题一"><a href="#问题一" class="headerlink" title="问题一"></a>问题一</h2><p>在安装Package Control会出现sublime text 3 there are no packages available for installation错误<br>原因：由于中国的GFW的原因，Sublime Text3无法访问到channel_v3.json 文件。<br>解决方案：<br>1.打开 首选项 &gt; package settings &gt; package control &gt; settings - default<br>2.查看第6行对应网址，默认是 “<a href="https://packagecontrol.io/channel_v3.json&quot;，" target="_blank" rel="noopener">https://packagecontrol.io/channel_v3.json&quot;，</a><br>3.测试能否访问该网址 <a href="https://packagecontrol.io/channel_v3.json" target="_blank" rel="noopener">https://packagecontrol.io/channel_v3.json</a> ，若显示为空，则说明无法读取到插件列表。<br>4.若能访问且有内容，创建channel_v3.json，将内容保存到该文件里。<br>5.打开 Preferences &gt; package settings &gt; package control &gt; settings &gt; user 替换成你的 channel_v3.json 就好了。<br>6.下图为我的user配置。</p>
<p><img src="/home/lxb/Downloads/image.png" alt></p>
]]></content>
      <categories>
        <category>Tool</category>
      </categories>
      <tags>
        <tag>Tool</tag>
      </tags>
  </entry>
  <entry>
    <title>Django数据迁移</title>
    <url>/2019/03/12/Django%E6%95%B0%E6%8D%AE%E8%BF%81%E7%A7%BB/</url>
    <content><![CDATA[<p>该数据迁移方法为Django提供的方法，用于不同数据库，不同设备间的数据迁移，可以在SQLite3, MySQL, PostgreSQL等数据库进行数据迁移。<br><a id="more"></a></p>
<h2 id="一-数据的导入导出"><a href="#一-数据的导入导出" class="headerlink" title="一.数据的导入导出"></a>一.数据的导入导出</h2><h5 id="1-django-提供的导出方法-python-manage-py-dumpdata-不指定-appname-时默认为导出所有app的数据"><a href="#1-django-提供的导出方法-python-manage-py-dumpdata-不指定-appname-时默认为导出所有app的数据" class="headerlink" title="1.django 提供的导出方法 python manage.py dumpdata, 不指定 appname 时默认为导出所有app的数据"></a>1.django 提供的导出方法 python manage.py dumpdata, 不指定 appname 时默认为导出所有app的数据</h5><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line">python manage.py dumpdata [appname] &gt; appname.json</span><br></pre></td></tr></table></figure></div>
<h5 id="2-数据导入-不需要指定-appname"><a href="#2-数据导入-不需要指定-appname" class="headerlink" title="2.数据导入,不需要指定 appname"></a>2.数据导入,不需要指定 appname</h5><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line">python manage.py loaddata appname.json</span><br></pre></td></tr></table></figure></div>
<h5 id="3-Django中最常用的导入导出"><a href="#3-Django中最常用的导入导出" class="headerlink" title="3.Django中最常用的导入导出"></a>3.Django中最常用的导入导出</h5><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导出用户数据</span></span><br><span class="line">python manage.py dumpdata auth &gt; auth.json </span><br><span class="line"><span class="comment"># 导入用户数据</span></span><br><span class="line">python manage.py loaddata auth.json</span><br></pre></td></tr></table></figure></div>
<h5 id="4-Django自带的数据迁移的优缺点"><a href="#4-Django自带的数据迁移的优缺点" class="headerlink" title="4.Django自带的数据迁移的优缺点"></a>4.Django自带的数据迁移的优缺点</h5><h6 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h6><p>兼容不同数据库，可以各个数据库或不同设备之间进行数据迁移</p>
<h6 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h6><p>迁移速度很慢，当数据量大时，迁移速度很慢。当表过于复杂时，导入失败的概率很大。</p>
]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript倒计时</title>
    <url>/2019/03/16/JavaScript%E5%80%92%E8%AE%A1%E6%97%B6/</url>
    <content><![CDATA[<p>记录一下之前项目中用到的倒计时功能。</p>
<a id="more"></a>
<h2 id="1-传入一个结束时间的时间戳，实现倒计时。"><a href="#1-传入一个结束时间的时间戳，实现倒计时。" class="headerlink" title="1.传入一个结束时间的时间戳，实现倒计时。"></a>1.传入一个结束时间的时间戳，实现倒计时。</h2><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">leftTime</span>(<span class="params">datetime_expire</span>) </span>&#123;</span><br><span class="line">    maxtime = <span class="built_in">parseInt</span>(<span class="built_in">parseInt</span>(datetime_expire) - (<span class="built_in">parseInt</span>(<span class="keyword">new</span> <span class="built_in">Date</span>().getTime())/<span class="number">1000</span>));</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">CountDown</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        --maxtime;</span><br><span class="line">        <span class="keyword">if</span> (maxtime &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            minutes = <span class="built_in">Math</span>.floor(maxtime / <span class="number">60</span>);</span><br><span class="line">            seconds = <span class="built_in">Math</span>.floor(maxtime % <span class="number">60</span>);</span><br><span class="line">            <span class="built_in">document</span>.getElementById(<span class="string">"i"</span>).innerHTML = minutes;</span><br><span class="line">            <span class="built_in">document</span>.getElementById(<span class="string">"s"</span>).innerHTML = seconds;</span><br><span class="line">            <span class="built_in">console</span>.log(minutes + <span class="string">"分钟"</span> + seconds + <span class="string">"秒"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">document</span>.getElementById(<span class="string">"i"</span>).innerHTML = <span class="string">"00"</span>;</span><br><span class="line">            <span class="built_in">document</span>.getElementById(<span class="string">"s"</span>).innerHTML = <span class="string">"00"</span>;</span><br><span class="line">            clearInterval(timer);</span><br><span class="line">            alert(<span class="string">"时间到，结束!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    timer = setInterval(CountDown, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="2-短信倒计时功能。"><a href="#2-短信倒计时功能。" class="headerlink" title="2.短信倒计时功能。"></a>2.短信倒计时功能。</h2><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//val为需要修改为显示倒计时的按钮，一般为this</span></span><br><span class="line"><span class="comment">//countdown为倒计时时间，单位为秒，一般为60或120</span></span><br><span class="line"><span class="comment">//is_clear为是否将Timeout清除，用于后台请求返回错误时，可以让用户无需等待重新发送验证码。</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">settime</span>(<span class="params">val, countdown,is_clear=false</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (countdown == <span class="number">0</span>) &#123;</span><br><span class="line">        val.removeAttribute(<span class="string">"disabled"</span>);</span><br><span class="line">        val.innerHTML=<span class="string">"重新发送"</span>;</span><br><span class="line">        countdown = <span class="number">60</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        val.setAttribute(<span class="string">"disabled"</span>, <span class="literal">true</span>);</span><br><span class="line">        val.innerHTML=<span class="string">"重新发送("</span> + countdown + <span class="string">"s)"</span>;</span><br><span class="line">        countdown--;</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            settime(val, countdown);</span><br><span class="line">        &#125;,<span class="number">1000</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(is_claer == <span class="literal">true</span>)&#123;</span><br><span class="line">        clearTimeout(param);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>Django常用响应(HttpResponse、render、redirect)</title>
    <url>/2019/03/18/Django%E5%9F%BA%E7%A1%80-HttpResponse%E3%80%81render%E3%80%81redirect/</url>
    <content><![CDATA[<p>列举Django常用的响应。<br><a id="more"></a></p>
<h2 id="HttpResponse"><a href="#HttpResponse" class="headerlink" title="HttpResponse"></a>HttpResponse</h2><p>将字符串参数返回给浏览器<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="DJANGO"><figure class="iseeu highlight /django"><table><tr><td class="code"><pre><span class="line"><span class="xml">from django.shortcuts import HttpResponse</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">def index(request):</span></span><br><span class="line"><span class="xml">	# 业务逻辑</span></span><br><span class="line"><span class="xml">    return HttpResponse("OK")</span></span><br></pre></td></tr></table></figure></div></p>
<h2 id="JsonResponse"><a href="#JsonResponse" class="headerlink" title="JsonResponse"></a>JsonResponse</h2><p>JsonResponse是HttpResponse的子类。<br>JsonResponse是将数据转换为json字符串后再返回给客户端<br>JsonResponse自动设置响应头Content-Type为application/json<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="DJANGO"><figure class="iseeu highlight /django"><table><tr><td class="code"><pre><span class="line"><span class="xml">from django.http import JsonResponse</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">def index(request):</span></span><br><span class="line"><span class="xml">	# 业务逻辑</span></span><br><span class="line"><span class="xml">    return JsonResponse(&#123;"key":value&#125;)</span></span><br></pre></td></tr></table></figure></div></p>
<p>JsonResponse接受非字典类型的数据，需要指定safe=False<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="DJANGO"><figure class="iseeu highlight /django"><table><tr><td class="code"><pre><span class="line"><span class="xml">from django.http import JsonResponse</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">def index(request):</span></span><br><span class="line"><span class="xml">	# 业务逻辑</span></span><br><span class="line"><span class="xml">    return JsonResponse(数字、字符串、列表等,safe=False)</span></span><br></pre></td></tr></table></figure></div></p>
<h2 id="render"><a href="#render" class="headerlink" title="render"></a>render</h2><p>from django.shortcuts import render</p>
<p>render三个参数，第一个参数request，第二个参数需要渲染的模板，第三个参数需要返回的数据，以字典的形式。<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="DJANGO"><figure class="iseeu highlight /django"><table><tr><td class="code"><pre><span class="line"><span class="xml">def index(request):</span></span><br><span class="line"><span class="xml">	# 业务逻辑代码</span></span><br><span class="line"><span class="xml">	return render(request, "index.html", &#123;&#125;)</span></span><br></pre></td></tr></table></figure></div></p>
<h2 id="render-to-response"><a href="#render-to-response" class="headerlink" title="render_to_response"></a>render_to_response</h2><p>render_to_response与render相似，但只需要两个参数，第一个参数需要渲染的模板，第二个参数需要返回的数据，以字典的形式。<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="DJANGO"><figure class="iseeu highlight /django"><table><tr><td class="code"><pre><span class="line"><span class="xml">from django.shortcuts import render_to_response</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">def index(request):</span></span><br><span class="line"><span class="xml">	# 业务逻辑代码</span></span><br><span class="line"><span class="xml">	return render(request, "index.html", &#123;&#125;)</span></span><br><span class="line"><span class="xml">​```from django.shortcuts import render_to_response</span></span><br><span class="line"><span class="xml">## redirect</span></span><br><span class="line"><span class="xml">参数为URL，表示让浏览器重定向到指定网址。</span></span><br><span class="line"><span class="xml">​```django</span></span><br><span class="line"><span class="xml">from django.shortcuts import redirect</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">def index(request):</span></span><br><span class="line"><span class="xml">	# 业务逻辑代码</span></span><br><span class="line"><span class="xml">	return redirect("URL")</span></span><br></pre></td></tr></table></figure></div></p>
<h2 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h2><p>可以重定向到其他方法中<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="DJANGO"><figure class="iseeu highlight /django"><table><tr><td class="code"><pre><span class="line"><span class="xml">from django.http import HttpResponseRedirect</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">def index(request):</span></span><br><span class="line"><span class="xml">	# 业务逻辑代码</span></span><br><span class="line"><span class="xml">	return HttpResponseRedirect("redirecturl")</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">from django.core.urlresolvers import reverse  </span></span><br><span class="line"><span class="xml">from django.shortcuts import redirect  </span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">def index(request):</span></span><br><span class="line"><span class="xml">	# 业务逻辑代码</span></span><br><span class="line"><span class="xml">	return redirect(reverse('方法', args=参数))</span></span><br></pre></td></tr></table></figure></div></p>
]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>MAC中Pycharm的快捷键</title>
    <url>/2019/03/17/MAC%E4%B8%ADPycharm%E7%9A%84%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    <content><![CDATA[<p>Mac中使用Pycharm的快捷键<br><a id="more"></a></p>
<h2 id="Mac键盘符号和修饰键说明"><a href="#Mac键盘符号和修饰键说明" class="headerlink" title="Mac键盘符号和修饰键说明"></a>Mac键盘符号和修饰键说明</h2><p>⌘ Command<br>⇧ Shift<br>⌥ Option<br>⌃ Control<br>↩︎ Return/Enter<br>⌫ Delete<br>⌦ 向前删除键（Fn+Delete）<br>↑ 上箭头<br>↓ 下箭头<br>← 左箭头<br>→ 右箭头<br>⇞ Page Up（Fn+↑）<br>⇟ Page Down（Fn+↓）<br>Home Fn + ←<br>End Fn + →<br>⇥ 右制表符（Tab键）<br>⇤ 左制表符（Shift+Tab）<br>⎋ Escape (Esc)</p>
<h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><p>切换上方tab： ctrl +tab<br>隐藏左侧工程栏：shift+Esc</p>
<p>运行：ctrl+r<br>停止：cmd+F2<br>注释某行：cmd+/  (选中多行可多行注释)</p>
<p>跳转到声明处（cmd加鼠标）：cmd b<br>显示符号代码 （esc退出窗口 回车进入代码）: opt + 空格<br>光标之前/后的位置：cmd []<br>find usage：opt + F7<br>删除当前行：cmd backspace </p>
<p>cmd + f 当前文件搜索（回车下一个 shift回车上一个）<br>shift + cmd + f 全局搜索<br>shift + cmd + R 全局替换<br>cmd / 注释/取消注释一行<br>opt + cmd + / 批量注释(pycharm不生效)</p>
<p>cmd + r 当前文件替换<br>cmd+o 搜索class<br>shift + cmd + o 搜索文件<br>opt + cmd + o 搜索符号（函数等)<br>cmd + l 指定行数跳转<br>shift enter 在行中的时候直接到下一行<br>cmd + 展开当前<br>cmd - 折叠当前<br>shift cmd + 展开所有<br>shift cmd - 折叠所有<br>ctr + tab 史上最NB的导航窗口（工程文件列表、文件结构列表、命令行模式、代码检查、VCS等，下面两个是可以被替换的）<br>alt + F12 打开命令行栏<br>cmd + F12 显示文件结构<br>cmd j 代码智能补全<br>alt + F1 定位编辑文件所在位置:<br>cmd + F6 更改变量<br>opt + cmd + t 指定代码被注释语句或者逻辑结构、函数包围<br>Tab / Shift + Tab 缩进、不缩进当前行<br>opt + cmd + l 代码块对齐<br>cmd+d 在下一行复制本行的内容</p>
<p><img src="/home/lxb/Desktop/20171118155012446.jpeg" alt></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python列表中的字典排序</title>
    <url>/2019/03/19/Python%E5%88%97%E8%A1%A8%E4%B8%AD%E7%9A%84%E5%AD%97%E5%85%B8%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<p>工作或面试中经常会遇到一些复杂的排序问题，举一些比较常用的排序例子。<br><a id="more"></a></p>
<h2 id="按字典value排序"><a href="#按字典value排序" class="headerlink" title="按字典value排序"></a>按字典value排序</h2><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line">student=&#123;</span><br><span class="line">	<span class="string">'language_score'</span>: <span class="number">90</span>,</span><br><span class="line">	<span class="string">'math_score'</span>: <span class="number">95</span>,</span><br><span class="line">	<span class="string">'enlish_score'</span>: <span class="number">80</span>,</span><br><span class="line">	<span class="string">'chemical_score'</span>: <span class="number">65</span></span><br><span class="line">&#125;</span><br><span class="line">sort = sorted(student.iteritems(), key=<span class="keyword">lambda</span> d: d[<span class="number">1</span>],reverse=<span class="literal">True</span>)</span><br><span class="line">print(sort)</span><br><span class="line">输出：</span><br><span class="line">[(<span class="string">'math_score'</span>, <span class="number">95</span>), (<span class="string">'language_score'</span>, <span class="number">90</span>), (<span class="string">'enlish_score'</span>, <span class="number">80</span>), (<span class="string">'chemical_score'</span>, <span class="number">65</span>)]</span><br></pre></td></tr></table></figure></div>
<h2 id="list中字典的某个key的value排序"><a href="#list中字典的某个key的value排序" class="headerlink" title="list中字典的某个key的value排序"></a>list中字典的某个key的value排序</h2><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 按照学生成绩排序，取前三名</span></span><br><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> itemgetter</span><br><span class="line"></span><br><span class="line">student_list = [</span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'zhangsan'</span>, <span class="string">'score'</span>: <span class="number">60</span>&#125;,</span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'lisi'</span>, <span class="string">'score'</span>: <span class="number">90</span>&#125;,</span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'wangwu'</span>, <span class="string">'score'</span>: <span class="number">80</span>&#125;,</span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'zhaoliu'</span>, <span class="string">'score'</span>: <span class="number">70</span>&#125;,</span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'tianqi'</span>, <span class="string">'score'</span>: <span class="number">100</span>&#125;</span><br><span class="line">]</span><br><span class="line">sorted(student_list, key=itemgetter(<span class="string">'score'</span>), reverse=<span class="literal">True</span>)[:<span class="number">3</span>]</span><br><span class="line">sorted(student_list, key=<span class="keyword">lambda</span> student: student[<span class="string">'score'</span>])[<span class="number">-3</span>:]</span><br><span class="line">sorted(student_list, key=<span class="keyword">lambda</span> stu: stu[<span class="string">"score"</span>], reverse=<span class="literal">True</span>)[:<span class="number">3</span>]</span><br></pre></td></tr></table></figure></div>
<h2 id="list中字典的多个key的value排序"><a href="#list中字典的多个key的value排序" class="headerlink" title="list中字典的多个key的value排序"></a>list中字典的多个key的value排序</h2><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line">student_info = [</span><br><span class="line">&#123;<span class="string">'name'</span>:<span class="string">'homer'</span>, <span class="string">'age'</span>:<span class="number">39</span>&#125;, </span><br><span class="line">&#123;<span class="string">'name'</span>:<span class="string">'bart'</span>, <span class="string">'age'</span>:<span class="number">10</span>&#125;, </span><br><span class="line">&#123;<span class="string">'name'</span>:<span class="string">'aart'</span>, <span class="string">'age'</span>:<span class="number">20</span>&#125;, </span><br><span class="line">&#123;<span class="string">'name'</span>:<span class="string">'aart'</span>, <span class="string">'age'</span>:<span class="number">10</span>&#125;</span><br><span class="line">]</span><br><span class="line">sort = sorted(student_info, key=<span class="keyword">lambda</span> student_info : (student_info[<span class="string">'name'</span>], -student_info[<span class="string">'age'</span>]), reverse = <span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> sort</span><br><span class="line">[&#123;<span class="string">'age'</span>: <span class="number">39</span>, <span class="string">'name'</span>: <span class="string">'homer'</span>&#125;, &#123;<span class="string">'age'</span>: <span class="number">10</span>, <span class="string">'name'</span>: <span class="string">'bart'</span>&#125;, &#123;<span class="string">'age'</span>: <span class="number">20</span>, <span class="string">'name'</span>: <span class="string">'aart'</span>&#125;, &#123;<span class="string">'age'</span>: <span class="number">10</span>, <span class="string">'name'</span>: <span class="string">'aart'</span>&#125;] [&#123;<span class="string">'age'</span>: <span class="number">39</span>, <span class="string">'name'</span>: <span class="string">'homer'</span>&#125;, &#123;<span class="string">'age'</span>: <span class="number">10</span>, <span class="string">'name'</span>: <span class="string">'bart'</span>&#125;, &#123;<span class="string">'age'</span>: <span class="number">10</span>, <span class="string">'name'</span>: <span class="string">'aart'</span>&#125;, &#123;<span class="string">'age'</span>: <span class="number">20</span>, <span class="string">'name'</span>: <span class="string">'aart'</span>&#125;]</span><br></pre></td></tr></table></figure></div>
<h2 id="list中元组排序"><a href="#list中元组排序" class="headerlink" title="list中元组排序"></a>list中元组排序</h2><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line">stu_info = [(<span class="string">'zhangsan'</span>, <span class="number">39</span>), (<span class="string">'lisi'</span>, <span class="number">10</span>), (<span class="string">'wangwu'</span>, <span class="number">20</span>), (<span class="string">'zhangsan'</span>, <span class="number">10</span>)]</span><br><span class="line"><span class="keyword">print</span> stu_info</span><br><span class="line">sort = sorted(stu_info, key=<span class="keyword">lambda</span> stu_info : (stu_info[<span class="number">0</span>], -stu_info[<span class="number">1</span>]), reverse = <span class="literal">True</span>)</span><br><span class="line"><span class="keyword">print</span> sorted_x</span><br><span class="line">[(<span class="string">'zhangsan'</span>, <span class="number">39</span>), (<span class="string">'lisi'</span>, <span class="number">10</span>), (<span class="string">'wangwu'</span>, <span class="number">20</span>), (<span class="string">'zhangsan'</span>, <span class="number">10</span>)]</span><br><span class="line">[(<span class="string">'zhangsan'</span>, <span class="number">10</span>), (<span class="string">'zhangsan'</span>, <span class="number">39</span>), (<span class="string">'wangwu'</span>, <span class="number">20</span>), (<span class="string">'lisi'</span>, <span class="number">10</span>)]</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python中pip常用操作</title>
    <url>/2019/03/21/Python%E4%B8%ADpip%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<p>简单记录一下Python最常用的包管理工具pip<br><a id="more"></a><br>确定pip对应Python版本<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">pip -V(大写V)</span><br></pre></td></tr></table></figure></div></p>
<h2 id="安装pip"><a href="#安装pip" class="headerlink" title="安装pip"></a>安装pip</h2><p>Python2 版本大于2.7.9或者Python3版本大于3.4都默认安装了pip<br>若未安装，可以使用如下方式</p>
<ol>
<li>使用easy_install安装：进入到easy_install脚本的目录下，然后运行<strong>easy_inatall pip</strong></li>
<li>使用get-pip.py安装： 下载get-pip.py脚本 <strong>curl <a href="https://bootstrap.pypa.io/get-pip.py" target="_blank" rel="noopener">https://bootstrap.pypa.io/get-pip.py</a> -o get-pip.py</strong> 然后运行：<strong>python get-pip.py</strong> 这个脚本会同时安装setuptools和wheel工具。</li>
<li>在linux下安装pip： <ul>
<li>Fedora系下：<strong>sudo yum install python-pip</strong></li>
<li>ubuntu下：<strong>sudo apt-get install python-pip</strong></li>
</ul>
</li>
<li>在windows下安装pip： 在Python安装目录的scirpts目录下运行<strong>easy_install pip</strong>进行安装</li>
</ol>
<hr>
<h2 id="pip使用"><a href="#pip使用" class="headerlink" title="pip使用"></a>pip使用</h2><p>命令行中输入pip，查看帮助说明</p>
<h4 id="1-默认安装"><a href="#1-默认安装" class="headerlink" title="1.默认安装"></a>1.默认安装</h4><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">pip install 第三方模块名</span><br></pre></td></tr></table></figure></div>
<h4 id="2-指定版本"><a href="#2-指定版本" class="headerlink" title="2.指定版本"></a>2.指定版本</h4><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">pip install 第三方模块名 [=, &gt;=, &lt;=, &gt;, &lt;] 版本号</span><br></pre></td></tr></table></figure></div>
<h4 id="3-卸载安装"><a href="#3-卸载安装" class="headerlink" title="3.卸载安装"></a>3.卸载安装</h4><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">pip uninstall 第三方模块名</span><br></pre></td></tr></table></figure></div>
<h4 id="4-已安装库"><a href="#4-已安装库" class="headerlink" title="4.已安装库"></a>4.已安装库</h4><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">pip list</span><br></pre></td></tr></table></figure></div>
<h4 id="5-安装库导出"><a href="#5-安装库导出" class="headerlink" title="5.安装库导出"></a>5.安装库导出</h4><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">pip freeze &gt; requirements.txt</span><br></pre></td></tr></table></figure></div>
<h4 id="6-据导出批量安装库"><a href="#6-据导出批量安装库" class="headerlink" title="6.据导出批量安装库"></a>6.据导出批量安装库</h4><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure></div>
<h4 id="7-安装wheel文件"><a href="#7-安装wheel文件" class="headerlink" title="7.安装wheel文件"></a>7.安装wheel文件</h4><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">pip install *.whl</span><br></pre></td></tr></table></figure></div>
<h2 id="更换pip源"><a href="#更换pip源" class="headerlink" title="更换pip源"></a>更换pip源</h2><p>由于网速， GWF等原因，很多时候安装不成功，这时候需要更远数据源来提高下载速度和成功率。<br>    pip国内的一些镜像<br>    阿里云 <a href="http://mirrors.aliyun.com/pypi/simple/" target="_blank" rel="noopener">http://mirrors.aliyun.com/pypi/simple/</a><br>    中国科技大学 <a href="https://pypi.mirrors.ustc.edu.cn/simple/" target="_blank" rel="noopener">https://pypi.mirrors.ustc.edu.cn/simple/</a><br>    豆瓣(douban) <a href="http://pypi.douban.com/simple/" target="_blank" rel="noopener">http://pypi.douban.com/simple/</a><br>    清华大学 <a href="https://pypi.tuna.tsinghua.edu.cn/simple/" target="_blank" rel="noopener">https://pypi.tuna.tsinghua.edu.cn/simple/</a><br>    中国科学技术大学 <a href="http://pypi.mirrors.ustc.edu.cn/simple/" target="_blank" rel="noopener">http://pypi.mirrors.ustc.edu.cn/simple/</a></p>
<h6 id="临时使用"><a href="#临时使用" class="headerlink" title="临时使用  "></a>临时使用  </h6><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">pip install package_name -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line">pip install -i  https://pypi.tuna.tsinghua.edu.cn/simple package_name</span><br><span class="line"></span><br><span class="line">pip install -i https://pypi.doubanio.com/simple/ --trusted-host pypi.doubanio.com pillow</span><br></pre></td></tr></table></figure></div>
<h6 id="永久修改："><a href="#永久修改：" class="headerlink" title="永久修改："></a>永久修改：</h6><ul>
<li><p>linux<br>修改 ~/.pip/pip.conf (没有就创建一个)</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">[global]</span><br><span class="line">index-url = https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line"></span><br><span class="line">[install]  </span><br><span class="line">trusted-host=pypi.tuna.tsinghua.edu.cn</span><br><span class="line">disable-pip-version-check = true  </span><br><span class="line">timeout = 6000</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>windows<br>在user目录创建pip目录，如：C:\Users\xx\pip，新建文件pip.ini</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">[global]</span><br><span class="line">index-url = https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line"></span><br><span class="line">[install]  </span><br><span class="line">trusted-host=pypi.tuna.tsinghua.edu.cn</span><br><span class="line">disable-pip-version-check = true  </span><br><span class="line">timeout = 6000</span><br></pre></td></tr></table></figure></div></li>
</ul>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>报错:ImportError: No module named Crypto.Hash</title>
    <url>/2019/03/20/%E6%8A%A5%E9%94%99-ImportError-No-module-named-Crypto-Hash/</url>
    <content><![CDATA[<p>今天项目中遇到一个报错，试了很多方法才解决，记录一下。<br><a id="more"></a></p>
<h2 id="导包出现错误"><a href="#导包出现错误" class="headerlink" title="导包出现错误"></a>导包出现错误</h2><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Hash <span class="keyword">import</span> SHA, HMAC</span><br><span class="line"><span class="comment"># 错误信息</span></span><br><span class="line">ImportError: No module named Crypto.Hash</span><br></pre></td></tr></table></figure></div>
<h2 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h2><ul>
<li><p>不使用虚拟环境，使用如下命令删除已安装的包</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line">sudo pip uninstall crypto</span><br><span class="line">sudo pip uninstall pycrypto</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>使用虚拟环境，使用如下命令删除已安装的包</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line">pip uninstall crypto</span><br><span class="line">pip uninstall pycrypto</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>不使用虚拟环境，使用如下命令安装pycrypto包</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line">sudo pip install pycrypto</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>使用虚拟环境，使用如下命令安装pycrypto包</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line">pip install pycrypto</span><br></pre></td></tr></table></figure></div>
</li>
</ul>
]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>生成SSH keys</title>
    <url>/2019/03/20/%E7%94%9F%E6%88%90SSH-keys/</url>
    <content><![CDATA[<p>平时使用Github或远程链接云服务器时，都需要使用到SSH keys，这里简单介绍生成SSH keys的步骤！<br><a id="more"></a></p>
<h2 id="1-安装git："><a href="#1-安装git：" class="headerlink" title="1.安装git："></a>1.安装git：</h2><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="POWERSHELL"><figure class="iseeu highlight /powershell"><table><tr><td class="code"><pre><span class="line">apt install git</span><br></pre></td></tr></table></figure></div>
<h2 id="2-配置git账户："><a href="#2-配置git账户：" class="headerlink" title="2.配置git账户："></a>2.配置git账户：</h2><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="POWERSHELL"><figure class="iseeu highlight /powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置用户名，将yourname和下面的邮箱替换成你的</span></span><br><span class="line">git config --global user.name <span class="string">"yourname"</span> </span><br><span class="line"><span class="comment"># 配置用户邮箱</span></span><br><span class="line">git config --global user.email <span class="string">"youremail@mail.com"</span></span><br></pre></td></tr></table></figure></div>
<h2 id="3-生成ssh密钥"><a href="#3-生成ssh密钥" class="headerlink" title="3.生成ssh密钥"></a>3.生成ssh密钥</h2><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="POWERSHELL"><figure class="iseeu highlight /powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 后面按提示操作，可以不设置密码，</span></span><br><span class="line"><span class="comment"># 若设置密码，每次使用这个密钥都是需要输入密码</span></span><br><span class="line">ssh-keygen -t rsa -C <span class="string">"youremail@mail.com"</span></span><br></pre></td></tr></table></figure></div>
<h2 id="4-获取id-rsa-pub内容"><a href="#4-获取id-rsa-pub内容" class="headerlink" title="4.获取id_rsa.pub内容"></a>4.获取id_rsa.pub内容</h2><p>第三步完成后会生成id_rsa和id_rsa.pub两个文件，用cat读取第二个文件内容。<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="POWERSHELL"><figure class="iseeu highlight /powershell"><table><tr><td class="code"><pre><span class="line">cat /home/电脑用户名/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure></div></p>
<h2 id="5-在Github中添加"><a href="#5-在Github中添加" class="headerlink" title="5.在Github中添加"></a>5.在Github中添加</h2><p>登录你的github，在settings→SSH and GPG keys里面添加第四步获取的密钥。</p>
<h2 id="6-验证是否成功"><a href="#6-验证是否成功" class="headerlink" title="6.验证是否成功"></a>6.验证是否成功</h2><p>在终端中输入如下内容：<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="POWERSHELL"><figure class="iseeu highlight /powershell"><table><tr><td class="code"><pre><span class="line">ssh git@github.com</span><br></pre></td></tr></table></figure></div></p>
<p>返回如下值，证明成功。<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="POWERSHELL"><figure class="iseeu highlight /powershell"><table><tr><td class="code"><pre><span class="line">You’ve successfully authenticated, but GitHub does not provide shell access</span><br><span class="line">Connection to github.com closed.</span><br></pre></td></tr></table></figure></div></p>
]]></content>
      <categories>
        <category>Tool</category>
      </categories>
      <tags>
        <tag>Tool</tag>
      </tags>
  </entry>
  <entry>
    <title>JS添加和删除class类名</title>
    <url>/2019/03/22/JS%E6%B7%BB%E5%8A%A0%E5%92%8C%E5%88%A0%E9%99%A4class%E7%B1%BB%E5%90%8D/</url>
    <content><![CDATA[<p>工作中修改页面用到js添加和删除class类名，记录一下！<br><a id="more"></a></p>
<h2 id="添加和删除class名"><a href="#添加和删除class名" class="headerlink" title="添加和删除class名"></a>添加和删除class名</h2><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//添加</span></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"id"</span>).classList.add(<span class="string">"类名"</span>)；</span><br><span class="line"><span class="built_in">document</span>.getElementsByClassName(<span class="string">"name"</span>)[i].classList.add(<span class="string">"类名"</span>);</span><br><span class="line"><span class="comment">//删除</span></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"id"</span>).classList.remove(<span class="string">"类名"</span>)；</span><br><span class="line"><span class="built_in">document</span>.getElementsByClassName(<span class="string">"name"</span>)[i].classList.remove(<span class="string">"类名"</span>);</span><br></pre></td></tr></table></figure></div>
<h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> classVal = <span class="built_in">document</span>.getElementById(<span class="string">"id"</span>).getAttribute(<span class="string">"class"</span>);</span><br><span class="line"><span class="comment">//添加</span></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"id"</span>).setAttribute(<span class="string">"class"</span>,classVal.concat(<span class="string">" 类名"</span>));</span><br><span class="line"><span class="comment">//删除</span></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"id"</span>).getAttribute(<span class="string">"class"</span>).replace(<span class="string">"类名"</span>,<span class="string">" "</span>);</span><br></pre></td></tr></table></figure></div>
<h4 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h4><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//添加</span></span><br><span class="line"><span class="comment">//设置为新的</span></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"id"</span>).className = <span class="string">'class'</span>;</span><br><span class="line"><span class="built_in">document</span>.getElementsByTagName(<span class="string">'name'</span>)[i].className = <span class="string">'class'</span>;</span><br><span class="line"><span class="comment">//在原有基础上追加</span></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"id"</span>).className += <span class="string">'class'</span>; </span><br><span class="line"><span class="built_in">document</span>.getElementsByTagName(<span class="string">'name'</span>)[i].className += <span class="string">'class'</span>;</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>location.host与location.hostname的区别</title>
    <url>/2019/03/24/location-host%E4%B8%8Elocation-hostname%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<p>Django项目中使用到了验证码库，需要用AJax调用刷新，请求固定的URL<br><a id="more"></a></p>
<table>
<thead>
<tr>
<th style="text-align:left">属性</th>
<th style="text-align:left">值</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">href</td>
<td style="text-align:left">完整的 URL</td>
</tr>
<tr>
<td style="text-align:left">protocol</td>
<td style="text-align:left">协议</td>
</tr>
<tr>
<td style="text-align:left">hostname</td>
<td style="text-align:left">主机名</td>
</tr>
<tr>
<td style="text-align:left">host</td>
<td style="text-align:left">主机名加端口号</td>
</tr>
<tr>
<td style="text-align:left">port</td>
<td style="text-align:left">的端口号</td>
</tr>
<tr>
<td style="text-align:left">pathname</td>
<td style="text-align:left">当前 URL 的路径部分</td>
</tr>
<tr>
<td style="text-align:left">search</td>
<td style="text-align:left">URL 的查询部分</td>
</tr>
<tr>
<td style="text-align:left">hash</td>
<td style="text-align:left">#开始的锚</td>
</tr>
</tbody>
</table>
<hr>
<h2 id="区别："><a href="#区别：" class="headerlink" title="区别："></a>区别：</h2><ul>
<li>location.host<br>包含端口，比如是 127.0.0.1:81。如果端口是 80，那么就没有端口，就是 127.0.0.1。</li>
<li>location.hostname<br>不包含端口，比如是 127.0.0.1。</li>
</ul>
<hr>
<ul>
<li>Location port<br>port 属性是一个可读可写的字符串，可设置或返回当前<strong>URL 的端口部分</strong>。<br>注意：如果端口号就是80（这是默认的端口号)，无需指定。<br>语法<br>  location.port</li>
</ul>
<hr>
<ul>
<li>Location protocol<br>protocol 属性是一个可读可写的字符串，可设置或返回当前<strong> URL 的协议</strong>。<br>语法<br>  location.protocol</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>Django获取用户访问IP</title>
    <url>/2019/03/25/Django%E8%8E%B7%E5%8F%96%E7%94%A8%E6%88%B7%E8%AE%BF%E9%97%AEIP/</url>
    <content><![CDATA[<p>Django实际项目中，很多需要记录用户IP的操作，可以写一个通用工具类来记录IP<br><a id="more"></a></p>
<h2 id="正常获取IP"><a href="#正常获取IP" class="headerlink" title="正常获取IP"></a>正常获取IP</h2><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line">request.META[<span class="string">'REMOTE_ADDR'</span>]</span><br></pre></td></tr></table></figure></div>
<h4 id="特殊情况无法获取真实IP"><a href="#特殊情况无法获取真实IP" class="headerlink" title="特殊情况无法获取真实IP"></a>特殊情况无法获取真实IP</h4><p>特殊情况使用REMOTE_ADDR会获取到127.0.0.1</p>
<ul>
<li>网站服务器会使用ngix等代理http。</li>
<li>网站做了负载均衡。<br>解决方案：</li>
<li>使用HTTP_X_FORWARDED_FOR才获取用户真实IP</li>
</ul>
<hr>
<h2 id="推荐代码"><a href="#推荐代码" class="headerlink" title="推荐代码"></a>推荐代码</h2><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> request.META.has_key(<span class="string">'HTTP_X_FORWARDED_FOR'</span>):</span><br><span class="line">    ip =  request.META[<span class="string">'HTTP_X_FORWARDED_FOR'</span>]</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    ip = request.META[<span class="string">'REMOTE_ADDR'</span>]</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>JS追加元素方法</title>
    <url>/2019/03/23/JS%E8%BF%BD%E5%8A%A0%E5%85%83%E7%B4%A0%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>项目中需要动态向元素中添加元素<br><a id="more"></a></p>
<h2 id="jQuery-追加元素"><a href="#jQuery-追加元素" class="headerlink" title="jQuery 追加元素"></a>jQuery 追加元素</h2><p>元素的结尾插入内容</p>
<h4 id="append-方法"><a href="#append-方法" class="headerlink" title="append() 方法"></a>append() 方法</h4><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">"div"</span>).append(<span class="string">"text"</span>);</span><br></pre></td></tr></table></figure></div>
<h4 id="prepend-方法"><a href="#prepend-方法" class="headerlink" title="prepend() 方法"></a>prepend() 方法</h4><p>元素的开头插入内容<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">"div"</span>).prepend(<span class="string">"text"</span>);</span><br></pre></td></tr></table></figure></div></p>
<h4 id="after-和-before-方法"><a href="#after-和-before-方法" class="headerlink" title="after() 和 before() 方法"></a>after() 和 before() 方法</h4><p>after() 方法在元素之后插入内容。<br>before() 方法在元素之前插入内容。<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">"img"</span>).after(<span class="string">"text_after"</span>); </span><br><span class="line">$(<span class="string">"img"</span>).before(<span class="string">"text_before"</span>);</span><br></pre></td></tr></table></figure></div></p>
<h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>append() 方法在元素内部结尾插入内容。<br>prepend() 方法在元素内部开头插入内容。<br>after() 方法在元素外部之后插入内容。<br>before() 方法在元素外部之前插入内容。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>JS截取或分割字符串</title>
    <url>/2019/03/26/JS%E6%88%AA%E5%8F%96%E6%88%96%E5%88%86%E5%89%B2%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    <content><![CDATA[<p>项目中遇到后台返回数据过长，需要进行截取或分割<br><a id="more"></a></p>
<h2 id="截取字符串"><a href="#截取字符串" class="headerlink" title="截取字符串"></a>截取字符串</h2><ul>
<li><p>函数：substring()<br>substring(start,end)表示截取从start到end之间的字符串，包括start位置的字符但是不包括end位置的字符。数字从零开始。</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> n=<span class="string">"abcd12356789"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(n.substring(<span class="number">7</span>,<span class="number">10</span>));</span><br><span class="line"><span class="comment">//输出值为：567</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>函数：substr()<br>substr(start,length)表示从start位置开始，截取length长度的字符串。</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> n=<span class="string">"abcd12356789"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(n.substr(<span class="number">7</span>,<span class="number">3</span>));</span><br><span class="line"><span class="comment">//输出值为：567</span></span><br></pre></td></tr></table></figure></div>
</li>
</ul>
<h2 id="分割字符串"><a href="#分割字符串" class="headerlink" title="分割字符串"></a>分割字符串</h2><ul>
<li>函数：split()<br>使用一个指定的分隔符把一个字符串分割存储到数组<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line">str=<span class="string">"0,1,2,3,5,6,7,8,9"</span>;</span><br><span class="line">arr=theString.split(<span class="string">","</span>);</span><br><span class="line"><span class="comment">//arr是一个包含字符值"0"、"1"、"2"、"3"、"5"、"6"、"7"、"8"和"9"的数组</span></span><br><span class="line"><span class="comment">//按照空格分割</span></span><br><span class="line">str.split(<span class="string">' '</span>)</span><br><span class="line">str.split(<span class="regexp">/\s+/</span>)</span><br></pre></td></tr></table></figure></div>
</li>
</ul>
<h2 id="合并为字符串"><a href="#合并为字符串" class="headerlink" title="合并为字符串"></a>合并为字符串</h2><ul>
<li>函数：John()<br>使用您选择的分隔符将一个数组合并为一个字符串<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myArray=<span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">"0"</span>,<span class="string">"1"</span>,<span class="string">"2"</span>,<span class="string">"3"</span>,<span class="string">"5"</span>,<span class="string">"6"</span>,<span class="string">"7"</span>,<span class="string">"8"</span>,<span class="string">"9"</span>);</span><br><span class="line"><span class="keyword">var</span> portableList=myArray.join(<span class="string">"|"</span>);</span><br><span class="line"><span class="comment">//结果是0|1|2|3|5|6|7|8|9</span></span><br></pre></td></tr></table></figure></div>
</li>
</ul>
<h2 id="查找字符串内元素的下标"><a href="#查找字符串内元素的下标" class="headerlink" title="查找字符串内元素的下标"></a>查找字符串内元素的下标</h2><ul>
<li><p>函数：indexOf()<br>返回字符串中匹配子串的第一个字符的下标，不存在返回-1。</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">"JavaScript"</span>;</span><br><span class="line"><span class="keyword">var</span> str1=str.indexOf(<span class="string">"v"</span>);</span><br><span class="line"><span class="comment">//结果是2</span></span><br><span class="line"><span class="keyword">var</span> str2=str.indexOf(<span class="string">"S"</span>);</span><br><span class="line"><span class="comment">//结果是4</span></span><br><span class="line"><span class="keyword">var</span> str3=str.indexOf(<span class="string">"Script"</span>);</span><br><span class="line"><span class="comment">//结果是4</span></span><br><span class="line"><span class="keyword">var</span> str4=str.indexOf(<span class="string">"key"</span>);</span><br><span class="line"><span class="comment">//结果是-1</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>函数：lastIndexOf()<br>lastIndexOf()方法返回从右向左出现某个字符或字符串的首个字符索引值（与indexOf相反）<br>返回字符串索引值，从左向右数，不存在返回-1。</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">"JavaScript"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.lastIndexOf(<span class="string">'a'</span>));</span><br><span class="line"><span class="comment">//输出是3</span></span><br><span class="line"><span class="built_in">console</span>.log(str.lastIndexOf(<span class="string">'p'</span>));</span><br><span class="line"><span class="comment">//输出是8</span></span><br></pre></td></tr></table></figure></div>
</li>
</ul>
<h4 id="补充：substr-和-substring方法的区别"><a href="#补充：substr-和-substring方法的区别" class="headerlink" title="补充：substr 和 substring方法的区别"></a>补充：substr 和 substring方法的区别</h4><h6 id="substr-方法"><a href="#substr-方法" class="headerlink" title="substr 方法"></a>substr 方法</h6><p>返回一个从指定位置开始的指定长度的子字符串。<br>stringvar.substr(start [, length ])<br>参数</p>
<ul>
<li>stringvar<br>必选项。要提取子字符串的字符串文字或 String 对象。</li>
<li>start<br>必选项。所需的子字符串的起始位置。字符串中的第一个字符的索引为 0。</li>
<li>length<br>可选项。在返回的子字符串中应包括的字符个数。</li>
<li>说明<br>如果 length 为 0 或负数，将返回一个空字符串。如果没有指定该参数，则子字符串将延续到 stringvar 的最后。</li>
</ul>
<p>下面的示例演示了substr 方法的用法。<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubstrDemo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> s, ss;        <span class="comment">// 声明变量。</span></span><br><span class="line">  <span class="keyword">var</span> s = <span class="string">"The rain in Spain falls mainly in the plain."</span>;</span><br><span class="line">  ss = s.substr(<span class="number">12</span>, <span class="number">5</span>); <span class="comment">// 获取子字符串。</span></span><br><span class="line">  <span class="keyword">return</span>(ss);        <span class="comment">// 返回 "Spain"。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p>
<hr>
<h6 id="substring-方法"><a href="#substring-方法" class="headerlink" title="substring 方法"></a>substring 方法</h6><p>返回位于 String 对象中指定位置的子字符串。<br>strVariable.substring(start, end)<br>“String Literal”.substring(start, end)<br>参数</p>
<ul>
<li>start<br>指明子字符串的起始位置，该索引从 0 开始起算。</li>
<li>end<br>指明子字符串的结束位置，该索引从 0 开始起算。</li>
<li>说明<br>substring 方法将返回一个包含从 start 到最后（不包含 end ）的子字符串的字符串。<br>substring 方法使用 start 和 end 两者中的较小值作为子字符串的起始点。例如， strvar.substring(0, 3) 和 strvar.substring(3, 0) 将返回相同的子字符串。<br>如果 start 或 end 为 NaN 或者负数，那么将其替换为0。<br>子字符串的长度等于 start 和 end 之差的绝对值。例如，在 strvar.substring(0, 3) 和 strvar.substring(3, 0) 返回的子字符串的的长度是 3。</li>
</ul>
<p>下面的示例演示了 substring 方法的用法。<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubstringDemo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> ss; <span class="comment">// 声明变量。</span></span><br><span class="line">  <span class="keyword">var</span> s = <span class="string">"The rain in Spain falls mainly in the plain.."</span>;</span><br><span class="line">  ss = s.substring(<span class="number">12</span>, <span class="number">17</span>); <span class="comment">// 取子字符串。</span></span><br><span class="line">  <span class="keyword">return</span>(ss); <span class="comment">// 返回子字符串。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p>
<hr>
<p><a href="https://www.cnblogs.com/lvlina/p/6008728.html" target="_blank" rel="noopener">参考链接</a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>JS循环遍历</title>
    <url>/2019/03/27/JS%E5%BE%AA%E7%8E%AF%E9%81%8D%E5%8E%86/</url>
    <content><![CDATA[<p>工作中,后台返回json数据,需要循环遍历生成响应li<br><a id="more"></a></p>
<h3 id="for方法"><a href="#for方法" class="headerlink" title="for方法"></a>for方法</h3><ul>
<li>最通用的方式<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">Array</span>.length; i++) &#123;</span><br><span class="line">	<span class="comment">//执行代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
</ul>
<p>关于中断<br>break; 语法可以完成中断<br>return; 语法直接报错(未捕获的语法错误: 非法返回声明)</p>
<ul>
<li><p>for…of</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">of</span> <span class="built_in">Array</span>) &#123;</span><br><span class="line">	<span class="comment">//执行代码</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>];</span><br><span class="line"><span class="keyword">var</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>]);</span><br><span class="line"><span class="keyword">var</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="number">1</span>, <span class="string">'x'</span>], [<span class="number">2</span>, <span class="string">'y'</span>], [<span class="number">3</span>, <span class="string">'z'</span>]]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> x <span class="keyword">of</span> a) &#123; <span class="comment">// 遍历Array</span></span><br><span class="line">	<span class="built_in">console</span>.log(x);</span><br><span class="line">	<span class="comment">// 'A', 'B', 'C'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> x <span class="keyword">of</span> s) &#123; <span class="comment">// 遍历Set</span></span><br><span class="line">	<span class="built_in">console</span>.log(x);</span><br><span class="line">	<span class="comment">// 'A', 'B', 'C'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> x <span class="keyword">of</span> m) &#123; <span class="comment">// 遍历Map</span></span><br><span class="line">	<span class="built_in">console</span>.log(x[<span class="number">0</span>] + <span class="string">'='</span> + x[<span class="number">1</span>]);</span><br><span class="line">	<span class="comment">// 1=x, 2=y, 3=z</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>for…in</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> <span class="built_in">Array</span>) &#123;</span><br><span class="line">	<span class="comment">//执行代码</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>];</span><br><span class="line">a.name = <span class="string">'Hello'</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> x <span class="keyword">in</span> a) &#123;</span><br><span class="line">	<span class="built_in">console</span>.log(x);</span><br><span class="line">	<span class="comment">// '0', '1', '2', 'name'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>];</span><br><span class="line">a.name = <span class="string">'Hello'</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> x <span class="keyword">of</span> a) &#123;</span><br><span class="line">	<span class="built_in">console</span>.log(x); </span><br><span class="line">	<span class="comment">// 'A', 'B', 'C'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
</ul>
<p>for…of与for…in的区别：<br>    for … in循环由于历史遗留问题，它遍历的实际上是对象的属性名称。<br>    一个Array数组实际上也是一个对象，它的每个元素的索引被视为一个属性。</p>
<hr>
<h3 id="数组方法-ES5"><a href="#数组方法-ES5" class="headerlink" title="数组方法(ES5)"></a>数组方法(ES5)</h3><p>Array.prototype.forEach()<br>iterable内置的forEach方法<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line">array.forEach(callback[, thisArg])</span><br><span class="line"><span class="comment">// callback函数参数</span></span><br><span class="line"><span class="comment">// 第一个参数：当前项</span></span><br><span class="line"><span class="comment">// 第二个参数：当前项的索引</span></span><br><span class="line"><span class="comment">// 第三个参数：数组本身</span></span><br><span class="line"><span class="comment">//thisArg参数</span></span><br><span class="line"><span class="comment">//这个参数是可选参数。</span></span><br><span class="line"><span class="comment">//主要用于绑定函数内this的作用域，否则你在函数内调用this，this指代全局对象Window(ES3)或者undefined(ES5严格模式下)</span></span><br><span class="line"><span class="comment">// 例子:</span></span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>([<span class="string">"a"</span>,<span class="number">1</span>,<span class="string">"b"</span>,<span class="number">2</span>],[<span class="string">"c"</span>,<span class="number">3</span>,<span class="string">"d"</span>,<span class="number">5</span>]);</span><br><span class="line">arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(item);</span><br><span class="line">      <span class="comment">//a,1,b,2和c,3,d,5</span></span><br><span class="line">&#125;);</span><br><span class="line">arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item,i</span>)</span>&#123;</span><br><span class="line">	alert(item+<span class="string">"_"</span>+i); </span><br><span class="line">	<span class="comment">//a,1,b,2_0和c,3,d,5_1;</span></span><br><span class="line">	item.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">items,j</span>)</span>&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(items+<span class="string">"-"</span>+j);</span><br><span class="line">		<span class="comment">//a-0;1-1;b-2;2-3; c-0;3-1;d-2;5-3;</span></span><br><span class="line">     &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>];</span><br><span class="line">a.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">element, index, array</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// element: 指向当前元素的值</span></span><br><span class="line">  <span class="comment">// index: 指向当前索引</span></span><br><span class="line">  <span class="comment">// array: 指向Array对象本身</span></span><br><span class="line">  <span class="built_in">console</span>.log(element);<span class="comment">//'A','B','C'</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>]);</span><br><span class="line">s.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">element, sameElement, set</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"参数1="</span>+element+<span class="string">",参数2="</span>+sameElement);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//参数1=A,参数2=A</span></span><br><span class="line"><span class="comment">//参数1=B,参数2=B</span></span><br><span class="line"><span class="comment">//参数1=C,参数2=C</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="number">1</span>, <span class="string">'x'</span>], [<span class="number">2</span>, <span class="string">'y'</span>], [<span class="number">3</span>, <span class="string">'z'</span>]]);</span><br><span class="line">m.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">value, key, map</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"参数1="</span>+value+<span class="string">",参数2="</span>+key);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//参数1=x,参数2=1</span></span><br><span class="line"><span class="comment">//参数1=y,参数2=2</span></span><br><span class="line"><span class="comment">//参数1=z,参数2=3</span></span><br></pre></td></tr></table></figure></div></p>
<p>关于中断(MDN原话)<br>    没有办法中止或者跳出 forEach 循环，除了抛出一个异常。如果你需要这样，使用forEach()方法是错误的，你可以用一个简单的循环作为替代。如果您正在测试一个数组里的元素是否符合某条件，且需要返回一个布尔值，那么可使用 Array.every或 Array.some。</p>
<hr>
<h3 id="jQuery方法"><a href="#jQuery方法" class="headerlink" title="jQuery方法"></a>jQuery方法</h3><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line">$(dom).each(<span class="function"><span class="keyword">function</span>(<span class="params">index, Element</span>) ) </span>&#123; </span><br><span class="line">	<span class="comment">//执行代码</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 参数</span></span><br><span class="line"><span class="comment">// 第一个参数：当前索引，从0开始</span></span><br><span class="line"><span class="comment">// 第二个参数：指被当前迭代的元素，与在函数体内的this等价</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>([<span class="string">"a"</span>,<span class="number">1</span>,<span class="string">"b"</span>,<span class="number">2</span>],[<span class="string">"c"</span>,<span class="number">3</span>,<span class="string">"d"</span>,<span class="number">5</span>]);</span><br><span class="line">$.each(arr,<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(item);<span class="comment">//0;1</span></span><br><span class="line">&#125;);</span><br><span class="line">$.each(arr,<span class="function"><span class="keyword">function</span>(<span class="params">i,item</span>)</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(item+<span class="string">"_"</span>+i);</span><br><span class="line">	<span class="comment">//a,1,b,2_0和c,3,d,5_1;</span></span><br><span class="line">	$.each(item,<span class="function"><span class="keyword">function</span>(<span class="params">j,items</span>)</span>&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(items+<span class="string">'-'</span>+j);</span><br><span class="line">		<span class="comment">//a-0;1-1;b-2;2-3; c-0;3-1;d-2;5-3;</span></span><br><span class="line">	&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div>
<p><a href="https://www.jb51.net/article/110487.htm" target="_blank" rel="noopener">参考链接1</a></p>
<p><a href="https://www.cnblogs.com/xhy-steve/p/5618441.html" target="_blank" rel="noopener">参考链接2</a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>JS判断对象里是否存在某个键</title>
    <url>/2019/03/28/JS%E5%88%A4%E6%96%AD%E5%AF%B9%E8%B1%A1%E9%87%8C%E6%98%AF%E5%90%A6%E5%AD%98%E5%9C%A8%E6%9F%90%E4%B8%AA%E9%94%AE/</url>
    <content><![CDATA[<p>后台返回数据,有时不判断是否存在该键直接取值会出现报错情况.<br><a id="more"></a></p>
<h2 id="in关键字"><a href="#in关键字" class="headerlink" title="in关键字"></a>in关键字</h2><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> array = &#123;<span class="attr">a</span>:<span class="number">1</span>&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"a"</span> <span class="keyword">in</span> array)</span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"b"</span> <span class="keyword">in</span> array)</span><br><span class="line"><span class="comment">// false</span></span><br></pre></td></tr></table></figure></div>
<h2 id="hasOwnProperty-方法"><a href="#hasOwnProperty-方法" class="headerlink" title="hasOwnProperty()方法"></a>hasOwnProperty()方法</h2><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> array = &#123;<span class="attr">a</span>:<span class="number">1</span>&#125;</span><br><span class="line"><span class="built_in">console</span>.log(o.hasOwnProperty(<span class="string">"a"</span>);)</span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(o.hasOwnProperty(<span class="string">"b"</span>);)</span><br><span class="line"><span class="comment">// false</span></span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>JS判断是否为数字类型</title>
    <url>/2019/03/28/JS%E5%88%A4%E6%96%AD%E6%98%AF%E5%90%A6%E4%B8%BA%E6%95%B0%E5%AD%97%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<p>工作中,出现需要判断输入值是否为数字的情况<br><a id="more"></a></p>
<h2 id="一-isNaN"><a href="#一-isNaN" class="headerlink" title="一 isNaN"></a>一 isNaN</h2><p>NaN 即 Not a Number<br>isNaN(numValue) numvalue 参数为要检查是否为 NAN 的值。<br>isNaN 返回一个 Boolean 值，指明提供的值是否是保留值 NaN （不是数字）。<br>isNaN()把空串或空格作0处理的<br>假如值是 NaN， 那么 isNaN 函数返回 true ，否则返回 false 。</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line">!<span class="built_in">isNaN</span>(<span class="built_in">parseFloat</span>(n)) &amp;&amp; <span class="built_in">isFinite</span>(n);</span><br><span class="line"><span class="keyword">typeof</span> obj === <span class="string">'number'</span> &amp;&amp; !<span class="built_in">isNaN</span>(obj);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(<span class="number">100</span>));        <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(<span class="string">"100"</span>));      <span class="comment">//false,字符串“100”被转换为数字100</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(<span class="string">"aaa"</span>));      <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(<span class="literal">true</span>));       <span class="comment">//false,true转换为数字1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(<span class="string">""</span>));         <span class="comment">//false,空值会被转换为0</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(<span class="literal">NaN</span>));        <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>([]));         <span class="comment">//false,空值会被转换为0</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(<span class="literal">null</span>));       <span class="comment">//false,null会被转换成0</span></span><br></pre></td></tr></table></figure></div>
<h2 id="二-正则表达式"><a href="#二-正则表达式" class="headerlink" title="二 正则表达式"></a>二 正则表达式</h2><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//判断字符串是否为数字</span></span><br><span class="line"><span class="comment">//判断正整数/[1−9]+[0−9]∗]∗/ </span></span><br><span class="line"><span class="keyword">var</span> re = <span class="regexp">/^[0-9]+.?[0-9]*/</span>;</span><br><span class="line"><span class="keyword">if</span> (!re.test(nubmer)) &#123; </span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">"请输入数字"</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="三-利用parseFloat的返回值"><a href="#三-利用parseFloat的返回值" class="headerlink" title="三 利用parseFloat的返回值"></a>三 利用parseFloat的返回值</h2><p>该函数指定字符串中的首个字符是否是数字。如果是，则对字符串进行解析，直到到达数字的末端为止，然后以数字返回该数字，而不是作为字符串。</p>
<blockquote>
<p>parseFloat(string)</p>
</blockquote>
<table>
<thead>
<tr>
<th style="text-align:left">参数</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><em>string</em></td>
<td style="text-align:left">必需。要被解析的字符串。</td>
</tr>
</tbody>
</table>
<h3 id="详细说明"><a href="#详细说明" class="headerlink" title="详细说明"></a>详细说明</h3><p>parseFloat 是全局函数，不属于任何对象。<br>parseFloat 将它的字符串参数解析成为浮点数并返回。如果在解析过程中遇到了正负号（+ 或 -）、数字 (0-9)、小数点，或者科学记数法中的指数（e 或 E）以外的字符，则它会忽略该字符以及之后的所有字符，返回当前已经解析到的浮点数。同时参数字符串首位的空白符会被忽略。<br>如果参数字符串的第一个字符不能被解析成为数字，则 parseFloat 返回 NaN。<br><strong>提示：</strong>您可以通过调用 isNaN 函数来判断 parseFloat 的返回结果是否是 NaN。如果让 NaN 作为了任意数学运算的操作数，则运算结果必定也是 NaN。</p>
<h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>返回解析后的数字。</p>
<hr>
<h4 id="提示和注释"><a href="#提示和注释" class="headerlink" title="提示和注释"></a>提示和注释</h4><p>字符串中只返回第一个数字。<br>开头和结尾的空格是允许的。<br>如果字符串的第一个字符不能被转换为数字，那么 parseFloat() 会返回 NaN。</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseFloat</span>(<span class="string">"10"</span>));       <span class="comment">//10</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseFloat</span>(<span class="string">"10.33"</span>));    <span class="comment">//10.33</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseFloat</span>(<span class="string">"34 45 66"</span>)); <span class="comment">//34</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseFloat</span>(<span class="string">" 60 "</span>));     <span class="comment">//60</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseFloat</span>(<span class="string">"40 years"</span>)); <span class="comment">//40</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseFloat</span>(<span class="string">"He was 40"</span>));<span class="comment">//NaN </span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseFloat</span>(<span class="string">"3.14"</span>))</span><br><span class="line"><span class="comment">// 3.14</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseFloat</span>(<span class="string">"314e-2"</span>)) </span><br><span class="line"><span class="comment">// 3.14</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseFloat</span>(<span class="string">"0.0314E+2"</span>)) </span><br><span class="line"><span class="comment">// 3.14</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseFloat</span>(<span class="string">"3.14more non-digit characters"</span>)) </span><br><span class="line"><span class="comment">// 3.14</span></span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>npm的面试题</title>
    <url>/2019/03/28/npm%E7%9A%84%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    <content><![CDATA[<p>今天在掘金看到一道关于npm的面试题,记录一下!<br><a id="more"></a></p>
<h1 id="npm-i和npm-install的区别"><a href="#npm-i和npm-install的区别" class="headerlink" title="npm i和npm install的区别"></a>npm i和npm install的区别</h1><p>npm的帮助指令指出npm i仅是npm install的简写</p>
<hr>
<p>实际使用的区别点主要如下(windows下)： </p>
<ol>
<li>用npm i安装的模块无法用npm uninstall删除，用npm uninstall i才卸载掉 </li>
<li>npm i会帮助检测与当前node版本最匹配的npm包版本号，并匹配出来相互依赖的npm包应该提升的版本号 </li>
<li>部分npm包在当前node版本下无法使用，必须使用建议版本 </li>
<li>安装报错时intall肯定会出现npm-debug.log 文件，npm i不一定</li>
</ol>
]]></content>
      <categories>
        <category>面试题</category>
      </categories>
      <tags>
        <tag>面试题</tag>
      </tags>
  </entry>
  <entry>
    <title>VMware安装manjaro系统</title>
    <url>/2019/03/30/VMware%E5%AE%89%E8%A3%85manjaro%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<p>周末折腾安装manjaro系统,折腾了一天,踩了许多坑,记录一下!<br><a id="more"></a></p>
<h2 id="安装Manjaro"><a href="#安装Manjaro" class="headerlink" title="安装Manjaro"></a>安装Manjaro</h2><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>官方网站：<a href="https://manjaro.org/get-manjaro/" target="_blank" rel="noopener">https://manjaro.org/get-manjaro/</a><br>目前官方最新版本为18.10，支持都包括xfce,kde,gnome三种桌面环境，选择喜欢的下载，我安装的是xfce桌面。</p>
<h3 id="制作U盘启动"><a href="#制作U盘启动" class="headerlink" title="制作U盘启动"></a>制作U盘启动</h3><p>使用<a href="http://rufus.akeo.ie/" target="_blank" rel="noopener">Rufus</a>以DD方式写入到U盘，注意此操作会擦除U盘所有数据，请做好备份。<br>Rufus官方下载：<a href="https://github.com/pbatard/rufus/releases/download/v3.5/rufus-3.5.exe" target="_blank" rel="noopener">https://github.com/pbatard/rufus/releases/download/v3.5/rufus-3.5.exe</a></p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="更换软件源"><a href="#更换软件源" class="headerlink" title="更换软件源"></a>更换软件源</h3><p>命令行中执行如下命令:</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">sudo pacman-mirrors -c China -g  //刷新软件源，会自动选择最快的源</span><br><span class="line">sudo pacman -Syyu  //更新系统</span><br></pre></td></tr></table></figure></div>
<p>编辑文件：<code>/etc/pacman.d/mirrorlist</code>,在最上面添加：</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line"># 阿里云</span><br><span class="line">Server = http://mirrors.aliyun.com/archlinux/$repo/os/$arch</span><br><span class="line"># 清华大学</span><br><span class="line">Server = https://mirrors.tuna.tsinghua.edu.cn/archlinux/$repo/os/$arch</span><br></pre></td></tr></table></figure></div>
<h3 id="添加archlinuxcn软件源"><a href="#添加archlinuxcn软件源" class="headerlink" title="添加archlinuxcn软件源"></a>添加archlinuxcn软件源</h3><p>编辑文件<code>/etc/pacman.conf</code>，在最下面添加：</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">[archlinuxcn]</span><br><span class="line">Server = https://mirrors.tuna.tsinghua.edu.cn/archlinuxcn/$arch</span><br></pre></td></tr></table></figure></div>
<h3 id="更新软件源并导入公钥"><a href="#更新软件源并导入公钥" class="headerlink" title="更新软件源并导入公钥"></a>更新软件源并导入公钥</h3><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">sudo pacman -Syy</span><br><span class="line">sudo pacman -S archlinuxcn-keyring</span><br></pre></td></tr></table></figure></div>
<h3 id="更新系统"><a href="#更新系统" class="headerlink" title="更新系统"></a>更新系统</h3><p>运行命令：<code>sudo pacman -Syyu</code><br>出现无法安装更新的问题：<code>无法安装更新，xxx被manjaro-release所有</code>解决:<br>卸载<code>manjaro-release</code>:<code>sudo pacman -R manjaro-release</code>,再执行更新命令。</p>
<h3 id="时区问题"><a href="#时区问题" class="headerlink" title="时区问题"></a>时区问题</h3><p>安装完成后,会发现时间总是比实际快了8个小时，试了很多方法，最终使用openNTPD方法解决了问题。<br>步骤:<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装openNTPD：</span></span><br><span class="line">sudo pacman -S openntpd</span><br><span class="line"><span class="comment"># 重启openNTPD：</span></span><br><span class="line">systemctl restart openntpd</span><br><span class="line"><span class="comment"># 设置开机启动：</span></span><br><span class="line">systemctl <span class="built_in">enable</span> openntpd</span><br></pre></td></tr></table></figure></div></p>
<h3 id="垃圾清理"><a href="#垃圾清理" class="headerlink" title="垃圾清理"></a>垃圾清理</h3><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 清除系统中无用的包</span></span><br><span class="line">sudo pacman -R $(pacman -Qdtq)</span><br><span class="line"><span class="comment"># 清除已下载的安装包</span></span><br><span class="line">sudo pacman -Scc</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>Tool</category>
      </categories>
      <tags>
        <tag>Tool</tag>
      </tags>
  </entry>
  <entry>
    <title>Django中的request对象</title>
    <url>/2019/03/29/django%E4%B8%AD%E7%9A%84request%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<p>Django中经常使用request对象的方法,做一下总结!<br><a id="more"></a><br>HttpRequest对象的属性</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>path</td>
<td>表示提交请求页面完整地址的字符串，不包括域名，如 “/music/bands/the_beatles/“。</td>
</tr>
<tr>
<td>path_info</td>
<td>获取具有 URL 扩展名的资源的附加路径信息。相对于HttpRequest.path，使用该方法便于移植。</td>
</tr>
<tr>
<td>scheme</td>
<td>请求的协议，一般为http或者https，字符串格式(以下属性中若无特殊指明，均为字符串格式)</td>
</tr>
<tr>
<td>body</td>
<td>http请求的主体，二进制格式。</td>
</tr>
<tr>
<td>method</td>
<td>表示提交请求使用的HTTP方法。它总是大写的。例如：if request.method == ‘GET’:    do_something()elif request.method == ‘POST’:    do_something_else()</td>
</tr>
<tr>
<td>GET</td>
<td>一个类字典对象，包含所有的HTTP的GET参数的信息。见 QueryDict 文档。</td>
</tr>
<tr>
<td>POST</td>
<td>一个类字典对象，包含所有的HTTP的POST参数的信息。见 QueryDict 文档。通过POST提交的请求有可能包含一个空的 POST 字典，也就是说， 一个通过POST方法提交的表单可能不包含数据。因此，不应该使用 if request.POST 来判断POST方法的使用，而是使用 if request.method == “POST” （见表中的 method 条目）。注意： POST 并 不 包含文件上传信息。见 FILES 。</td>
</tr>
<tr>
<td>REQUEST</td>
<td>为了方便而创建，这是一个类字典对象，先搜索 POST ，再搜索 GET 。 灵感来自于PHP的 $_REQEUST 。例如， 若 GET = {“name”: “john”} ， POST = {“age”: ‘34’} ，REQUEST[“name”] 会是 “john” ， REQUEST[“age”] 会是 “34” 。强烈建议使用 GET 和 POST ，而不是 REQUEST 。这是为了向前兼容和更清楚的表示。</td>
</tr>
<tr>
<td>COOKIES</td>
<td>一个标准的Python字典，包含所有cookie。键和值都是字符串。cookie使用的更多信息见第12章。</td>
</tr>
<tr>
<td>FILES</td>
<td>一个类字典对象，包含所有上传的文件。 FILES 的键来自 <input type="file" name> 中的 name 。 FILES 的值是一个标准的Python字典，包含以下三个键：filename ：字符串，表示上传文件的文件名。content-type ：上传文件的内容类型。content ：上传文件的原始内容。注意 FILES 只在请求的方法是 POST ，并且提交的 <form> 包含enctype=”multipart/form-data” 时才包含数据。否则， FILES 只是一个空的类字典对象。</form></td>
</tr>
<tr>
<td>META</td>
<td>一个标准的Python字典，包含所有有效的HTTP头信息。有效的头信息与客户端和服务器有关。这里有几个例子：CONTENT_LENGTHCONTENT_TYPEQUERY_STRING ：未解析的原始请求字符串。REMOTE_ADDR ：客户端IP地址。REMOTE_HOST ：客户端主机名。SERVER_NAME ：服务器主机名。SERVER_PORT ：服务器端口号。在 META 中有效的任一HTTP头信息都是带有 HTTP_ 前缀的键，例如：HTTP_ACCEPT_ENCODINGHTTP_ACCEPT_LANGUAGEHTTP_HOST ：客户端发送的 Host 头信息。HTTP_REFERER ：被指向的页面，如果存在的。HTTP_USER_AGENT ：客户端的user-agent字符串。HTTP_X_BENDER ： X-Bender 头信息的值，如果已设的话。</td>
</tr>
<tr>
<td>user</td>
<td>一个 django.contrib.auth.models.User 对象表示当前登录用户。 若当前用户尚未登录， user 会设为 django.contrib.auth.models.AnonymousUser 的一个实例。可以将它们与 is_authenticated() 区别开：if request.user.is_authenticated():    # Do something for logged-in users.else:    # Do something for anonymous users.user 仅当Django激活 AuthenticationMiddleware 时有效。关于认证和用户的完整细节，见第12章。</td>
</tr>
<tr>
<td>site</td>
<td>中间件属性</td>
</tr>
<tr>
<td>session</td>
<td>一个可读写的类字典对象，表示当前session。仅当Django已激活session支持时有效。见第12章。</td>
</tr>
<tr>
<td>raw_post_data</td>
<td>POST的原始数据。 用于对数据的复杂处理。</td>
</tr>
<tr>
<td>encoding</td>
<td>获取请求中表单提交数据的编码。</td>
</tr>
<tr>
<td>content_type</td>
<td>获取请求的MIME类型(从CONTENT_TYPE头部中获取)，django1.10的新特性。</td>
</tr>
<tr>
<td>content_params</td>
<td>取CONTENT_TYPE中的键值对参数，并以字典的方式表示，django1.10的新特性。</td>
</tr>
<tr>
<td></td>
</tr>
</tbody>
</table>
<hr>
<p>HttpRequest 的方法</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>get_host()</td>
<td>返回请求的源主机。example: 127.0.0.1:8000</td>
</tr>
<tr>
<td>get_port()</td>
<td>django1.9的新特性。</td>
</tr>
<tr>
<td>bulid_absolute_uri(location)</td>
<td>返回location的绝对uri，location默认为request.get_full_path()。</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>getitem</strong>(key)</td>
<td>请求所给键的GET/POST值，先查找POST，然后是GET。若键不存在，则引发异常KeyError 。该方法使用户可以以访问字典的方式来访问一个 HttpRequest 实例。例如， request[“foo”] 和先检查 request.POST[“foo”] 再检查request.GET[“foo”] 一样。</td>
</tr>
<tr>
<td>has_key()</td>
<td>返回 True 或 False ，标识 request.GET 或 request.POST 是否包含所给的键。</td>
</tr>
<tr>
<td>get_full_path()</td>
<td>返回 path ，若请求字符串有效，则附加于其后。例如，”/music/bands/the_beatles/?print=true” 。</td>
</tr>
<tr>
<td>is_secure()</td>
<td>如果请求是安全的，则返回 True 。也就是说，请求是以HTTPS的形式提交的。</td>
</tr>
</tbody>
</table>
<p><a href="https://docs.djangoproject.com/zh-hans/2.1/_modules/django/http/request/" target="_blank" rel="noopener">参考链接1</a></p>
<p><a href="https://www.cnblogs.com/eric_yi/p/8046586.html" target="_blank" rel="noopener">参考链接2</a></p>
]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>JS判断数组是否包含某个值</title>
    <url>/2019/04/01/JS%E5%88%A4%E6%96%AD%E6%95%B0%E7%BB%84%E6%98%AF%E5%90%A6%E5%8C%85%E5%90%AB%E6%9F%90%E4%B8%AA%E5%80%BC/</url>
    <content><![CDATA[<p>为减轻服务器压力,需要前台对后台返回数据进行筛选排序等操作,最近做图标,需要判断某个日期是否已经在数组中存在,看了多种方法,记录一下,方便以后使用.<br><a id="more"></a></p>
<h3 id="array-indexOf"><a href="#array-indexOf" class="headerlink" title="array.indexOf"></a>array.indexOf</h3><p>判断数组中是否存在某个值，如果存在返回数组元素的下标，否则返回-1。<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>];</span><br><span class="line"><span class="keyword">let</span> index = arr.indexOf(<span class="string">'d'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(index) </span><br><span class="line"><span class="comment">//结果是3</span></span><br><span class="line"><span class="keyword">let</span> index1 = arr.indexOf(<span class="string">'g'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(index1) </span><br><span class="line"><span class="comment">//结果是-1</span></span><br></pre></td></tr></table></figure></div></p>
<h3 id="array-includes-searchElement-fromIndex"><a href="#array-includes-searchElement-fromIndex" class="headerlink" title="array.includes(searchElement[, fromIndex])"></a>array.includes(searchElement[, fromIndex])</h3><p>判断数组中是否存在某个值，如果存在返回 true，否则返回false。<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>];</span><br><span class="line"><span class="keyword">if</span> (arr.includes(e)) &#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="literal">true</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="literal">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p>
<h3 id="array-find-callback-thisArg"><a href="#array-find-callback-thisArg" class="headerlink" title="array.find(callback[, thisArg])"></a>array.find(callback[, thisArg])</h3><p>返回数组中满足条件的第一个元素的值，如果没有，返回undefined<br><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ---------- 元素是普通字面值 ----------</span></span><br><span class="line"><span class="keyword">let</span> numbers = [<span class="number">12</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">130</span>, <span class="number">44</span>];</span><br><span class="line"><span class="keyword">let</span> result = numbers.find(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> item &gt; <span class="number">8</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(result)</span><br><span class="line"># 结果： 12</span><br><span class="line"><span class="comment">// ---------- 元素是对象 ----------</span></span><br><span class="line"><span class="keyword">let</span> items = [</span><br><span class="line">    &#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">'something'</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">'anything'</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">'nothing'</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">id</span>: <span class="number">4</span>, <span class="attr">name</span>: <span class="string">'anything'</span>&#125;</span><br><span class="line">];</span><br><span class="line"><span class="keyword">let</span> item = items.find(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> item.id == <span class="number">3</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(item) </span><br><span class="line"># 结果： Object &#123; id: 3, name: "nothing" &#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="array-findIndex-callback-thisArg"><a href="#array-findIndex-callback-thisArg" class="headerlink" title="array.findIndex(callback[, thisArg])"></a>array.findIndex(callback[, thisArg])</h3><p>返回数组中满足条件的第一个元素的索引（下标）, 如果没有找到，返回-1<br><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ---------- 元素是普通字面值 ----------</span></span><br><span class="line"><span class="keyword">let</span> numbers = [<span class="number">6</span>, <span class="number">32</span>, <span class="number">67</span>, <span class="number">130</span>, <span class="number">77</span>];</span><br><span class="line"><span class="keyword">let</span> result = numbers.findIndex(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> item &gt; <span class="number">8</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(result)</span><br><span class="line"># 结果： 1</span><br><span class="line"><span class="comment">// ---------- 元素是对象 ----------</span></span><br><span class="line"><span class="keyword">let</span> items = [</span><br><span class="line">    &#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">'a'</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">'b'</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">'c'</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">id</span>: <span class="number">4</span>, <span class="attr">name</span>: <span class="string">'d'</span>&#125;</span><br><span class="line">];</span><br><span class="line"><span class="keyword">let</span> item = items.findIndex(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> item.id == <span class="number">3</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(item) </span><br><span class="line"># 结果： 2</span><br></pre></td></tr></table></figure></p>
<p><a href="https://www.cnblogs.com/hepengqiang/p/9822118.html" target="_blank" rel="noopener">参考链接</a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>JS随机颜色</title>
    <url>/2019/04/03/JS%E9%9A%8F%E6%9C%BA%E9%A2%9C%E8%89%B2/</url>
    <content><![CDATA[<p>前端许多地方会使用到随机颜色,比如随机标签,图表等<br><a id="more"></a></p>
<h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> getRandomColor = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'#'</span> +(<span class="function"><span class="keyword">function</span>(<span class="params">color</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (color += <span class="string">'0123456789abcdef'</span> [<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">16</span>)]) &amp;&amp; (color.length == <span class="number">6</span>) ? color : <span class="built_in">arguments</span>.callee(color);</span><br><span class="line">        &#125;)(<span class="string">''</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//随机生成6个字符然后再串到一起，闭包调用自身与三元运算符让程序变得内敛</span></span><br><span class="line"><span class="comment">// 类似方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_g</span>(<span class="params">color</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((color += <span class="string">'0123456789abcdef'</span> [<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">16</span>)]) &amp;&amp; (color.length == <span class="number">6</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> color</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">arguments</span>.callee(color);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> getRandomColor = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'#'</span> + _g(<span class="string">''</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//getRandomColor函数里面传过来一个空字符串，首先连接上'0123456789abcdef'字符串里面随机的一个字母，也就是这段代码：color +='0123456789abcdef'[Math.floor(Math.random()*16)]；</span></span><br><span class="line"><span class="comment">//然后判断color这个变量的长度是不是为6，因为标准的颜色值是一个长度为6的字符串，第一次执行为1，所以不满足，执行问号后面的arguments.callee(color)；自调用；</span></span><br></pre></td></tr></table></figure></div>
<h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> getRandomColor = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="function"><span class="keyword">function</span>(<span class="params">m, s, c</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (c ? <span class="built_in">arguments</span>.callee(m, s, c - <span class="number">1</span>) : <span class="string">'#'</span>) +</span><br><span class="line">            s[m.floor(m.random() * <span class="number">16</span>)]</span><br><span class="line">    &#125;)(<span class="built_in">Math</span>, <span class="string">'0123456789abcdef'</span>, <span class="number">5</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 把Math对象，用于生成hex颜色值的字符串提取出来，并利用第三个参数来判断是否还继续调用自身</span></span><br></pre></td></tr></table></figure></div>
<h3 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h3><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//随机颜色，十六进制方法；</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRandomColor</span>(<span class="params"> </span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> rand = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random( ) * <span class="number">0xFFFFFF</span>).toString(<span class="number">16</span>);</span><br><span class="line">    <span class="keyword">if</span>(rand.length == <span class="number">6</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> rand;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getRandomColor();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 十六进制与十进制的转换，我们熟知的颜色值比如#ffffff这种写法是十六进制颜色写法，将其转换为十进制之后得到16777215</span></span><br></pre></td></tr></table></figure></div>
<p>十六进制与十进制互相转换代码:<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 十六进制转换十进制</span></span><br><span class="line"><span class="keyword">var</span> a=<span class="string">"#ffffff"</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(a.slice(<span class="number">1</span>),<span class="number">16</span>))   <span class="comment">// ==&gt; 16777215</span></span><br><span class="line"><span class="comment">// 十进制转换十六进制</span></span><br><span class="line"><span class="keyword">var</span> a=<span class="number">16777215</span></span><br><span class="line"><span class="built_in">console</span>.log(a.toString(<span class="number">16</span>))   <span class="comment">// ==&gt; ffffff</span></span><br></pre></td></tr></table></figure></div></p>
<h3 id="方法四：HSL模式颜色随机"><a href="#方法四：HSL模式颜色随机" class="headerlink" title="方法四：HSL模式颜色随机"></a>方法四：HSL模式颜色随机</h3><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 十六进制转换十进制</span></span><br><span class="line"><span class="keyword">var</span> getRandomColor = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"hsl("</span> + <span class="built_in">Math</span>.round(<span class="built_in">Math</span>.random() * <span class="number">360</span>) + <span class="string">","</span> + <span class="built_in">Math</span>.round(<span class="built_in">Math</span>.random() * <span class="number">100</span>) + <span class="string">'%,'</span> + <span class="built_in">Math</span>.round(<span class="built_in">Math</span>.random() * <span class="number">100</span>) + <span class="string">'%)'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="方法五：RGB模式随机"><a href="#方法五：RGB模式随机" class="headerlink" title="方法五：RGB模式随机"></a>方法五：RGB模式随机</h3><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 十六进制转换十进制</span></span><br><span class="line"><span class="keyword">var</span> getRandomColor = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"rgb("</span> + <span class="built_in">Math</span>.round(<span class="built_in">Math</span>.random() * <span class="number">255</span>) + <span class="string">","</span> + <span class="built_in">Math</span>.round(<span class="built_in">Math</span>.random() * <span class="number">255</span>) + <span class="string">','</span> + <span class="built_in">Math</span>.round(<span class="built_in">Math</span>.random() * <span class="number">10</span>) + <span class="string">')'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="方法六：RGB模式随机二"><a href="#方法六：RGB模式随机二" class="headerlink" title="方法六：RGB模式随机二"></a>方法六：RGB模式随机二</h3><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 十六进制转换十进制</span></span><br><span class="line"><span class="keyword">var</span> getRandomColor = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> r = <span class="built_in">Math</span>.round(<span class="built_in">Math</span>.random() * <span class="number">255</span>), g = <span class="built_in">Math</span>.round(<span class="built_in">Math</span>.random() * <span class="number">255</span>), b = <span class="built_in">Math</span>.round(<span class="built_in">Math</span>.random() * <span class="number">255</span>);</span><br><span class="line">    <span class="keyword">var</span> color = r &lt;&lt; <span class="number">16</span> | g &lt;&lt; <span class="number">8</span> | b;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"#"</span> + color.toString(<span class="number">16</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p><a href="https://www.cnblogs.com/jone-chen/p/5254484.html" target="_blank" rel="noopener">参考链接</a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>JS数字运算</title>
    <url>/2019/04/02/JS%E6%95%B0%E5%AD%97%E8%BF%90%E7%AE%97/</url>
    <content><![CDATA[<p>记录一下JS常见的数学运算<br><a id="more"></a></p>
<h3 id="取整"><a href="#取整" class="headerlink" title="取整"></a>取整</h3><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 保留整数部分</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="number">3</span>/<span class="number">2</span>)</span><br><span class="line"><span class="comment">// 1</span></span><br></pre></td></tr></table></figure></div>
<h3 id="向上取整"><a href="#向上取整" class="headerlink" title="向上取整"></a>向上取整</h3><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 向上取整,有小数就整数部分加1</span></span><br><span class="line"><span class="built_in">Math</span>.ceil(<span class="number">3</span>/<span class="number">2</span>)</span><br><span class="line"><span class="comment">// 2</span></span><br></pre></td></tr></table></figure></div>
<h3 id="四舍五入"><a href="#四舍五入" class="headerlink" title="四舍五入"></a>四舍五入</h3><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 四舍五入</span></span><br><span class="line"><span class="built_in">Math</span>.round(<span class="number">3</span>/<span class="number">2</span>)</span><br><span class="line"><span class="comment">// 2</span></span><br></pre></td></tr></table></figure></div>
<h3 id="向下取整"><a href="#向下取整" class="headerlink" title="向下取整"></a>向下取整</h3><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 向下取整,丢弃小数部分</span></span><br><span class="line"><span class="built_in">Math</span>.floor(<span class="number">3</span>/<span class="number">2</span>)</span><br><span class="line"><span class="comment">// 1</span></span><br></pre></td></tr></table></figure></div>
<h3 id="取余"><a href="#取余" class="headerlink" title="取余"></a>取余</h3><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 取余</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">7</span>%<span class="number">4</span>);　　</span><br><span class="line"><span class="comment">// 3</span></span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>MAC系统移动硬盘文件变灰打开显示正在使用</title>
    <url>/2019/04/06/MAC%E7%B3%BB%E7%BB%9F%E7%A7%BB%E5%8A%A8%E7%A1%AC%E7%9B%98%E6%96%87%E4%BB%B6%E5%8F%98%E7%81%B0%E6%89%93%E5%BC%80%E6%98%BE%E7%A4%BA%E6%AD%A3%E5%9C%A8%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>MAC电脑在向移动硬盘拷贝文件，移动硬盘里文件变灰色，且无法再进行拷贝，提示文件正在使用。<br><a id="more"></a></p>
<h3 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h3><p>首先移动硬盘插入电脑后是无法使用的，需要使用软件让其可以进行读写。</p>
<ul>
<li>推荐软件Mounty for NTFS</li>
<li>该软件可以让Mac系统支持NTFS硬盘读写操作。</li>
</ul>
<hr>
<h3 id="变灰原因"><a href="#变灰原因" class="headerlink" title="变灰原因"></a>变灰原因</h3><p>文件属性中多了个@<br>查看具体文件的属性：</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">ls -l &lt;路径&gt;</span><br></pre></td></tr></table></figure></div>
<p>看文件具体属性：<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">xattr -l &lt;路径&gt;</span><br></pre></td></tr></table></figure></div></p>
<hr>
<h3 id="去除多余属性"><a href="#去除多余属性" class="headerlink" title="去除多余属性"></a>去除多余属性</h3><p>去除文件属性：<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">xattr -c filename</span><br></pre></td></tr></table></figure></div></p>
<p>去除目录下所有文件或目录的附加属性：<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">xattr -c -r path</span><br></pre></td></tr></table></figure></div></p>
]]></content>
      <categories>
        <category>MAC</category>
      </categories>
      <tags>
        <tag>MAC</tag>
      </tags>
  </entry>
  <entry>
    <title>Django中FileField同名文件直接覆盖</title>
    <url>/2019/04/11/Django%E4%B8%ADFileField%E5%90%8C%E5%90%8D%E6%96%87%E4%BB%B6%E7%9B%B4%E6%8E%A5%E8%A6%86%E7%9B%96/</url>
    <content><![CDATA[<p>Django中FileField默认情况遇到相同文件名的时候会自动在后面加下划线，有时业务需要直接覆盖先前的文件<br><a id="more"></a></p>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>自定义一个mystorage类,继承FileSystemStorage并重写其get_available_name方法.<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">import os</span><br><span class="line">from django.core.files.storage import FileSystemStorage</span><br><span class="line"></span><br><span class="line">class mystorage(FileSystemStorage):</span><br><span class="line">    def get_available_name(self, name, max_length=255):</span><br><span class="line">        if self.exists(name):</span><br><span class="line">            os.remove(os.path.join(settings.MEDIA_ROOT, name))</span><br><span class="line">        return name</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">file = models.FileField(upload_to=&apos;file/&apos;,storage=mystorage())</span><br><span class="line"># 注:get_available_name中max_length参数必须指定,否则在存储文件时出现会报错问题.</span><br></pre></td></tr></table></figure></div></p>
]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>div背景图自适应</title>
    <url>/2019/04/09/div%E8%83%8C%E6%99%AF%E5%9B%BE%E8%87%AA%E9%80%82%E5%BA%94/</url>
    <content><![CDATA[<p> div背景图自适应<br><a id="more"></a><br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSS"><figure class="iseeu highlight /css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">background-image</span>: <span class="selector-tag">url</span>(<span class="selector-tag">background</span><span class="selector-class">.jpg</span>);</span><br><span class="line"><span class="selector-tag">background-repeat</span>: <span class="selector-tag">no-repeat</span>;</span><br><span class="line"><span class="selector-tag">background-size</span>: 100% 100%;</span><br><span class="line"><span class="selector-tag">-moz-background-size</span>: 100% 100%;</span><br></pre></td></tr></table></figure></div></p>
<p>background-repeat 属性设置是否及如何重复背景图像。</p>
<table>
<thead>
<tr>
<th style="text-align:left">值</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">repeat</td>
<td style="text-align:left">默认。背景图像将在垂直方向和水平方向重复。</td>
</tr>
<tr>
<td style="text-align:left">repeat-x</td>
<td style="text-align:left">背景图像将在水平方向重复。</td>
</tr>
<tr>
<td style="text-align:left">repeat-y</td>
<td style="text-align:left">背景图像将在垂直方向重复。</td>
</tr>
<tr>
<td style="text-align:left">no-repeat</td>
<td style="text-align:left">背景图像将仅显示一次。</td>
</tr>
<tr>
<td style="text-align:left">inherit</td>
<td style="text-align:left">规定应该从父元素继承 background-repeat 属性的设置。</td>
</tr>
</tbody>
</table>
<p>background-origin 属性规定 background-position 属性相对于什么位置来定位。</p>
<p><strong>注释：</strong>如果背景图像的 background-attachment 属性为 “fixed”，则该属性没有效果。</p>
<table>
<thead>
<tr>
<th style="text-align:left">值</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">padding-box</td>
<td style="text-align:left">背景图像相对于内边距框来定位。</td>
</tr>
<tr>
<td style="text-align:left">border-box</td>
<td style="text-align:left">背景图像相对于边框盒来定位。</td>
</tr>
<tr>
<td style="text-align:left">content-box</td>
<td style="text-align:left">背景图像相对于内容框来定位。</td>
</tr>
</tbody>
</table>
<p>background-clip 属性规定背景的绘制区域。</p>
<table>
<thead>
<tr>
<th style="text-align:left">值</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">border-box</td>
<td style="text-align:left">背景被裁剪到边框盒。</td>
</tr>
<tr>
<td style="text-align:left">padding-box</td>
<td style="text-align:left">背景被裁剪到内边距框。</td>
</tr>
<tr>
<td style="text-align:left">content-box</td>
<td style="text-align:left">背景被裁剪到内容框。</td>
</tr>
</tbody>
</table>
<p>background-size 属性规定背景图像的尺寸。</p>
<table>
<thead>
<tr>
<th style="text-align:left">值</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><em>length</em></td>
<td style="text-align:left">设置背景图像的高度和宽度。第一个值设置宽度，第二个值设置高度。如果只设置一个值，则第二个值会被设置为 “auto”。</td>
</tr>
<tr>
<td style="text-align:left"><em>percentage</em></td>
<td style="text-align:left">以父元素的百分比来设置背景图像的宽度和高度。第一个值设置宽度，第二个值设置高度。如果只设置一个值，则第二个值会被设置为 “auto”。</td>
</tr>
<tr>
<td style="text-align:left">cover</td>
<td style="text-align:left">把背景图像扩展至足够大，以使背景图像完全覆盖背景区域。背景图像的某些部分也许无法显示在背景定位区域中。</td>
</tr>
<tr>
<td style="text-align:left">contain</td>
<td style="text-align:left">把图像图像扩展至最大尺寸，以使其宽度和高度完全适应内容区域。</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>使用workon时出现workon: command not found错误</title>
    <url>/2019/04/11/%E4%BD%BF%E7%94%A8workon%E6%97%B6%E5%87%BA%E7%8E%B0workon-command-not-found%E9%94%99%E8%AF%AF/</url>
    <content><![CDATA[<p>安装了oh-my-zsh，发现workon命令不起作用，报错zsh: command not found: workon<br><a id="more"></a></p>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案:"></a>解决方案:</h3><p>1.编辑.zshrc文件<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">sudo vim ~/.zshrc</span><br></pre></td></tr></table></figure></div></p>
<p>2.在文件最后添加如下代码<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> WORKON_HOME=<span class="variable">$HOME</span>/<span class="string">'虚拟环境目录'</span></span><br><span class="line"><span class="built_in">source</span> /usr/<span class="built_in">local</span>/bin/virtualenvwrapper.sh</span><br></pre></td></tr></table></figure></div></p>
<p>3.让修改生效<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure></div></p>
<p><a href="https://www.jianshu.com/p/bba968ca3957" target="_blank" rel="noopener">更多链接</a></p>
]]></content>
      <categories>
        <category>Tool</category>
      </categories>
      <tags>
        <tag>Tool</tag>
      </tags>
  </entry>
  <entry>
    <title>Error: The following directories are not writable by your user</title>
    <url>/2019/04/11/Error-The-following-directories-are-not-writable-by-your-user/</url>
    <content><![CDATA[<p>使用Homebrew安装应用安装应用出现 ‘Error: The following directories are not writable by your user’错误.<br><a id="more"></a></p>
<h3 id="Homebrew安装应用报权限错误"><a href="#Homebrew安装应用报权限错误" class="headerlink" title="Homebrew安装应用报权限错误"></a>Homebrew安装应用报权限错误</h3><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">Error: The following directories are not writable by your user:</span><br><span class="line">/usr/<span class="built_in">local</span>/sbin</span><br><span class="line">You should change the ownership of these directories to your user.</span><br><span class="line">  sudo chown -R $(whoami) /usr/<span class="built_in">local</span>/sbin</span><br><span class="line"></span><br><span class="line">And make sure that your user has write permission.</span><br><span class="line">  chmod u+w /usr/<span class="built_in">local</span>/sbin</span><br></pre></td></tr></table></figure></div>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 网上方案,未奏效</span></span><br><span class="line">sudo chown -R <span class="string">'whoami'</span>:admin /usr/<span class="built_in">local</span>/bin</span><br><span class="line">sudo chown -R <span class="string">'whoami'</span>:admin /usr/<span class="built_in">local</span>/share</span><br><span class="line"><span class="comment"># 解决方案</span></span><br><span class="line">sudo chown -R $(whoami) /usr/<span class="built_in">local</span>/sbin</span><br><span class="line">chmod u+w /usr/<span class="built_in">local</span>/sbin</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>MAC</category>
      </categories>
      <tags>
        <tag>MAC</tag>
      </tags>
  </entry>
  <entry>
    <title>小程序中Flex最后一项右对齐</title>
    <url>/2019/04/16/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B8%ADFlex%E6%9C%80%E5%90%8E%E4%B8%80%E9%A1%B9%E5%8F%B3%E5%AF%B9%E9%BD%90/</url>
    <content><![CDATA[<p>小程序项目中列表最后一项需要右对齐.<br><a id="more"></a><br>Flex 中使用 justify-content, 规定项目之间的对其方法，如果要让最后一项向右边对齐<br>简单方法，在最后一项元素使用样式：<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line">margin-left: auto;</span><br></pre></td></tr></table></figure></div></p>
<p><a href="https://stackoverflow.com/questions/22429003/how-to-right-align-flex-item/22429853#22429853" target="_blank" rel="noopener">参考链接</a></p>
]]></content>
      <categories>
        <category>小程序</category>
      </categories>
      <tags>
        <tag>小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac下安装配置Mongodb</title>
    <url>/2019/04/13/Mac%E4%B8%8B%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AEMongodb/</url>
    <content><![CDATA[<p>MongoDB作为著名的Nosql数据库,在许多方面都有很大的作用,可以快速搭建一个登录注册系统.<br><a id="more"></a></p>
<h2 id="一-使用homebrew安装"><a href="#一-使用homebrew安装" class="headerlink" title="一.使用homebrew安装"></a>一.使用homebrew安装</h2><h4 id="1-进入https-brew-sh-使用命令安装homebrew"><a href="#1-进入https-brew-sh-使用命令安装homebrew" class="headerlink" title="1.进入https://brew.sh,使用命令安装homebrew"></a>1.进入<a href="https://brew.sh,使用命令安装homebrew" target="_blank" rel="noopener">https://brew.sh,使用命令安装homebrew</a></h4><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">ruby -e <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>"</span></span><br><span class="line"><span class="comment"># 卸载命令</span></span><br><span class="line">ruby -e <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/uninstall)</span>"</span></span><br></pre></td></tr></table></figure></div>
<h4 id="2-安装mongodb"><a href="#2-安装mongodb" class="headerlink" title="2.安装mongodb"></a>2.安装mongodb</h4><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">brew install mongodb</span><br></pre></td></tr></table></figure></div>
<h4 id="3-启动mongodb"><a href="#3-启动mongodb" class="headerlink" title="3.启动mongodb"></a>3.启动mongodb</h4><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">brew services start mongodb</span><br></pre></td></tr></table></figure></div>
<h4 id="4-进入mongodb的shell"><a href="#4-进入mongodb的shell" class="headerlink" title="4.进入mongodb的shell"></a>4.进入mongodb的shell</h4><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">mongo</span><br></pre></td></tr></table></figure></div>
<h4 id="查看mongodb进程"><a href="#查看mongodb进程" class="headerlink" title="查看mongodb进程"></a>查看mongodb进程</h4><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">ps -aef | grep mongo</span><br></pre></td></tr></table></figure></div>
<h2 id="二-mongodb常用命令："><a href="#二-mongodb常用命令：" class="headerlink" title="二.mongodb常用命令："></a>二.mongodb常用命令：</h2><h4 id="查询库"><a href="#查询库" class="headerlink" title="查询库"></a>查询库</h4><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">//查询所有的数据库</span><br><span class="line">show dbs</span><br></pre></td></tr></table></figure></div>
<h4 id="查询表"><a href="#查询表" class="headerlink" title="查询表"></a>查询表</h4><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">//查询当前数据库下的所有数据表</span><br><span class="line">show collections</span><br></pre></td></tr></table></figure></div>
<h4 id="建库和删库"><a href="#建库和删库" class="headerlink" title="建库和删库"></a>建库和删库</h4><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">//建立一个名为myDbs的数据库，当这个库存在时则是切换到这个数据库中去</span><br><span class="line">use myDbs  </span><br><span class="line"></span><br><span class="line">//这两句是删除这个数据库</span><br><span class="line">use myDbs</span><br><span class="line">db.dropDatabase();</span><br></pre></td></tr></table></figure></div>
<h4 id="建表和删表"><a href="#建表和删表" class="headerlink" title="建表和删表"></a>建表和删表</h4><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">//表操作都是要先到一个数据库中去，通过use方法</span><br><span class="line">//在mongodb中在插入数据时即创建了表，此时创建的是名为myTable的数据表</span><br><span class="line">db.myTable.insert(&#123;name:’hf’,age:20&#125;);  </span><br><span class="line">//删除myTable这个数据表</span><br><span class="line">db.myTable.drop();  </span><br><span class="line">//如果没有指定数据库，表会创建在mongdb默认数据库test里</span><br></pre></td></tr></table></figure></div>
<h4 id="单表的增删改"><a href="#单表的增删改" class="headerlink" title="单表的增删改"></a>单表的增删改</h4><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">//新增</span><br><span class="line">db.myTable.insert(&#123;name:’hahaha’,age:12&#125;);  </span><br><span class="line">//修改</span><br><span class="line">db.myTable.update(&#123;name:’hf’&#125;,&#123;$set:&#123;age:25&#125;&#125;)  </span><br><span class="line">//删除</span><br><span class="line">db.myTable.remove(&#123;name:’hf&apos;&#125;);</span><br></pre></td></tr></table></figure></div>
<h4 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h4><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">//查询myTable中的所有数据</span><br><span class="line">db.myTable.find();  </span><br><span class="line">//根据age升续</span><br><span class="line">db.myTable.find().sort(&#123;age:1&#125;)  </span><br><span class="line">//查询</span><br><span class="line">db.myTable.find().count();</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>MAC</category>
      </categories>
      <tags>
        <tag>MAC</tag>
      </tags>
  </entry>
  <entry>
    <title>小程序数字精确度问题</title>
    <url>/2019/04/17/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%95%B0%E5%AD%97%E7%B2%BE%E7%A1%AE%E5%BA%A6%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>小程序中数字在计算过程中会出现精确度的问题.<br><a id="more"></a></p>
<h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案:"></a>解决方案:</h4><p>1.最简单的解决方案:<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">parseFloat((数字运算).toFixed(10))</span><br></pre></td></tr></table></figure></div></p>
]]></content>
      <categories>
        <category>小程序</category>
      </categories>
      <tags>
        <tag>小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>分享一个图片</title>
    <url>/2019/04/12/%E5%88%86%E4%BA%AB%E4%B8%80%E4%B8%AA%E5%9B%BE%E7%89%87/</url>
    <content><![CDATA[<p>看到一张关于学习的图片记录一下！<br><a id="more"></a></p>
<p><img src="https://preview.cloud.189.cn/image/imageAction?param=4AEA29E071E30393823E3F17426E12120CB96DF89DDAA335F0E3EC373DCE4E7437B955FBC22955F72A7AA609A2F8652FFF7643891F9F9C6FA5963C54EC02D6A707CF300EC9D21AC4CCFC3059FA3567D2548524BB4E812903A7E5D8AD" alt="学习金字塔"></p>
]]></content>
      <categories>
        <category>Tool</category>
      </categories>
      <tags>
        <tag>Tool</tag>
      </tags>
  </entry>
  <entry>
    <title>Django自定义装饰器限制登录访问</title>
    <url>/2019/04/18/Django%E8%87%AA%E5%AE%9A%E4%B9%89%E8%A3%85%E9%A5%B0%E5%99%A8%E9%99%90%E5%88%B6%E7%99%BB%E5%BD%95%E8%AE%BF%E9%97%AE/</url>
    <content><![CDATA[<p>带登录的系统很多页面需要登录验证通过后才可以进行访问。<br><a id="more"></a></p>
<h4 id="基于cookie和装饰器实现用户认证"><a href="#基于cookie和装饰器实现用户认证" class="headerlink" title="基于cookie和装饰器实现用户认证"></a>基于cookie和装饰器实现用户认证</h4><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_login_status</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(reqeust,*args,**kwargs)</span>:</span></span><br><span class="line">        user = reqeust.COOKIES.get(<span class="string">'login_user'</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> user:</span><br><span class="line">            <span class="keyword">return</span> redirect(<span class="string">'/login'</span>)</span><br><span class="line">        <span class="keyword">return</span> func(reqeust, *args,**kwargs)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@check_login_status</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="string">'''主页'''</span></span><br><span class="line">    .......</span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">'index.html'</span>)</span><br></pre></td></tr></table></figure></div>
<h4 id="基于session和装饰器实现用户认证"><a href="#基于session和装饰器实现用户认证" class="headerlink" title="基于session和装饰器实现用户认证"></a>基于session和装饰器实现用户认证</h4><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_login_status</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(request, *args, **kwargs)</span>:</span></span><br><span class="line">        user = request.session.get(<span class="string">'login_user'</span>, <span class="literal">None</span>)  <span class="comment"># 获取session值</span></span><br><span class="line">        <span class="comment"># user = request.session.has_key('login_user')</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> user:  <span class="comment">#判断是否已经登录</span></span><br><span class="line">            <span class="keyword">return</span> redirect(<span class="string">'/login'</span>)   <span class="comment">#如果没有登录返回登录页面</span></span><br><span class="line">        <span class="keyword">return</span> func(request, *args, **kwargs)  <span class="comment"># 如果已经登录返回原函数请求页面</span></span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line">    </span><br><span class="line"><span class="meta">@check_login_status</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="string">'''主页'''</span></span><br><span class="line">    .......</span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">'index.html'</span>)</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>Django验证码模块django-simple-captcha详解</title>
    <url>/2019/04/21/Django%E9%AA%8C%E8%AF%81%E7%A0%81%E6%A8%A1%E5%9D%97django-simple-captcha%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<p>在Django中经常会使用到验证码功能,django-simple-captcha可以快速生成一个验证码!<br><a id="more"></a></p>
]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>设置input中placeholder的字体样式</title>
    <url>/2019/04/20/%E8%AE%BE%E7%BD%AEinput%E4%B8%ADplaceholder%E7%9A%84%E5%AD%97%E4%BD%93%E6%A0%B7%E5%BC%8F/</url>
    <content><![CDATA[<p>项目中遇到需要修改input的placeholder样式<br><a id="more"></a></p>
<h4 id="注："><a href="#注：" class="headerlink" title="注："></a>注：</h4><p>placeholder属性是css3中新增加的属性，IE9和Opera12以下版本的CSS选择器均不支持占位文本。</p>
<h4 id="设置placeholder样式"><a href="#设置placeholder样式" class="headerlink" title="设置placeholder样式"></a>设置placeholder样式</h4><h6 id="方式1"><a href="#方式1" class="headerlink" title="方式1"></a>方式1</h6><p>每个浏览器的CSS选择器都有所差异，所以针对每个浏览器都需要单独的设定(可以在冒号前面写input和textarea)。<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSS"><figure class="iseeu highlight /css"><table><tr><td class="code"><pre><span class="line"><span class="selector-pseudo">::-webkit-input-placeholder</span> &#123; <span class="comment">/* WebKit browsers */</span></span><br><span class="line">　　<span class="attribute">color</span>:<span class="number">#999</span>;<span class="attribute">font-size</span>:<span class="number">16px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-pseudo">:-moz-placeholder</span> &#123; <span class="comment">/* Mozilla Firefox 4 to 18 */</span></span><br><span class="line">　　<span class="attribute">color</span>:<span class="number">#999</span>;<span class="attribute">font-size</span>:<span class="number">16px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-pseudo">::-moz-placeholder</span> &#123; <span class="comment">/* Mozilla Firefox 19+ */</span></span><br><span class="line">　　<span class="attribute">color</span>:<span class="number">#999</span>;<span class="attribute">font-size</span>:<span class="number">16px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-pseudo">:-ms-input-placeholder</span> &#123; <span class="comment">/* Internet Explorer 10+ */</span></span><br><span class="line">　　<span class="attribute">color</span>:<span class="number">#999</span>;<span class="attribute">font-size</span>:<span class="number">16px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p>
<h6 id="方式2（推荐）"><a href="#方式2（推荐）" class="headerlink" title="方式2（推荐）"></a>方式2（推荐）</h6><p>在手机客户端webview 只使用－webkit内核方式即可。<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSS"><figure class="iseeu highlight /css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">::-webkit-input-placeholder</span>, <span class="selector-tag">textarea</span><span class="selector-pseudo">::-webkit-input-placeholder</span> &#123;</span><br><span class="line">　　<span class="attribute">color</span>: <span class="number">#666</span>;<span class="attribute">font-size</span>:<span class="number">16px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:-moz-placeholder</span>, <span class="selector-tag">textarea</span><span class="selector-pseudo">:-moz-placeholder</span> &#123;</span><br><span class="line">　　<span class="attribute">color</span>:<span class="number">#666</span>;<span class="attribute">font-size</span>:<span class="number">16px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">::-moz-placeholder</span>, <span class="selector-tag">textarea</span><span class="selector-pseudo">::-moz-placeholder</span> &#123;</span><br><span class="line">　　<span class="attribute">color</span>:<span class="number">#666</span>;<span class="attribute">font-size</span>:<span class="number">16px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:-ms-input-placeholder</span>, <span class="selector-tag">textarea</span><span class="selector-pseudo">:-ms-input-placeholder</span> &#123;</span><br><span class="line">　　<span class="attribute">color</span>:<span class="number">#666</span>;<span class="attribute">font-size</span>:<span class="number">16px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p>
<p><a href="https://www.cnblogs.com/overstackcoder/p/5522637.html" target="_blank" rel="noopener">参考链接</a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>js图片与base64互相转换</title>
    <url>/2019/04/20/js%E5%9B%BE%E7%89%87%E4%B8%8Ebase64%E4%BA%92%E7%9B%B8%E8%BD%AC%E6%8D%A2/</url>
    <content><![CDATA[<p>Django使用pillow模块，将生成的二维码图片转换为base64输出给前端，显示成弹框，需要js将base64转换成图片。<br><a id="more"></a></p>
<h4 id="js将图片转化为base64"><a href="#js将图片转化为base64" class="headerlink" title="js将图片转化为base64"></a>js将图片转化为base64</h4><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> img = <span class="string">"imgurl"</span>;<span class="comment">//imgurl 就是你的图片路径  </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getBase64Image</span>(<span class="params">img</span>) </span>&#123;  </span><br><span class="line">     <span class="keyword">var</span> canvas = <span class="built_in">document</span>.createElement(<span class="string">"canvas"</span>);  </span><br><span class="line">     canvas.width = img.width;  </span><br><span class="line">     canvas.height = img.height;  </span><br><span class="line">     <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">"2d"</span>);  </span><br><span class="line">     ctx.drawImage(img, <span class="number">0</span>, <span class="number">0</span>, img.width, img.height);  </span><br><span class="line">     <span class="keyword">var</span> ext = img.src.substring(img.src.lastIndexOf(<span class="string">"."</span>)+<span class="number">1</span>).toLowerCase();  </span><br><span class="line">     <span class="keyword">var</span> dataURL = canvas.toDataURL(<span class="string">"image/"</span>+ext);  </span><br><span class="line">     <span class="keyword">return</span> dataURL;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> image = <span class="keyword">new</span> Image();  </span><br><span class="line">image.src = img;  </span><br><span class="line">image.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line">  <span class="keyword">var</span> base64 = getBase64Image(image);  </span><br><span class="line">  <span class="built_in">console</span>.log(base64);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h4 id="js将base64转化为图片格式"><a href="#js将base64转化为图片格式" class="headerlink" title="js将base64转化为图片格式"></a>js将base64转化为图片格式</h4><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'img'</span>).setAttribute( <span class="string">'src'</span>, <span class="string">'data:image/png;base64,'</span> +imgurl);</span><br></pre></td></tr></table></figure></div>
<p><a href="https://www.cnblogs.com/zhuchenglin/p/7528723.html" target="_blank" rel="noopener">参考链接</a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>css点击旋转动画</title>
    <url>/2019/04/22/css%E7%82%B9%E5%87%BB%E6%97%8B%E8%BD%AC%E5%8A%A8%E7%94%BB/</url>
    <content><![CDATA[<p>验证码点击刷新按钮时,按钮会出现一个旋转效果,写一个简单的例子!<br><a id="more"></a></p>
<h4 id="自动旋转"><a href="#自动旋转" class="headerlink" title="自动旋转"></a>自动旋转</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;html lang="zh-CN"&gt;</span><br><span class="line">&lt;<span class="selector-tag">head</span>&gt;</span><br><span class="line">    &lt;meta charset="utf-8"&gt;</span><br><span class="line">    &lt;title&gt;css点击旋转动画&lt;/title&gt;</span><br><span class="line">    &lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">        //css代码</span><br><span class="line">        <span class="selector-class">.header</span>&#123;</span><br><span class="line">            <span class="attribute">-webkit-animation</span>:rotateImg <span class="number">1s</span> linear infinite;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">80px</span> ;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">80px</span>;</span><br><span class="line">            <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">            <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @<span class="keyword">keyframes</span> rotateImg &#123;</span><br><span class="line">          0% &#123;<span class="attribute">transform </span>: <span class="built_in">rotate</span>(0deg);&#125;</span><br><span class="line">          100% &#123;<span class="attribute">transform </span>: <span class="built_in">rotate</span>(360deg);&#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @-<span class="keyword">webkit</span>-<span class="keyword">keyframes</span> rotateImg &#123;</span><br><span class="line">            0%&#123;<span class="attribute">-webkit-transform </span>: <span class="built_in">rotate</span>(0deg);&#125;</span><br><span class="line">          100%&#123;<span class="attribute">-webkit-transform </span>: <span class="built_in">rotate</span>(360deg);&#125;</span><br><span class="line">        &#125;</span><br><span class="line">     &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">	//html代码</span><br><span class="line">	&lt;img class="header" src="me.png"&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<h4 id="点击input旋转"><a href="#点击input旋转" class="headerlink" title="点击input旋转"></a>点击input旋转</h4><p>限制: 必须用input元素，只有input元素的:focus才有效<br><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;html lang="zh-CN"&gt;</span><br><span class="line">&lt;<span class="selector-tag">head</span>&gt;</span><br><span class="line">    &lt;meta charset="utf-8"&gt;</span><br><span class="line">    &lt;title&gt;css点击旋转动画&lt;/title&gt;</span><br><span class="line">    &lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">        <span class="selector-tag">input</span>&#123;</span><br><span class="line">            <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#dedede</span>;</span><br><span class="line">            <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">            <span class="attribute">padding</span>: <span class="number">5px</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-tag">input</span><span class="selector-pseudo">:focus</span>&#123;</span><br><span class="line">            <span class="attribute">outline</span>: none;</span><br><span class="line">            <span class="attribute">animation</span>: rotatefresh <span class="number">1s</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-tag">input</span><span class="selector-pseudo">:active</span>&#123;</span><br><span class="line">            <span class="comment">/* 加上这个才可以连续点击 */</span></span><br><span class="line">            <span class="attribute">animation</span>: none;  </span><br><span class="line">            <span class="attribute">background</span>: <span class="string">'#eee'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        @<span class="keyword">keyframes</span> rotatefresh &#123;</span><br><span class="line">            <span class="selector-tag">from</span> &#123; <span class="attribute">transform</span>: <span class="built_in">rotate</span>(0deg) &#125;</span><br><span class="line">            <span class="selector-tag">to</span> &#123;</span><br><span class="line">                <span class="attribute">transform</span>: <span class="built_in">rotate</span>(360deg);</span><br><span class="line">                <span class="attribute">transition</span>: all <span class="number">0.6s</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">    &lt;input type="button" value="点击旋转"&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p>
<h4 id="点击div旋转"><a href="#点击div旋转" class="headerlink" title="点击div旋转"></a>点击div旋转</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;html lang="zh-CN"&gt;</span><br><span class="line">&lt;<span class="selector-tag">head</span>&gt;</span><br><span class="line">    &lt;meta charset="utf-8"&gt;</span><br><span class="line">    &lt;title&gt;css点击旋转动画&lt;/title&gt;</span><br><span class="line">    &lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">        <span class="selector-tag">input</span>&#123;</span><br><span class="line">            <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#dedede</span>;</span><br><span class="line">            <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">            <span class="attribute">padding</span>: <span class="number">5px</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-tag">input</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">            <span class="attribute">outline</span>: none;</span><br><span class="line">            <span class="attribute">animation</span>: rotatefresh <span class="number">1s</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-tag">input</span><span class="selector-pseudo">:active</span>&#123;</span><br><span class="line">            <span class="comment">/* 加上这个才可以连续点击 */</span></span><br><span class="line">            <span class="attribute">animation</span>: none;  </span><br><span class="line">            <span class="attribute">background</span>: <span class="string">'#eee'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        @<span class="keyword">keyframes</span> rotatefresh &#123;</span><br><span class="line">            <span class="selector-tag">from</span> &#123; <span class="attribute">transform</span>: <span class="built_in">rotate</span>(0deg) &#125;</span><br><span class="line">            <span class="selector-tag">to</span> &#123;</span><br><span class="line">                <span class="attribute">transform</span>: <span class="built_in">rotate</span>(360deg);</span><br><span class="line">                <span class="attribute">transition</span>: all <span class="number">0.6s</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">    &lt;input type="button" value="点击旋转"&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<h4 id="补充"><a href="#补充" class="headerlink" title="补充:"></a>补充:</h4><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">未访问时的状态（鼠标点击前显示的状态）</span><br><span class="line">a:link&#123;color:#fff&#125;  </span><br><span class="line"> /*鼠标悬停时的状态*/</span><br><span class="line">  a:hover&#123;color:#fff&#125;  </span><br><span class="line">/*已访问过的状态（鼠标点击后的状态）*/</span><br><span class="line">  a:visited&#123;color:#fff&#125;  </span><br><span class="line">/*鼠标点击时的状态*/</span><br><span class="line">  a:active&#123;color:#fff&#125;  </span><br><span class="line">/* 点击后鼠标移开保持鼠标点击时的状态（只有在&lt;a href=&quot;#&quot;&gt;&lt;/a&gt;时标签中有效）*/</span><br><span class="line">  a:focus&#123;color:#fff&#125;</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>padding属性</title>
    <url>/2019/04/25/padding%E5%B1%9E%E6%80%A7/</url>
    <content><![CDATA[<p>padding和margin是常用的属性<br><a id="more"></a></p>
<h4 id="定义和用法"><a href="#定义和用法" class="headerlink" title="定义和用法"></a>定义和用法</h4><p>padding设置所有内边距属性。</p>
<h6 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h6><p>这个简写属性设置元素所有内边距的宽度，或者设置各边上内边距的宽度。行内非替换元素上设置的内边距不会影响行高计算；因此，如果一个元素既有内边距又有背景，从视觉上看可能会延伸到其他行，有可能还会与其他内容重叠。元素的背景会延伸穿过内边距。不允许指定负边距值。</p>
<h6 id="注：不允许使用负值。"><a href="#注：不允许使用负值。" class="headerlink" title="注：不允许使用负值。"></a>注：不允许使用负值。</h6><h4 id="例："><a href="#例：" class="headerlink" title="例："></a>例：</h4><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSS"><figure class="iseeu highlight /css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">padding</span>:上内边距 右内边距 下内边距 左内边距;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">padding</span>:上内边距 右内边距和左内边距 下内边距;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">padding</span>:上内边距和下内边距 右内边距和左内边距;</span><br></pre></td></tr></table></figure></div>
<table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>默认值：</td>
<td>0</td>
</tr>
<tr>
<td>继承性：</td>
<td>no</td>
</tr>
<tr>
<td>版本：</td>
<td>CSS1</td>
</tr>
<tr>
<td>JavaScript 语法：</td>
<td>object.style.padding=”10px 5px”</td>
</tr>
</tbody>
</table>
<h5 id="可能的值可能的值"><a href="#可能的值可能的值" class="headerlink" title="可能的值可能的值"></a>可能的值可能的值</h5><table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>auto</td>
<td>浏览器计算内边距。</td>
</tr>
<tr>
<td>length</td>
<td>规定以具体单位计的内边距值，比如像素、厘米等。默认值是 0px。</td>
</tr>
<tr>
<td>%</td>
<td>规定基于父元素的宽度的百分比的内边距。</td>
</tr>
<tr>
<td>inherit</td>
<td>规定应该从父元素继承内边距。</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>margin属性</title>
    <url>/2019/04/24/margin%E5%B1%9E%E6%80%A7/</url>
    <content><![CDATA[<p>margin是css中常用的属性，简单记录一下margin的基本使用。<br><a id="more"></a></p>
<h4 id="margin定义"><a href="#margin定义" class="headerlink" title="margin定义"></a>margin定义</h4><p>设置一个元素所有外边距的宽度，或者设置各边上外边距的宽度。<br>块级元素的垂直相邻外边距会合并，而行内元素实际上不占上下外边距。<br>行内元素的的左右外边距不会合并。同样地，浮动元素的外边距也不会合并。<br>允许指定负的外边距值，不过使用时要小心。</p>
<h5 id="注：允许使用负值。"><a href="#注：允许使用负值。" class="headerlink" title="注：允许使用负值。"></a>注：允许使用负值。</h5><p>例子：<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSS"><figure class="iseeu highlight /css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">margin</span>: 上外边距 右外边距 下外边距 左外边距;</span><br><span class="line"><span class="selector-tag">margin</span>: 上外边距 右外边距和左外边距 下外边距;</span><br><span class="line"><span class="selector-tag">margin</span>: 上外边距和下外边距 右外边距和左外边距;</span><br><span class="line"><span class="selector-tag">margin</span>: 四个外边距;</span><br></pre></td></tr></table></figure></div></p>
<h5 id="其他介绍"><a href="#其他介绍" class="headerlink" title="其他介绍"></a>其他介绍</h5><table>
<thead>
<tr>
<th>标题1</th>
<th>标题2</th>
</tr>
</thead>
<tbody>
<tr>
<td>默认值</td>
<td>0</td>
</tr>
<tr>
<td>继承性</td>
<td>no</td>
</tr>
<tr>
<td>版本</td>
<td>CSS1</td>
</tr>
<tr>
<td>JavaScript语法</td>
<td>object.style.margin=”10px 5px”</td>
</tr>
</tbody>
</table>
<h5 id="可选值"><a href="#可选值" class="headerlink" title="可选值"></a>可选值</h5><table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>auto</td>
<td>浏览器计算外边距。</td>
</tr>
<tr>
<td>length</td>
<td>规定以具体单位计的外边距值，比如像素、厘米等。默认值是 0px。</td>
</tr>
<tr>
<td>%</td>
<td>规定基于父元素的宽度的百分比的外边距。</td>
</tr>
<tr>
<td>inherit</td>
<td>规定应该从父元素继承外边距。</td>
</tr>
</tbody>
</table>
<p><a href="http://www.w3school.com.cn/css/pr_margin.asp" target="_blank" rel="noopener">参考链接</a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript中atob/btoa</title>
    <url>/2019/05/01/Javascript%E4%B8%ADatob-btoa/</url>
    <content><![CDATA[<p>由于网络通讯协议的限制,必须对原数据进行编码后，才能进行发送。<br><a id="more"></a><br>WindowOrWorkerGlobalScope.btoa()  从 String 对象中创建一个 base-64 编码的 ASCII 字符串，其中字符串中的每个字符都被视为一个二进制数据字节。</p>
<h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> encodedData = <span class="built_in">window</span>.btoa(stringToEncode);</span><br></pre></td></tr></table></figure></div>
<h6 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h6><p>stringToEncode<br>    一个字符串, 其字符分别表示要编码为 ASCII 的二进制数据的单个字节。</p>
<h6 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h6><pre><code>一个包含 stringToEncode 的 Base64 表示的字符串。
</code></pre><h6 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h6><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> encodedData = <span class="built_in">window</span>.btoa(<span class="string">"Hello, world"</span>); <span class="comment">// base64 编码</span></span><br><span class="line"><span class="keyword">let</span> decodedData = <span class="built_in">window</span>.atob(encodedData); <span class="comment">// 解码 成 ASCII</span></span><br></pre></td></tr></table></figure></div>
<h4 id="Unicode-字符串"><a href="#Unicode-字符串" class="headerlink" title="Unicode 字符串"></a>Unicode 字符串</h4><p>在多数浏览器中，使用btoa() 对Unicode字符串进行编码都会触发InvalidCharacterError异常。</p>
<p>一种选择是转义任何扩展字符，以便实际编码的字符串是原始字符的ASCII表示形式。考虑这个例子，代码来自Johan Sundström：<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ucs-2 string to base64 encoded ascii</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">utoa</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">window</span>.btoa(<span class="built_in">unescape</span>(<span class="built_in">encodeURIComponent</span>(str)));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// base64 encoded ascii to ucs-2 string</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">atou</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">decodeURIComponent</span>(<span class="built_in">escape</span>(<span class="built_in">window</span>.atob(str)));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Usage:</span></span><br><span class="line">utoa(<span class="string">'✓ à la mode'</span>); <span class="comment">// 4pyTIMOgIGxhIG1vZGU=</span></span><br><span class="line">atou(<span class="string">'4pyTIMOgIGxhIG1vZGU='</span>); <span class="comment">// "✓ à la mode"</span></span><br><span class="line"></span><br><span class="line">utoa(<span class="string">'I \u2661 Unicode!'</span>); <span class="comment">// SSDimaEgVW5pY29kZSE=</span></span><br><span class="line">atou(<span class="string">'SSDimaEgVW5pY29kZSE='</span>); <span class="comment">// "I ♡ Unicode!"</span></span><br></pre></td></tr></table></figure></div></p>
<p>更好，更可靠，更廉价的解决方案是使用类型化数组进行转换。</p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/WindowBase64/btoa" target="_blank" rel="noopener">参考链接</a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序文本自动换行</title>
    <url>/2019/04/29/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%96%87%E6%9C%AC%E8%87%AA%E5%8A%A8%E6%8D%A2%E8%A1%8C/</url>
    <content><![CDATA[<p>在微信小程序中，使用那个<br>无法进行换行。<br><a id="more"></a></p>
<h5 id="微信小程序换行"><a href="#微信小程序换行" class="headerlink" title="微信小程序换行"></a>微信小程序换行</h5><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line">position: absolute;</span><br><span class="line">text-overflow:ellipsis;</span><br><span class="line">word-wrap:<span class="keyword">break</span>-word;</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>小程序</category>
      </categories>
      <tags>
        <tag>小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序swiper获得当前页面的index</title>
    <url>/2019/05/04/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8Fswiper%E8%8E%B7%E5%BE%97%E5%BD%93%E5%89%8D%E9%A1%B5%E9%9D%A2%E7%9A%84index/</url>
    <content><![CDATA[<p>小程序很多时候需要获取swiper当前页面的index，用于触发其他事件<br><a id="more"></a></p>
<h3 id="swiper官方文档"><a href="#swiper官方文档" class="headerlink" title="swiper官方文档"></a>swiper官方文档</h3><table>
<thead>
<tr>
<th>属性</th>
<th>类型</th>
<th>默认值</th>
<th>必填</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>indicator-dots</td>
<td>boolean</td>
<td>false</td>
<td>否</td>
<td style="text-align:left">是否显示面板指示点</td>
</tr>
<tr>
<td>indicator-color</td>
<td>color</td>
<td>rgba(0, 0, 0, .3)</td>
<td>否</td>
<td style="text-align:left">指示点颜色</td>
</tr>
<tr>
<td>indicator-active-color</td>
<td>color</td>
<td>#000000</td>
<td>否</td>
<td style="text-align:left">当前选中的指示点颜色</td>
</tr>
<tr>
<td>autoplay</td>
<td>boolean</td>
<td>false</td>
<td>否</td>
<td style="text-align:left">是否自动切换</td>
</tr>
<tr>
<td>current</td>
<td>number</td>
<td>0</td>
<td>否</td>
<td style="text-align:left"><strong>当前所在滑块的index</strong></td>
</tr>
<tr>
<td>interval</td>
<td>number</td>
<td>5000</td>
<td>否</td>
<td style="text-align:left">自动切换时间间隔</td>
</tr>
<tr>
<td>duration</td>
<td>number</td>
<td>500</td>
<td>否</td>
<td style="text-align:left">滑动动画时长</td>
</tr>
<tr>
<td>circular</td>
<td>boolean</td>
<td>false</td>
<td>否</td>
<td style="text-align:left">是否采用衔接滑动</td>
</tr>
<tr>
<td>vertical</td>
<td>boolean</td>
<td>false</td>
<td>否</td>
<td style="text-align:left">滑动方向是否为纵向</td>
</tr>
<tr>
<td>previous-margin</td>
<td>string</td>
<td>“0px”</td>
<td>否</td>
<td style="text-align:left">前边距，可用于露出前一项的一小部分，接受 px 和 rpx 值</td>
</tr>
<tr>
<td>next-margin</td>
<td>string</td>
<td>“0px”</td>
<td>否</td>
<td style="text-align:left">后边距，可用于露出后一项的一小部分，接受 px 和 rpx 值</td>
</tr>
<tr>
<td>display-multiple-items</td>
<td>number</td>
<td>1</td>
<td>否</td>
<td style="text-align:left">同时显示的滑块数量</td>
</tr>
<tr>
<td>skip-hidden-item-layout</td>
<td>boolean</td>
<td>false</td>
<td>否</td>
<td style="text-align:left">是否跳过未显示的滑块布局，设为 true 可优化复杂情况下的滑动性能，但会丢失隐藏状态滑块的布局信息</td>
</tr>
<tr>
<td>easing-function</td>
<td>string</td>
<td>“default”</td>
<td>否</td>
<td style="text-align:left">指定 swiper 切换缓动动画类型</td>
</tr>
<tr>
<td>bindchange</td>
<td>eventhandle</td>
<td></td>
<td>否</td>
<td style="text-align:left"><strong>current 改变时会触发 change 事件，event.detail = {current, source}</strong></td>
</tr>
<tr>
<td>bindtransition</td>
<td>eventhandle</td>
<td></td>
<td>否</td>
<td style="text-align:left">swiper-item 的位置发生改变时会触发 transition 事件，event.detail = {dx: dx, dy: dy}</td>
</tr>
<tr>
<td>bindanimationfinish</td>
<td>eventhandle</td>
<td></td>
<td>否</td>
<td style="text-align:left">动画结束时会触发 animationfinish 事件，event.detail 同上</td>
</tr>
</tbody>
</table>
<p><a href="https://developers.weixin.qq.com/miniprogram/dev/component/swiper.html" target="_blank" rel="noopener">参考链接</a></p>
<p>代码：index.wxml</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&lt;swiper class=&apos;sw-tu&apos; circular=&quot;true&quot; current=&quot;0&quot; bindchange=&apos;onSlideChange&apos;&gt;</span><br><span class="line">    &lt;swiper-item class=&quot;sw-tuone&quot; wx:for=&quot;&#123;&#123;img_list&#125;&#125;&quot;&gt;</span><br><span class="line">        &lt;image class=&apos;sw-photo&apos; src=&quot;&#123;&#123;item&#125;&#125;&quot; /&gt;</span><br><span class="line">    &lt;/swiper-item&gt;</span><br><span class="line">&lt;/swiper&gt;</span><br></pre></td></tr></table></figure></div>
<p>代码：index.js<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">    index: <span class="number">1</span>,</span><br><span class="line">    img_list:[</span><br><span class="line">		<span class="string">'https://cn.bing.com/th?id=OHR.SkelligMichael_ZH-CN8635121409_1920x1080.jpg&amp;rf=LaDigue_1920x1080.jpg&amp;pid=hp'</span>,</span><br><span class="line">        <span class="string">'https://cn.bing.com/th?id=OHR.MargaretRiverVineyards_ZH-CN8547374435_1920x1080.jpg&amp;rf=LaDigue_1920x1080.jpg&amp;pid=hp'</span>,</span><br><span class="line">        <span class="string">'https://cn.bing.com/th?id=OHR.may1_ZH-CN8582006115_1920x1080.jpg&amp;rf=LaDigue_1920x1080.jpg&amp;pid=hp'</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  onSlideChange: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">      index: e.detail.current + <span class="number">1</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure></div></p>
]]></content>
      <categories>
        <category>小程序</category>
      </categories>
      <tags>
        <tag>小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>Python反转列表</title>
    <url>/2019/05/09/Python%E5%8F%8D%E8%BD%AC%E5%88%97%E8%A1%A8/</url>
    <content><![CDATA[<p>Python反转列表的几种方式!<br><a id="more"></a></p>
<h5 id="1-reversed"><a href="#1-reversed" class="headerlink" title="1.reversed()"></a>1.reversed()</h5><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line">li =[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]</span><br><span class="line">re_li = list(reversed(li))</span><br><span class="line"><span class="keyword">print</span> (re_li) <span class="comment"># [7, 6, 5, 4, 3, 2, 1]</span></span><br></pre></td></tr></table></figure></div>
<p>注：reversed()函数返回的是一个迭代器，而不是一个List，所以需要list函数转换一下</p>
<h5 id="1-reversed-1"><a href="#1-reversed-1" class="headerlink" title="1.reversed()"></a>1.reversed()</h5><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line">li = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]</span><br><span class="line">re_li = list(reversed(li))</span><br><span class="line">print(re_li) <span class="comment"># [7, 6, 5, 4, 3, 2, 1]</span></span><br></pre></td></tr></table></figure></div>
<h5 id="2-sorted"><a href="#2-sorted" class="headerlink" title="2.sorted()"></a>2.sorted()</h5><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line">sorted(iterable[, cmp[, key[, reverse]]])</span><br><span class="line">li = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>] </span><br><span class="line">re_li = sorted(a, reverse=<span class="literal">True</span>) </span><br><span class="line">print(re_li) <span class="comment"># [7, 6, 5, 4, 3, 2, 1]</span></span><br><span class="line"><span class="comment"># 注意：sorted()按降序排列，对于反转内容不是顺序排列的无效。</span></span><br></pre></td></tr></table></figure></div>
<p>参数说明：<br>    iterable – 可迭代对象。<br>    cmp – 比较的函数，这个具有两个参数，参数的值都是从可迭代对象中取出，此函数必须遵守的规则为，大于则返回1，小于则返回-1，等于则返回0。<br>    key – 主要是用来进行比较的元素，只有一个参数，具体的函数的参数就是取自于可迭代对象中，指定可迭代对象中的一个元素来进行排序。<br>    reverse – 排序规则，reverse = True 降序 ， reverse = False 升序（默认）。</p>
<h5 id="3-切片"><a href="#3-切片" class="headerlink" title="3.切片"></a>3.切片</h5><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line">li = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>] </span><br><span class="line">re_li = li[::<span class="number">-1</span>] </span><br><span class="line">print(re_li) <span class="comment"># [7, 6, 5, 4, 3, 2, 1]</span></span><br></pre></td></tr></table></figure></div>
<p>注：[::-1]表示从后向前取值，步值为1.</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>设置div背景颜色透明度，内部元素不透明</title>
    <url>/2019/04/23/%E8%AE%BE%E7%BD%AEdiv%E8%83%8C%E6%99%AF%E9%A2%9C%E8%89%B2%E9%80%8F%E6%98%8E%E5%BA%A6%EF%BC%8C%E5%86%85%E9%83%A8%E5%85%83%E7%B4%A0%E4%B8%8D%E9%80%8F%E6%98%8E/</url>
    <content><![CDATA[<p>设置背景透明度,但是元素无透明度!<br><a id="more"></a><br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSS"><figure class="iseeu highlight /css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.class</span>&#123; </span><br><span class="line">	<span class="comment">/* 最后一个参数设置透明度，前面三个是RGB颜色值 */</span></span><br><span class="line">	<span class="attribute">background-color</span>:<span class="built_in">rgba</span>(255,255,255,0.15)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSS"><figure class="iseeu highlight /css"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="selector-class">.class</span>&#123; </span><br><span class="line">	<span class="comment">/* 整个元素都会透明 */</span></span><br><span class="line">	<span class="attribute">opacity</span>:<span class="number">0.75</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>Python的format函数</title>
    <url>/2019/05/07/Python%E7%9A%84format%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<p>平时工作中我们经常会使用到format来格式化字符串<br><a id="more"></a><br>str.format()在Python2.6开始才新增了一种格式化字符串的函数,该方法加强了字符串格式化.<br>format 函数可以接受不限个参数，位置可以不按顺序。<br>1.不设置参数<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="string">'&#123;&#125; &#123;&#125;'</span>.format(<span class="string">"hello"</span>, <span class="string">"world"</span>)    <span class="comment"># 不设置指定位置，按默认顺序</span></span><br><span class="line"><span class="string">'hello world'</span></span><br><span class="line"></span><br><span class="line"><span class="string">'&#123;0&#125; &#123;1&#125;'</span>.format(<span class="string">"hello"</span>, <span class="string">"world"</span>)  <span class="comment"># 设置指定位置</span></span><br><span class="line"><span class="string">'hello world'</span></span><br><span class="line"></span><br><span class="line"><span class="string">'&#123;1&#125; &#123;0&#125; &#123;1&#125;'</span>.format(<span class="string">"hello"</span>, <span class="string">"world"</span>)  <span class="comment"># 设置指定位置</span></span><br><span class="line"><span class="string">'world hello world'</span></span><br></pre></td></tr></table></figure></div></p>
<p>2.设置参数<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line"><span class="string">'名字:&#123;name&#125;, 年龄:&#123;age&#125;'</span>.format(name=<span class="string">'张三'</span>, age=<span class="number">18</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 通过字典设置参数</span></span><br><span class="line">site = &#123;<span class="string">'name'</span>: <span class="string">'李四'</span>, <span class="string">'age'</span>: <span class="number">18</span>&#125;</span><br><span class="line"><span class="string">'姓名:&#123;name&#125;, 年龄:&#123;age&#125;'</span>.format(**site)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 通过列表索引设置参数</span></span><br><span class="line">li 数字格式化= [<span class="string">'王五'</span>, <span class="number">18</span>]</span><br><span class="line">print(<span class="string">"姓名:&#123;0[0]&#125;, 年龄:&#123;0[1]&#125;"</span>.format(li))  <span class="comment"># "0" 是必须的</span></span><br></pre></td></tr></table></figure></div></p>
<p>3.传入对象<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="comment">#!/usr/bin/python</span></span><br></pre></td></tr></table></figure></div></p>
<p>4.数字格式化</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<table>
<thead>
<tr>
<th style="text-align:left">数字</th>
<th style="text-align:left">格式</th>
<th style="text-align:left">输出</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">3.1415926</td>
<td style="text-align:left">{:.2f}</td>
<td style="text-align:left">3.14</td>
<td style="text-align:left">保留小数点后两位</td>
</tr>
<tr>
<td style="text-align:left">3.1415926</td>
<td style="text-align:left">{:+.2f}</td>
<td style="text-align:left">+3.14</td>
<td style="text-align:left">带符号保留小数点后两位</td>
</tr>
<tr>
<td style="text-align:left">-1</td>
<td style="text-align:left">{:+.2f}</td>
<td style="text-align:left">-1.00</td>
<td style="text-align:left">带符号保留小数点后两位</td>
</tr>
<tr>
<td style="text-align:left">2.71828</td>
<td style="text-align:left">{:.0f}</td>
<td style="text-align:left">3</td>
<td style="text-align:left">不带小数</td>
</tr>
<tr>
<td style="text-align:left">5</td>
<td style="text-align:left">{:0&gt;2d}</td>
<td style="text-align:left">05</td>
<td style="text-align:left">数字补零 (填充左边, 宽度为2)</td>
</tr>
<tr>
<td style="text-align:left">5</td>
<td style="text-align:left">{:x&lt;4d}</td>
<td style="text-align:left">5xxx</td>
<td style="text-align:left">数字补x (填充右边, 宽度为4)</td>
</tr>
<tr>
<td style="text-align:left">10</td>
<td style="text-align:left">{:x&lt;4d}</td>
<td style="text-align:left">10xx</td>
<td style="text-align:left">数字补x (填充右边, 宽度为4)</td>
</tr>
<tr>
<td style="text-align:left">1000000</td>
<td style="text-align:left">{:,}</td>
<td style="text-align:left">1,000,000</td>
<td style="text-align:left">以逗号分隔的数字格式</td>
</tr>
<tr>
<td style="text-align:left">0.25</td>
<td style="text-align:left">{:.2%}</td>
<td style="text-align:left">25.00%</td>
<td style="text-align:left">百分比格式</td>
</tr>
<tr>
<td style="text-align:left">1000000000</td>
<td style="text-align:left">{:.2e}</td>
<td style="text-align:left">1.00e+09</td>
<td style="text-align:left">指数记法</td>
</tr>
<tr>
<td style="text-align:left">13</td>
<td style="text-align:left">{:10d}</td>
<td style="text-align:left">13</td>
<td style="text-align:left">右对齐 (默认, 宽度为10)</td>
</tr>
<tr>
<td style="text-align:left">13</td>
<td style="text-align:left">{:&lt;10d}</td>
<td style="text-align:left">13</td>
<td style="text-align:left">左对齐 (宽度为10)</td>
</tr>
<tr>
<td style="text-align:left">13</td>
<td style="text-align:left">{:^10d}</td>
<td style="text-align:left">13</td>
<td style="text-align:left">中间对齐 (宽度为10)</td>
</tr>
<tr>
<td style="text-align:left">11</td>
<td style="text-align:left"><code>&#39;{:b}&#39;.format(11) &#39;{:d}&#39;.format(11) &#39;{:o}&#39;.format(11) &#39;{:x}&#39;.format(11) &#39;{:#x}&#39;.format(11) &#39;{:#X}&#39;.format(11)</code></td>
<td style="text-align:left"><code>1011 11 13 b 0xb 0XB</code></td>
<td style="text-align:left">进制</td>
</tr>
</tbody>
</table>
<p><strong>^</strong>, <strong>&lt;</strong>, <strong>&gt;</strong> 分别是居中、左对齐、右对齐，后面带宽度， <strong>:</strong> 号后面带填充的字符，只能是一个字符，不指定则默认是用空格填充。</p>
<p><strong>+</strong> 表示在正数前显示 <strong>+</strong>，负数前显示 <strong>-</strong>；  （空格）表示在正数前加空格</p>
<p>b、d、o、x 分别是二进制、十进制、八进制、十六进制。</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac下端口占用情况及处理方式</title>
    <url>/2019/05/14/Mac%E4%B8%8B%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8%E6%83%85%E5%86%B5%E5%8F%8A%E5%A4%84%E7%90%86%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<p>本地启动Web应用时会遇到过网络端口被其他程序占用的情况，需要进程先退出占用该端口，再重新启动WEB应用，通过“终端”结束占用特定端口的进程<br><a id="more"></a></p>
<h6 id="1、打开终端，使用如下命令："><a href="#1、打开终端，使用如下命令：" class="headerlink" title="1、打开终端，使用如下命令："></a>1、打开终端，使用如下命令：</h6><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">lsof -i :端口号</span><br></pre></td></tr></table></figure></div>
<p>查看端口号被哪个进程占用，获取该进程ID。</p>
<h6 id="2、然后在用命令-“kill-9-进程ID”，杀死进程，如："><a href="#2、然后在用命令-“kill-9-进程ID”，杀死进程，如：" class="headerlink" title="2、然后在用命令 “kill  -9 进程ID”，杀死进程，如："></a>2、然后在用命令 “kill  -9 进程ID”，杀死进程，如：</h6><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">kill</span> -9 PID</span><br></pre></td></tr></table></figure></div>
<p>这时候我们就能将占用该端口的应用程序关闭了。</p>
]]></content>
      <categories>
        <category>MAC</category>
      </categories>
      <tags>
        <tag>MAC</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac安装mysql</title>
    <url>/2019/05/18/Mac%E5%AE%89%E8%A3%85mysql/</url>
    <content><![CDATA[<p>Mac使用homebrew安装配置mysql<br><a id="more"></a></p>
<h3 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h3><h5 id="一、安装homebrew"><a href="#一、安装homebrew" class="headerlink" title="一、安装homebrew"></a>一、安装homebrew</h5><p>使用如下命令安装homebrew<br><figure class="highlight"><table><tr><td class="code"><pre><span class="line">/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"</span><br></pre></td></tr></table></figure></p>
<p>homebrew官网：  <a href="https://brew.sh/index_zh-cn.html" target="_blank" rel="noopener">https://brew.sh/index_zh-cn.html</a></p>
<h5 id="二、安装mysql"><a href="#二、安装mysql" class="headerlink" title="二、安装mysql"></a>二、安装mysql</h5><figure class="highlight"><table><tr><td class="code"><pre><span class="line">brew install mysql</span><br><span class="line"></span><br><span class="line">==&gt; Downloading https://homebrew.bintray.com/bottles/mysql-8.0.16.mojave.bottle.</span><br><span class="line">==&gt; Downloading from https://akamai.bintray.com/65/65e6629740ca75ceaae575b4cc68f</span><br><span class="line">######################################################################## 100.0%</span><br><span class="line">==&gt; Pouring mysql-8.0.16.mojave.bottle.tar.gz</span><br><span class="line">==&gt; /usr/local/Cellar/mysql/8.0.16/bin/mysqld --initialize-insecure --user=liuxi</span><br><span class="line">==&gt; Caveats</span><br><span class="line">We've installed your MySQL database without a root password. To secure it run:</span><br><span class="line">    mysql_secure_installation</span><br><span class="line"></span><br><span class="line">MySQL is configured to only allow connections from localhost by default</span><br><span class="line"></span><br><span class="line">To connect run:</span><br><span class="line">    mysql -uroot</span><br><span class="line"></span><br><span class="line">To have launchd start mysql now and restart at login:</span><br><span class="line">  brew services start mysql</span><br><span class="line">Or, if you don't want/need a background service you can just run:</span><br><span class="line">  mysql.server start</span><br><span class="line">==&gt; Summary</span><br><span class="line">🍺  /usr/local/Cellar/mysql/8.0.16: 275 files, 269.8MB</span><br><span class="line">==&gt; `brew cleanup` has not been run in 30 days, running now...</span><br></pre></td></tr></table></figure>
<h5 id="三、配置自启动"><a href="#三、配置自启动" class="headerlink" title="三、配置自启动"></a>三、配置自启动</h5><figure class="highlight"><table><tr><td class="code"><pre><span class="line">mkdir -p ~/Library/LaunchAgents</span><br><span class="line"></span><br><span class="line">ln -sfv /usr/local/opt/mysql/*.plist ~/Library/LaunchAgents</span><br><span class="line"></span><br><span class="line">find /usr/local/Cellar/mysql/ -name "homebrew.mxcl.mysql.plist" -exec cp &#123;&#125; ~/Library/LaunchAgents/ \;</span><br><span class="line"></span><br><span class="line">launchctl load -w ~/Library/LaunchAgents/homebrew.mxcl.mysql.plist</span><br></pre></td></tr></table></figure>
<h5 id="四、启动mysql服务"><a href="#四、启动mysql服务" class="headerlink" title="四、启动mysql服务"></a>四、启动mysql服务</h5><figure class="highlight"><table><tr><td class="code"><pre><span class="line">mysql.server start</span><br><span class="line"></span><br><span class="line">Starting MySQL</span><br><span class="line">. SUCCESS!</span><br></pre></td></tr></table></figure>
<h5 id="五、初始化mysql配置"><a href="#五、初始化mysql配置" class="headerlink" title="五、初始化mysql配置"></a>五、初始化mysql配置</h5><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="code"><pre><span class="line">mysql_secure_installation</span><br><span class="line"></span><br><span class="line">Securing the MySQL server deployment.</span><br><span class="line"></span><br><span class="line">Connecting to MySQL <span class="keyword">using</span> a blank password.</span><br><span class="line"></span><br><span class="line">VALIDATE PASSWORD COMPONENT can be used to test passwords</span><br><span class="line"><span class="keyword">and</span> improve security. It checks the strength of password</span><br><span class="line"><span class="keyword">and</span> allows the users to <span class="built_in">set</span> only those passwords which are</span><br><span class="line">secure enough. Would you like to setup VALIDATE PASSWORD component?</span><br><span class="line"></span><br><span class="line">Press y|Y <span class="keyword">for</span> Yes, any other key <span class="keyword">for</span> No: n <span class="comment">// 这个选yes的话密码长度就必须要设置为8位以上，但我只想要6位的</span></span><br><span class="line">Please <span class="built_in">set</span> the password <span class="keyword">for</span> root here.</span><br><span class="line"></span><br><span class="line">New password: <span class="comment">// 设置密码</span></span><br><span class="line"></span><br><span class="line">Re-enter <span class="keyword">new</span> password: <span class="comment">// 再一次确认密码</span></span><br><span class="line">By <span class="keyword">default</span>, a MySQL installation has an anonymous user,</span><br><span class="line">allowing anyone to <span class="built_in">log</span> into MySQL without having to have</span><br><span class="line">a user account created <span class="keyword">for</span> them. This is intended only <span class="keyword">for</span></span><br><span class="line">testing, <span class="keyword">and</span> to make the installation go a bit smoother.</span><br><span class="line">You should remove them before moving into a production</span><br><span class="line">environment.</span><br><span class="line"></span><br><span class="line">Remove anonymous users? (Press y|Y <span class="keyword">for</span> Yes, any other key <span class="keyword">for</span> No) : y <span class="comment">// 移除不用密码的那个账户</span></span><br><span class="line">Success.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Normally, root should only be allowed to connect from</span><br><span class="line">'localhost'. This ensures that someone cannot guess at</span><br><span class="line">the root password from the network.</span><br><span class="line"></span><br><span class="line">Disallow root login remotely? (Press y|Y <span class="keyword">for</span> Yes, any other key <span class="keyword">for</span> No) : n <span class="comment">//不接受root远程登录账号</span></span><br><span class="line"></span><br><span class="line"> ... skipping.</span><br><span class="line">By default, MySQL comes with a database named 'test' that</span><br><span class="line">anyone can access. This is also intended only <span class="keyword">for</span> testing,</span><br><span class="line"><span class="keyword">and</span> should be removed before moving into a production</span><br><span class="line">environment.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Remove test database <span class="keyword">and</span> access to it? (Press y|Y <span class="keyword">for</span> Yes, any other key <span class="keyword">for</span> No) : y  <span class="comment">//删除text数据库</span></span><br><span class="line"> - Dropping test database...</span><br><span class="line">Success.</span><br><span class="line"></span><br><span class="line"> - Removing privileges on test database...</span><br><span class="line">Success.参考链接</span><br><span class="line"></span><br><span class="line">Reloading the privilege tables will ensure that all changes</span><br><span class="line">made so far will take effect immediately.</span><br><span class="line"></span><br><span class="line">Reload privilege tables now? (Press y|Y <span class="keyword">for</span> Yes, any other key <span class="keyword">for</span> No) : y</span><br><span class="line">Success.</span><br><span class="line"></span><br><span class="line">All done!</span><br></pre></td></tr></table></figure></div>
<p><a href="https://www.cnblogs.com/walkerr/p/7289388.html" target="_blank" rel="noopener">参考链接</a></p>
<h2 id="命令行链接mysql"><a href="#命令行链接mysql" class="headerlink" title="命令行链接mysql"></a>命令行链接mysql</h2><h4 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h4><h6 id="标准启动方式"><a href="#标准启动方式" class="headerlink" title="标准启动方式"></a>标准启动方式</h6><figure class="highlight"><table><tr><td class="code"><pre><span class="line">mysql  -h  主机名(ip)  -u  用户名 -P 端口 -p </span><br><span class="line"></span><br><span class="line">说明:</span><br><span class="line"></span><br><span class="line">-h: 主机名，表示要连接的数据库的主机名或者IP</span><br><span class="line">-u: 用户名，表示连接数据库的用户名</span><br><span class="line">-P: 端口，表示要连接的数据库的端口，默认是3306，可以不写，但是如果端口不是默认端口，就必须指明端口号</span><br><span class="line">-p: 表示要连接的数据库的密码，-p后面可以直接输入密码，但是这样密码就会明文输入不太安全，所以建议输入-p回车，换行输入密码</span><br></pre></td></tr></table></figure>
<p><img src="https://github.com/bjlxb/image/blob/master/screenshot/%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/mysql%E5%B8%B8%E8%A7%84%E8%BF%9E%E6%8E%A5%E6%96%B9%E5%BC%8F.jpg?raw=true" alt="mysql标准启动方式截图"></p>
<h6 id="简洁启动方式："><a href="#简洁启动方式：" class="headerlink" title="简洁启动方式："></a>简洁启动方式：</h6><p>前提：<br>1.MySQL安装在本机<br>2.端口是默认端口3306<br><figure class="highlight"><table><tr><td class="code"><pre><span class="line">mysql -u  root -p</span><br></pre></td></tr></table></figure></p>
<p><img src="https://github.com/bjlxb/image/blob/master/screenshot/%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/mysql%E7%AE%80%E4%BE%BF%E8%BF%9E%E6%8E%A5%E6%96%B9%E5%BC%8F.jpg?raw=true" alt="mysql简洁启动方式截图"></p>
]]></content>
      <categories>
        <category>MAC</category>
      </categories>
      <tags>
        <tag>MAC</tag>
      </tags>
  </entry>
  <entry>
    <title>Python中获得前几天的日期</title>
    <url>/2019/05/05/python%E4%B8%AD%E8%8E%B7%E5%BE%97%E5%89%8D%E5%87%A0%E5%A4%A9%E7%9A%84%E6%97%A5%E6%9C%9F/</url>
    <content><![CDATA[<p>在Python项目中，我们需要获取未来几天或过去几天的日期，可以使用如下方式。<br><a id="more"></a></p>
<h5 id="获取过去几天的日期"><a href="#获取过去几天的日期" class="headerlink" title="获取过去几天的日期"></a>获取过去几天的日期</h5><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">now_time = datetime.datetime.now()</span><br><span class="line"><span class="keyword">print</span> now_time <span class="comment"># 2019-05-06 08:54:19.293762</span></span><br><span class="line">change_time = now_time + datetime.timedelta(days=<span class="number">-20</span>)</span><br><span class="line">change_time_format = change_time.strftime(<span class="string">'%Y-%m-%d'</span>)</span><br><span class="line"><span class="keyword">print</span> change_time_format <span class="comment"># 2019-04-16</span></span><br></pre></td></tr></table></figure></div>
<h5 id="获取未来几天的日期"><a href="#获取未来几天的日期" class="headerlink" title="获取未来几天的日期"></a>获取未来几天的日期</h5><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">now_time = datetime.datetime.now()</span><br><span class="line"><span class="keyword">print</span> now_time <span class="comment"># 2019-05-06 08:54:19.293762</span></span><br><span class="line">change_time = now_time + datetime.timedelta(days=<span class="number">20</span>)</span><br><span class="line">change_time_format = change_time.strftime(<span class="string">'%Y-%m-%d'</span>)</span><br><span class="line"><span class="keyword">print</span> change_time_format <span class="comment"># 2019-05-16</span></span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>ERROR：Public Key Retrieval is not allowed</title>
    <url>/2019/05/23/ERROR%EF%BC%9APublic%20Key%20Retrieval%20is%20not%20allowed/</url>
    <content><![CDATA[<p>Spring+Mybatis项目中连接Mysql数据库报错Public Key Retrieval is not allowed。<br><a id="more"></a><br>解决方案：<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line">在数据库链接中添加：</span><br><span class="line">jdbc.url = jdbc:mysql:<span class="comment">//127.0.0.1:3306/$&#123;jdbc.dbName&#125;?useUnicode=true&amp;useSSL=false</span></span><br><span class="line">&amp;allowPublicKeyRetrieval=<span class="keyword">true</span></span><br></pre></td></tr></table></figure></div></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac显示隐藏文件</title>
    <url>/2019/05/18/Mac%E6%98%BE%E7%A4%BA%E9%9A%90%E8%97%8F%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<p>mac文件夹中默认不显示隐藏文件，记录一下两种显示和隐藏文件的方法！<br><a id="more"></a></p>
<h5 id="1-命令行方式："><a href="#1-命令行方式：" class="headerlink" title="1.命令行方式："></a>1.命令行方式：</h5><figure class="highlight"><table><tr><td class="code"><pre><span class="line"># 显示隐藏文件：</span><br><span class="line">defaults write com.apple.Finder AppleShowAllFiles YES;KillAll Finder</span><br><span class="line"></span><br><span class="line"># 不显示隐藏文件：</span><br><span class="line">defaults write com.apple.Finder AppleShowAllFiles NO;KillAll Finder</span><br></pre></td></tr></table></figure>
<h5 id="2-快捷键方式："><a href="#2-快捷键方式：" class="headerlink" title="2.快捷键方式："></a>2.快捷键方式：</h5><p>command+shift+.<br>切换隐藏文件和不隐藏文件。</p>
]]></content>
      <categories>
        <category>MAC</category>
      </categories>
      <tags>
        <tag>MAC</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript获取时间戳</title>
    <url>/2019/06/29/JavaScript%E8%8E%B7%E5%8F%96%E6%97%B6%E9%97%B4%E6%88%B3/</url>
    <content><![CDATA[<p>Javascript三种获取时间戳方式。<br><a id="more"></a></p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Date</span>.now();</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line"></span><br><span class="line">+<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>vi清空内容命令</title>
    <url>/2019/09/19/vi%E6%B8%85%E7%A9%BA%E5%86%85%E5%AE%B9%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p>vi中清空所有内容的5种方式</p>
<a id="more"></a>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">1.跳到第一行，删到最后一行：</span><br><span class="line"></span><br><span class="line">	gg 或者 1G 跳到第一行；</span><br><span class="line"></span><br><span class="line">	然后 dG 删到最后一行</span><br><span class="line"></span><br><span class="line">2.跳到最后一行，删到第一行：</span><br><span class="line"></span><br><span class="line">	G 跳到最后一行；</span><br><span class="line"></span><br><span class="line">	然后 dgg 或者 d1G 删到第一行；</span><br><span class="line"></span><br><span class="line">3.在命令行模式指定范围并用d删除：</span><br><span class="line"></span><br><span class="line">	执行 :1,$d 回车；</span><br><span class="line"></span><br><span class="line">	或者更简单的，执行 :%d 回车</span><br><span class="line"></span><br><span class="line">4.可视模式选择全文，然后删除：</span><br><span class="line"></span><br><span class="line">	gg 跳到第一行，或者 G跳到最后一行；</span><br><span class="line"></span><br><span class="line">	进入行编辑模式，然后 G 选到最后一行，或者 gg 选到第一行；</span><br><span class="line"></span><br><span class="line">	按下 d 删除即可</span><br><span class="line">5. 在命令行模式指定范围并用搜索替换为空：</span><br><span class="line"></span><br><span class="line">	执行 :%s/.*\n//g</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>Tool</category>
      </categories>
      <tags>
        <tag>Tool</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos系统中使用Tomcat部署WEB项目</title>
    <url>/2019/06/10/Centos%E7%B3%BB%E7%BB%9F%E4%B8%AD%E4%BD%BF%E7%94%A8Tomcat%E9%83%A8%E7%BD%B2WEB%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<a id="more"></a>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>Tool</category>
      </categories>
      <tags>
        <tag>Tool</tag>
      </tags>
  </entry>
  <entry>
    <title>shell基础0</title>
    <url>/2019/10/01/shell%E5%9F%BA%E7%A1%800/</url>
    <content><![CDATA[<p>记录shell输入输出和变量相关内容</p>
<a id="more"></a>
<h3 id="Shell基础"><a href="#Shell基础" class="headerlink" title="Shell基础"></a>Shell基础</h3><h5 id="第一个shell程序："><a href="#第一个shell程序：" class="headerlink" title="第一个shell程序："></a>第一个shell程序：</h5><p>新建文件，以sh为后缀名，扩展名不影响脚本执行，见名知意。<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># "#!" 是一个约定的标记，它告诉系统这个脚本需要什么解释器来执行，即使用哪一种Shell。</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Hello World!"</span></span><br><span class="line"><span class="comment"># echo命令用于向窗口输出文本。</span></span><br></pre></td></tr></table></figure></div></p>
<h5 id="执行脚本："><a href="#执行脚本：" class="headerlink" title="执行脚本："></a>执行脚本：</h5><ul>
<li>第一种方式：<br>1.cd到脚本目录<br>2.chmod +x ./脚本名称.sh  #使脚本具有执行权限<br>3../脚本名称.sh  #执行脚本<h6 id="注意，一定要写成”-脚本名称-sh”，而不是直接写”脚本名称-sh”"><a href="#注意，一定要写成”-脚本名称-sh”，而不是直接写”脚本名称-sh”" class="headerlink" title="注意，一定要写成”./脚本名称.sh”，而不是直接写”脚本名称.sh”"></a>注意，一定要写成”./脚本名称.sh”，而不是直接写”脚本名称.sh”</h6></li>
<li>第二种方式：<br>  sh “脚本名称.sh”</li>
</ul>
<hr>
<h5 id="shell脚本获取输入"><a href="#shell脚本获取输入" class="headerlink" title="shell脚本获取输入"></a>shell脚本获取输入</h5><p>在终端中获取输入信息：<strong>read</strong><br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"请输入名称:"</span></span><br><span class="line"><span class="built_in">read</span> name</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"您输入的名称为:<span class="variable">$name</span>"</span></span><br></pre></td></tr></table></figure></div></p>
<p>结果：<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">请输入名称:</span><br><span class="line">张三</span><br><span class="line">您输入的名称为:张三</span><br></pre></td></tr></table></figure></div></p>
<p>read带提示信息：<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">"请输入名称:"</span> name</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"您输入的名称为:<span class="variable">$name</span>"</span></span><br></pre></td></tr></table></figure></div></p>
<p>结果：<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">请输入名称:张三</span><br><span class="line">您输入的名称为:张三</span><br></pre></td></tr></table></figure></div></p>
<hr>
<h5 id="shell变量"><a href="#shell变量" class="headerlink" title="shell变量"></a>shell变量</h5><h6 id="定义变量"><a href="#定义变量" class="headerlink" title="定义变量"></a>定义变量</h6><p>Shell 支持以下三种定义变量的方式：<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">name=zhangsan</span><br><span class="line">name=<span class="string">'zhangsan'</span></span><br><span class="line">name=<span class="string">"zhangsan"</span></span><br></pre></td></tr></table></figure></div></p>
<p>name是变量名，zhangsan是赋值给变量的值。<br>若值不包含空白符（例如空格、Tab缩进等），那么可以不使用引号。<br>若值包含空白符，那么就必须使用引号包围起来。</p>
<blockquote>
<p>注：赋值号的周围不能有空格</p>
</blockquote>
<p>Shell 变量的命名规范</p>
<ul>
<li>变量名由数字、字母、下划线组成。</li>
<li>必须以字母或者下划线开头。</li>
<li>不能使用 Shell 里的关键字（通过 help 命令可以查看保留关键字）。<h6 id="使用变量"><a href="#使用变量" class="headerlink" title="使用变量"></a>使用变量</h6>使用变量，在变量名前面加美元符号$。<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">name=<span class="string">"张三"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$name</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;name&#125;</span></span><br><span class="line"><span class="comment"># 变量名外面的花括号&#123;&#125;为可选，花括号是为了帮助解释器识别变量的边界。</span></span><br><span class="line">language=<span class="string">"Java"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"I like <span class="variable">$&#123;language&#125;</span>Script"</span></span><br><span class="line"><span class="comment"># 若不加&#123;&#125;输出为"I like ",并不是我们期望的结果。</span></span><br></pre></td></tr></table></figure></div>
</li>
</ul>
<blockquote>
<p>注：推荐给所有变量加上花括号{ }。</p>
</blockquote>
<h6 id="修改变量的值"><a href="#修改变量的值" class="headerlink" title="修改变量的值"></a>修改变量的值</h6><p>对已经定义的变量重新赋值：<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">name=<span class="string">"张三"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;name&#125;</span></span><br><span class="line">name=<span class="string">"李四"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;name&#125;</span></span><br></pre></td></tr></table></figure></div></p>
<blockquote>
<p>注：只有使用时变量前需要加$，修改时不需要。</p>
</blockquote>
<h6 id="单引号和双引号的区别"><a href="#单引号和双引号的区别" class="headerlink" title="单引号和双引号的区别"></a>单引号和双引号的区别</h6><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">name=<span class="string">"张三"</span></span><br><span class="line">my_name=<span class="string">'我的名字是：$&#123;name&#125;'</span></span><br><span class="line">my_name2=<span class="string">"我的名字是：<span class="variable">$&#123;name&#125;</span>"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$my_name</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$my_name2</span></span><br></pre></td></tr></table></figure></div>
<p>输出结果：<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">我的名字是：<span class="variable">$&#123;name&#125;</span></span><br><span class="line">我的名字是：张三</span><br></pre></td></tr></table></figure></div></p>
<blockquote>
<p>单引号’’包围变量的值时，单引号里有什么输出什么，变量和命令（命令需要反引起来）也会原样输出。<br>单引号适合定义显示纯字符串的情况，即不希望解析变量、命令等的场景。<br>双引号””包围变量的值时，会先解析里面的变量和命令，而不是把双引号中的变量名和命令原样输出。<br>双引号适合有变量和命令并且想将其解析后再输出的变量。</p>
</blockquote>
<h6 id="将命令的结果赋值给变量"><a href="#将命令的结果赋值给变量" class="headerlink" title="将命令的结果赋值给变量"></a>将命令的结果赋值给变量</h6><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">name=<span class="string">"张三"</span></span><br><span class="line"><span class="comment"># 方式一</span></span><br><span class="line">variable=`name`</span><br><span class="line"><span class="comment"># 方式二</span></span><br><span class="line">variable=$(name)</span><br></pre></td></tr></table></figure></div>
<blockquote>
<p>方式一把命令用反引号包围起来，反引号和单引号非常相似，容易产生混淆，所以不推荐使用这种方式。<br>方式二用$()包围起来，区分明显，推荐使用这种方式。</p>
</blockquote>
<h6 id="只读变量"><a href="#只读变量" class="headerlink" title="只读变量"></a>只读变量</h6><p>使用 readonly 命令可以将变量定义为只读变量，只读变量的值不能被改变。<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">name=<span class="string">"张三"</span></span><br><span class="line"><span class="built_in">readonly</span> name</span><br><span class="line">myUrl=<span class="string">"李四"</span></span><br></pre></td></tr></table></figure></div></p>
<p>运行后报错：<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">NAME: This variable is <span class="built_in">read</span> only.</span><br></pre></td></tr></table></figure></div></p>
<h6 id="删除变量"><a href="#删除变量" class="headerlink" title="删除变量"></a>删除变量</h6><p>使用 unset 命令可以删除变量。<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">unset</span> name</span><br></pre></td></tr></table></figure></div></p>
<blockquote>
<p>变量被删除后不能再次使用。<br>unset 命令不能删除只读变量。</p>
</blockquote>
<h6 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h6><ol>
<li>局部变量<br>局部变量在脚本或命令中定义，仅在当前shell实例中有效，其他shell启动的程序不能访问局部变量。</li>
<li>环境变量<br>所有的程序，包括shell启动的程序，都能访问环境变量，有些程序需要环境变量来保证其正常运行。必要的时候shell脚本也可以定义环境变量。</li>
<li>shell变量<br>shell变量是由shell程序设置的特殊变量。shell变量中有一部分是环境变量，有一部分是局部变量，这些变量保证了shell的正常运行</li>
</ol>
]]></content>
      <categories>
        <category>Tool</category>
      </categories>
      <tags>
        <tag>Tool</tag>
      </tags>
  </entry>
  <entry>
    <title>shell基础1</title>
    <url>/2019/10/02/shell%E5%9F%BA%E7%A1%801/</url>
    <content><![CDATA[<p>未完成</p>
<a id="more"></a>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>Tool</category>
      </categories>
      <tags>
        <tag>Tool</tag>
      </tags>
  </entry>
  <entry>
    <title>linux基础0</title>
    <url>/2019/10/03/linux%E5%9F%BA%E7%A1%800/</url>
    <content><![CDATA[<p>linux命令行相关内容，主要包含目录结构，开关机，文件操作相关内容。<br><a id="more"></a></p>
<h2 id="Linux-系统目录结构"><a href="#Linux-系统目录结构" class="headerlink" title="Linux 系统目录结构"></a>Linux 系统目录结构</h2><ul>
<li><p><strong>/bin</strong>：<br>bin是Binary的缩写, 这个目录存放着最经常使用的命令。</p>
</li>
<li><p><strong>/boot：</strong><br>这里存放的是启动Linux时使用的一些核心文件，包括一些连接文件以及镜像文件。</p>
</li>
<li><p><strong>/dev ：</strong><br>dev是Device(设备)的缩写, 该目录下存放的是Linux的外部设备，在Linux中访问设备的方式和访问文件的方式是相同的。</p>
</li>
<li><p><strong>/etc：</strong><br>这个目录用来存放所有的系统管理所需要的配置文件和子目录。</p>
</li>
<li><p><strong>/home</strong>：<br>用户的主目录，在Linux中，每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的。</p>
</li>
<li><p><strong>/lib</strong>：<br>这个目录里存放着系统最基本的动态连接共享库，其作用类似于Windows里的DLL文件。几乎所有的应用程序都需要用到这些共享库。</p>
</li>
<li><p><strong>/lost+found</strong>：<br>这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件。</p>
</li>
<li><p><strong>/media</strong> ：</p>
<p>linux系统会自动识别一些设备，例如U盘、光驱等等，当识别后，linux会把识别的设备挂载到这个目录下。</p>
</li>
<li><p><strong>/mnt</strong>：<br>系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将光驱挂载在/mnt/上，然后进入该目录就可以查看光驱里的内容了。</p>
</li>
<li><p><strong>/opt</strong>：<br> 这是给主机额外安装软件所摆放的目录。比如你安装一个ORACLE数据库则就可以放到这个目录下。默认是空的。</p>
</li>
<li><p><strong>/proc</strong>：<br>这个目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息。<br>这个目录的内容不在硬盘上而是在内存里，我们也可以直接修改里面的某些文件，比如可以通过下面的命令来屏蔽主机的ping命令，使别人无法ping你的机器：</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">echo 1 &gt; /proc/sys/net/ipv4/icmp_echo_ignore_all</span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>/root</strong>：<br>该目录为系统管理员，也称作超级权限者的用户主目录。</p>
</li>
<li><p><strong>/sbin</strong>：<br>s就是Super User的意思，这里存放的是系统管理员使用的系统管理程序。</p>
</li>
<li><p><strong>/selinux</strong>：<br> 这个目录是Redhat/CentOS所特有的目录，Selinux是一个安全机制，类似于windows的防火墙，但是这套机制比较复杂，这个目录就是存放selinux相关的文件的。</p>
</li>
<li><p><strong>/srv</strong>：<br> 该目录存放一些服务启动之后需要提取的数据。</p>
</li>
<li><p><strong>/sys</strong>：<br> 这是linux2.6内核的一个很大的变化。该目录下安装了2.6内核中新出现的一个文件系统 sysfs 。</p>
<p>sysfs文件系统集成了下面3种文件系统的信息：针对进程信息的proc文件系统、针对设备的devfs文件系统以及针对伪终端的devpts文件系统。</p>
<p>该文件系统是内核设备树的一个直观反映。</p>
<p>当一个内核对象被创建的时候，对应的文件和目录也在内核对象子系统中被创建。</p>
</li>
<li><p><strong>/tmp</strong>：<br>这个目录是用来存放一些临时文件的。</p>
</li>
<li><strong>/usr</strong>：<br> 这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似与windows下的program files目录。</li>
<li><strong>/usr/bin：</strong><br>系统用户使用的应用程序。</li>
<li><strong>/usr/sbin：</strong><br>超级用户使用的比较高级的管理程序和系统守护程序。</li>
<li><strong>/usr/src：</strong>内核源代码默认的放置目录。</li>
<li><strong>/var</strong>：<br>这个目录中存放着在不断扩充着的东西，我们习惯将那些经常被修改的目录放在这个目录下。包括各种日志文件。</li>
</ul>
<h2 id="linux关机、重启命令"><a href="#linux关机、重启命令" class="headerlink" title="linux关机、重启命令"></a>linux关机、重启命令</h2><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">sync 将数据由内存同步到硬盘中。</span><br><span class="line"></span><br><span class="line">shutdown 关机指令，你可以man shutdown 来看一下帮助文档。例如你可以运行如下命令关机：</span><br><span class="line"></span><br><span class="line">shutdown –h 10 ‘This server will shutdown after 10 mins’ 这个命令告诉大家，计算机将在10分钟后关机，并且会显示在登陆用户的当前屏幕中。</span><br><span class="line"></span><br><span class="line">Shutdown –h now 立马关机</span><br><span class="line"></span><br><span class="line">Shutdown –h 20:25 系统会在今天20:25关机</span><br><span class="line"></span><br><span class="line">Shutdown –h +10 十分钟后关机</span><br><span class="line"></span><br><span class="line">Shutdown –r now 系统立马重启</span><br><span class="line"></span><br><span class="line">Shutdown –r +10 系统十分钟后重启</span><br><span class="line"></span><br><span class="line">reboot 就是重启，等同于 shutdown –r now</span><br><span class="line"></span><br><span class="line">halt 关闭系统，等同于shutdown –h now 和 poweroff</span><br></pre></td></tr></table></figure></div>
<h5 id="Linux-文件"><a href="#Linux-文件" class="headerlink" title="Linux 文件"></a>Linux 文件</h5><p><img src="https://github.com/bjlxb/image/blob/master/screenshot/%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/linux-file.png?raw=true" alt="linux文件列表"></p>
<p>在Linux中第一个字符代表这个文件是目录、文件或链接文件等等。</p>
<ul>
<li>当为[ <em>d</em> ]则是目录</li>
<li>当为[ <em>-</em> ]则是文件；</li>
<li>若是[ <em>l</em> ]则表示为链接文档(link file)；</li>
<li>若是[ <em>b</em> ]则表示为装置文件里面的可供储存的接口设备(可随机存取装置)；</li>
<li>若是[ <em>c</em> ]则表示为装置文件里面的串行端口设备，例如键盘、鼠标(一次性读取装置)。</li>
</ul>
<h4 id="chown：更改文件属主，也可以同时更改文件属组"><a href="#chown：更改文件属主，也可以同时更改文件属组" class="headerlink" title="chown：更改文件属主，也可以同时更改文件属组"></a>chown：更改文件属主，也可以同时更改文件属组</h4><p>语法：</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">chown [–R] 属主名 文件名</span><br><span class="line">chown [-R] 属主名：属组名 文件名</span><br></pre></td></tr></table></figure></div>
<p>3、chmod：更改文件9个属性</p>
<p>Linux文件属性有两种设置方法，一种是数字，一种是符号。</p>
<p>使用数字权限的分数对照表：</p>
<p><img src="https://github.com/bjlxb/image/blob/master/screenshot/%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/linux-wrx.png?raw=true" alt="文件权限对应表"></p>
<ul>
<li>r:4</li>
<li>w:2</li>
<li>x:1</li>
</ul>
<p>每种身份(owner/group/others)各自的三个权限(r/w/x)分数是需要累加的，例如当权限为： [-rwxrwx—] 分数则是：</p>
<ul>
<li>owner = rwx = 4+2+1 = 7</li>
<li>group = rwx = 4+2+1 = 7</li>
<li>others= — = 0+0+0 = 0</li>
</ul>
<p>变更权限的指令chmod的语法是这样的：</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">chmod [-R] xyz 文件或目录</span><br></pre></td></tr></table></figure></div>
<p>选项与参数：</p>
<ul>
<li>xyz : 就是刚刚提到的数字类型的权限属性，为 rwx 属性数值的相加。</li>
<li>-R : 进行递归(recursive)的持续变更，亦即连同此目录下的所有文件都会变更</li>
</ul>
<h4 id="符号类型改变文件权限"><a href="#符号类型改变文件权限" class="headerlink" title="符号类型改变文件权限"></a>符号类型改变文件权限</h4><p>九个权限分别是(1)user (2)group (3)others！ 用u, g, o来代表三种身份的权限！a 则代表 all 亦即全部的身份！那么读写的权限就可以写成r, w, x！</p>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center"></th>
<th style="text-align:center"></th>
<th style="text-align:center"></th>
<th style="text-align:center"></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">chmod</td>
<td style="text-align:center">u</td>
<td style="text-align:center">+(加入)</td>
<td style="text-align:center">r</td>
<td style="text-align:center">文件或目录</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">g</td>
<td style="text-align:center">-(除去)</td>
<td style="text-align:center">w</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">o</td>
<td style="text-align:center">=(设定)</td>
<td style="text-align:center">x</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">a</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
</tbody>
</table>
<h2 id="处理目录的常用命令"><a href="#处理目录的常用命令" class="headerlink" title="处理目录的常用命令"></a>处理目录的常用命令</h2><p>常见的处理目录的命令吧：</p>
<ul>
<li>ls: 列出目录</li>
<li>cd：切换目录</li>
<li>pwd：显示目前的目录</li>
<li>mkdir：创建一个新的目录</li>
<li>rmdir：删除一个空的目录</li>
<li>cp: 复制文件或目录</li>
<li>rm: 移除文件或目录</li>
<li>mv: 移动文件与目录、文件重命名</li>
</ul>
<p>使用 <em>man [命令]</em> 来查看各个命令的使用文档。</p>
<h3 id="ls-列出目录"><a href="#ls-列出目录" class="headerlink" title="ls (列出目录)"></a>ls (列出目录)</h3><p>选项与参数：</p>
<ul>
<li>-a ：全部的文件，连同隐藏档( 开头为 . 的文件) 一起列出来(常用)</li>
<li>-d ：仅列出目录本身，而不是列出目录内的文件数据(常用)</li>
<li>-l ：长数据串列出，包含文件的属性与权限等等数据；(常用)</li>
</ul>
<h3 id="cd-切换目录"><a href="#cd-切换目录" class="headerlink" title="cd (切换目录)"></a>cd (切换目录)</h3><p>cd是Change Directory的缩写，这是用来变换工作目录的命令。</p>
<h3 id="pwd-显示目前所在的目录"><a href="#pwd-显示目前所在的目录" class="headerlink" title="pwd (显示目前所在的目录)"></a>pwd (显示目前所在的目录)</h3><p>pwd是Print Working Directory的缩写，也就是显示目前所在目录的命令。</p>
<h3 id="mkdir-创建新目录"><a href="#mkdir-创建新目录" class="headerlink" title="mkdir (创建新目录)"></a>mkdir (创建新目录)</h3><p>mkdir (make directory)</p>
<p>语法：</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">mkdir [-mp] 目录名称</span><br></pre></td></tr></table></figure></div>
<p>选项与参数：</p>
<ul>
<li>-m ：配置文件的权限喔！直接配置，不需要看默认权限 (umask) 的脸色～</li>
<li><p>-p ：帮助你直接将所需要的目录(包含上一级目录)递回创建起来！</p>
<p>-p ：可以自行帮你创建多层目录！</p>
</li>
</ul>
<p>-m：为创建目录添加权限</p>
<h3 id="rmdir-删除空的目录"><a href="#rmdir-删除空的目录" class="headerlink" title="rmdir (删除空的目录)"></a>rmdir (删除空的目录)</h3><p>语法：</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">rmdir [-p] 目录名称</span><br></pre></td></tr></table></figure></div>
<p>选项与参数：</p>
<ul>
<li><strong>-p ：</strong>连同上一级『空的』目录也一起删除</li>
</ul>
<h3 id="cp-复制文件或目录"><a href="#cp-复制文件或目录" class="headerlink" title="cp (复制文件或目录)"></a>cp (复制文件或目录)</h3><p>cp 即拷贝文件和目录。</p>
<p>语法:</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">cp [-adfilprsu] 来源档(<span class="built_in">source</span>) 目标档(destination)</span><br><span class="line">cp [options] source1 source2 source3 .... directory</span><br></pre></td></tr></table></figure></div>
<p>选项与参数：</p>
<p>-a ：相当於 -pdr 的意思，至於 pdr 请参考下列说明；(常用)</p>
<p>-d ：若来源档为连结档的属性(link file)，则复制连结档属性而非文件本身；</p>
<p>-f ：为强制(force)的意思，若目标文件已经存在且无法开启，则移除后再尝试一次；</p>
<p>-i ：若目标档(destination)已经存在时，在覆盖时会先询问动作的进行(常用)</p>
<p>-l ：进行硬式连结(hard link)的连结档创建，而非复制文件本身；</p>
<p>-p ：连同文件的属性一起复制过去，而非使用默认属性(备份常用)；</p>
<p>-r ：递回持续复制，用於目录的复制行为；(常用)</p>
<p>-s ：复制成为符号连结档 (symbolic link)，亦即『捷径』文件；</p>
<p>-u ：若 destination 比 source 旧才升级 destination ！</p>
<h3 id="rm-移除文件或目录"><a href="#rm-移除文件或目录" class="headerlink" title="rm (移除文件或目录)"></a>rm (移除文件或目录)</h3><p>语法：</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">rm [-fir] 文件或目录</span><br></pre></td></tr></table></figure></div>
<p>选项与参数：</p>
<ul>
<li>-f ：就是 force 的意思，忽略不存在的文件，不会出现警告信息；</li>
<li>-i ：互动模式，在删除前会询问使用者是否动作</li>
<li>-r ：递回删除啊！最常用在目录的删除了！这是非常危险的选项！！！</li>
</ul>
<h3 id="mv-移动文件与目录，或修改名称"><a href="#mv-移动文件与目录，或修改名称" class="headerlink" title="mv (移动文件与目录，或修改名称)"></a>mv (移动文件与目录，或修改名称)</h3><p>语法：</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">mv [-fiu] <span class="built_in">source</span> destination</span><br><span class="line">mv [options] source1 source2 source3 .... directory</span><br></pre></td></tr></table></figure></div>
<p>选项与参数：</p>
<ul>
<li>-f ：force 强制的意思，如果目标文件已经存在，不会询问而直接覆盖；</li>
<li>-i ：若目标文件 (destination) 已经存在时，就会询问是否覆盖！</li>
<li>-u ：若目标文件已经存在，且 source 比较新，才会升级 (update)</li>
</ul>
<h2 id="Linux-文件内容查看"><a href="#Linux-文件内容查看" class="headerlink" title="Linux 文件内容查看"></a>Linux 文件内容查看</h2><p>Linux系统中使用以下命令来查看文件的内容：</p>
<ul>
<li>cat  由第一行开始显示文件内容</li>
<li>tac  从最后一行开始显示，可以看出 tac 是 cat 的倒着写！</li>
<li>nl   显示的时候，顺道输出行号！</li>
<li>more 一页一页的显示文件内容</li>
<li>less 与 more 类似，但是比 more 更好的是，他可以往前翻页！</li>
<li>head 只看头几行</li>
<li>tail 只看尾巴几行</li>
</ul>
<p>使用 <em>man [命令]</em>来查看各个命令的使用文档。</p>
<h3 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h3><p>由第一行开始显示文件内容</p>
<p>语法：</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">cat [-AbEnTv]</span><br></pre></td></tr></table></figure></div>
<p>选项与参数：</p>
<ul>
<li>-A ：相当於 -vET 的整合选项，可列出一些特殊字符而不是空白而已；</li>
<li>-b ：列出行号，仅针对非空白行做行号显示，空白行不标行号！</li>
<li>-E ：将结尾的断行字节 $ 显示出来；</li>
<li>-n ：列印出行号，连同空白行也会有行号，与 -b 的选项不同；</li>
<li>-T ：将 [tab] 按键以 ^I 显示出来；</li>
<li>-v ：列出一些看不出来的特殊字符</li>
</ul>
<h3 id="tac"><a href="#tac" class="headerlink" title="tac"></a>tac</h3><p>tac与cat命令刚好相反，文件内容从最后一行开始显示。</p>
<h3 id="nl"><a href="#nl" class="headerlink" title="nl"></a>nl</h3><p>显示行号</p>
<p>语法：</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">nl [-bnw] 文件</span><br></pre></td></tr></table></figure></div>
<p>选项与参数：</p>
<ul>
<li>-b ：指定行号指定的方式，主要有两种：<br>-b a ：表示不论是否为空行，也同样列出行号(类似 cat -n)；<br>-b t ：如果有空行，空的那一行不要列出行号(默认值)；</li>
<li>-n ：列出行号表示的方法，主要有三种：<br>-n ln ：行号在萤幕的最左方显示；<br>-n rn ：行号在自己栏位的最右方显示，且不加 0 ；<br>-n rz ：行号在自己栏位的最右方显示，且加 0 ；</li>
<li>-w ：行号栏位的占用的位数。</li>
</ul>
<h3 id="more"><a href="#more" class="headerlink" title="more"></a>more</h3><p>一页一页翻动</p>
<p>在 more 这个程序的运行过程中，你有几个按键可以按的：</p>
<ul>
<li>空白键 (space)：代表向下翻一页；</li>
<li>Enter         ：代表向下翻『一行』；</li>
<li>/字串         ：代表在这个显示的内容当中，向下搜寻『字串』这个关键字；</li>
<li>:f            ：立刻显示出档名以及目前显示的行数；</li>
<li>q             ：代表立刻离开 more ，不再显示该文件内容。</li>
<li>b 或 [ctrl]-b ：代表往回翻页，不过这动作只对文件有用，对管线无用。</li>
</ul>
<h3 id="less"><a href="#less" class="headerlink" title="less"></a>less</h3><p>一页一页翻动</p>
<p>less运行时可以输入的命令有：</p>
<ul>
<li>空白键    ：向下翻动一页；</li>
<li>[pagedown]：向下翻动一页；</li>
<li>[pageup]  ：向上翻动一页；</li>
<li>/字串     ：向下搜寻『字串』的功能；</li>
<li>?字串     ：向上搜寻『字串』的功能；</li>
<li>n         ：重复前一个搜寻 (与 / 或 ? 有关！)</li>
<li>N         ：反向的重复前一个搜寻 (与 / 或 ? 有关！)</li>
<li>q         ：离开 less 这个程序；</li>
</ul>
<h3 id="head"><a href="#head" class="headerlink" title="head"></a>head</h3><p>取出文件前面几行</p>
<p>语法：</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">head [-n number] 文件</span><br></pre></td></tr></table></figure></div>
<p>选项与参数：</p>
<ul>
<li>-n ：后面接数字，代表显示几行的意思</li>
</ul>
<h3 id="tail"><a href="#tail" class="headerlink" title="tail"></a>tail</h3><p>取出文件后面几行</p>
<p>语法：</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">tail [-n number] 文件</span><br></pre></td></tr></table></figure></div>
<p>选项与参数：</p>
<ul>
<li>-n ：后面接数字，代表显示几行的意思</li>
<li>-f ：表示持续侦测后面所接的档名，要等到按下[ctrl]-c才会结束tail的侦测</li>
</ul>
]]></content>
      <categories>
        <category>Tool</category>
      </categories>
      <tags>
        <tag>Tool</tag>
      </tags>
  </entry>
  <entry>
    <title>linux基础2</title>
    <url>/2019/10/04/linux%E5%9F%BA%E7%A1%802/</url>
    <content><![CDATA[<p>linux命令基础总结2，主要包含磁盘相关内容。<br><a id="more"></a></p>
<h2 id="Linux-磁盘管理"><a href="#Linux-磁盘管理" class="headerlink" title="Linux 磁盘管理"></a>Linux 磁盘管理</h2><p>Linux磁盘管理好坏管理直接关系到整个系统的性能问题。</p>
<p>Linux磁盘管理常用三个命令为df、du和fdisk。</p>
<ul>
<li>df：列出文件系统的整体磁盘使用量</li>
<li>du：检查磁盘空间使用量</li>
<li>fdisk：用于磁盘分区</li>
</ul>
<h4 id="df"><a href="#df" class="headerlink" title="df"></a>df</h4><p>df命令参数功能：检查文件系统的磁盘空间占用情况。<br>利用该命令获取硬盘被占用了多少空间，目前还剩下多少空间等信息。</p>
<p>语法：</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">df [-ahikHTm] [目录或文件名]</span><br></pre></td></tr></table></figure></div>
<p>选项与参数：</p>
<ul>
<li>-a ：列出所有的文件系统，包括系统特有的 /proc 等文件系统；</li>
<li>-k ：以 KBytes 的容量显示各文件系统；</li>
<li>-m ：以 MBytes 的容量显示各文件系统；</li>
<li>-h ：以人们较易阅读的 GBytes, MBytes, KBytes 等格式自行显示；</li>
<li>-H ：以 M=1000K 取代 M=1024K 的进位方式；</li>
<li>-T ：显示文件系统类型, 连同该 partition 的 filesystem 名称 (例如 ext3) 也列出；</li>
<li>-i ：不用硬盘容量，而以 inode 的数量来显示</li>
</ul>
<h4 id="du"><a href="#du" class="headerlink" title="du"></a>du</h4><p>Linux du命令也是查看使用空间的，但是与df命令不同的是Linux du命令是对文件和目录磁盘使用的空间的查看。</p>
<p>语法：</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">du [-ahskm] 文件或目录名称</span><br></pre></td></tr></table></figure></div>
<p>选项与参数：</p>
<ul>
<li>-a ：列出所有的文件与目录容量，因为默认仅统计目录底下的文件量而已。</li>
<li>-h ：以人们较易读的容量格式 (G/M) 显示；</li>
<li>-s ：列出总量而已，而不列出每个各别的目录占用容量；</li>
<li>-S ：不包括子目录下的总计，与 -s 有点差别。</li>
<li>-k ：以 KBytes 列出容量显示；</li>
<li>-m ：以 MBytes 列出容量显示；</li>
</ul>
<h4 id="fdisk"><a href="#fdisk" class="headerlink" title="fdisk"></a>fdisk</h4><p>fdisk 是 Linux 的磁盘分区表操作工具。</p>
<p>语法：</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">fdisk [-l] 装置名称</span><br></pre></td></tr></table></figure></div>
<p>选项与参数：</p>
<ul>
<li>-l ：输出后面接的装置所有的分区内容。若仅有 fdisk -l 时， 则系统将会把整个系统内能够搜寻到的装置的分区均列出来。</li>
</ul>
<h3 id="磁盘格式化"><a href="#磁盘格式化" class="headerlink" title="磁盘格式化"></a>磁盘格式化</h3><p>磁盘分割完毕后自然就是要进行文件系统的格式化，格式化的命令非常的简单，使用 <code>mkfs</code>（make filesystem） 命令。</p>
<p>语法：</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">mkfs [-t 文件系统格式] 装置文件名</span><br></pre></td></tr></table></figure></div>
<p>选项与参数：</p>
<ul>
<li>-t ：可以接文件系统格式，例如 ext3, ext2, vfat 等(系统有支持才会生效)</li>
</ul>
<h3 id="磁盘检验"><a href="#磁盘检验" class="headerlink" title="磁盘检验"></a>磁盘检验</h3><p>fsck（file system check）用来检查和维护不一致的文件系统。</p>
<p>若系统掉电或磁盘发生问题，可利用fsck命令对文件系统进行检查。</p>
<p>语法：</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">fsck [-t 文件系统] [-ACay] 装置名称</span><br></pre></td></tr></table></figure></div>
<p>选项与参数：</p>
<ul>
<li>-t : 给定档案系统的型式，若在 /etc/fstab 中已有定义或 kernel 本身已支援的则不需加上此参数</li>
<li>-s : 依序一个一个地执行 fsck 的指令来检查</li>
<li>-A : 对/etc/fstab 中所有列出来的 分区（partition）做检查</li>
<li>-C : 显示完整的检查进度</li>
<li>-d : 打印出 e2fsck 的 debug 结果</li>
<li>-p : 同时有 -A 条件时，同时有多个 fsck 的检查一起执行</li>
<li>-R : 同时有 -A 条件时，省略 / 不检查</li>
<li>-V : 详细显示模式</li>
<li>-a : 如果检查有错则自动修复</li>
<li>-r : 如果检查有错则由使用者回答是否修复</li>
<li>-y : 选项指定检测每个文件是自动输入yes，在不确定那些是不正常的时候，可以执行 # fsck -y 全部检查修复。</li>
</ul>
<h3 id="磁盘挂载与卸除"><a href="#磁盘挂载与卸除" class="headerlink" title="磁盘挂载与卸除"></a>磁盘挂载与卸除</h3><p>Linux 的磁盘挂载使用 <code>mount</code> 命令，卸载使用 <code>umount</code> 命令。</p>
<p>磁盘挂载语法：</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">mount [-t 文件系统] [-L Label名] [-o 额外选项] [-n]  装置文件名  挂载点</span><br></pre></td></tr></table></figure></div>
<p>磁盘卸载命令 <code>umount</code> 语法：</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">umount [-fn] 装置文件名或挂载点</span><br></pre></td></tr></table></figure></div>
<p>选项与参数：</p>
<ul>
<li>-f ：强制卸除！可用在类似网络文件系统 (NFS) 无法读取到的情况下；</li>
<li>-n ：不升级 /etc/mtab 情况下卸除。</li>
</ul>
]]></content>
      <categories>
        <category>Tool</category>
      </categories>
      <tags>
        <tag>Tool</tag>
      </tags>
  </entry>
  <entry>
    <title>linux基础1</title>
    <url>/2019/10/04/linux%E5%9F%BA%E7%A1%801/</url>
    <content><![CDATA[<p>linux命令基础总结1，主要包含用户相关内容。<br><a id="more"></a></p>
<h2 id="Linux-用户和用户组管理"><a href="#Linux-用户和用户组管理" class="headerlink" title="Linux 用户和用户组管理"></a>Linux 用户和用户组管理</h2><p>Linux系统是一个多用户多任务的分时操作系统。<br>任何一个要使用系统资源的用户，都必须以账号的身份进入系统。<br>用户的账号可以帮助系统管理员对使用系统的用户进行跟踪，控制他们对系统资源的访问。<br>用户的账号也可以帮助用户组织文件，并为用户提供安全性保护。<br>每个用户账号都拥有一个惟一的用户名和各自的口令。</p>
<p>用户账号的管理包括如下几个方面：</p>
<ul>
<li>用户账号的添加、删除与修改。</li>
<li>用户口令的管理。</li>
<li>用户组的管理。</li>
</ul>
<h4 id="一、Linux系统用户账号的管理"><a href="#一、Linux系统用户账号的管理" class="headerlink" title="一、Linux系统用户账号的管理"></a>一、Linux系统用户账号的管理</h4><p>用户账号的管理工作主要涉及到用户账号的添加、修改和删除。<br>添加用户账号就是在系统中创建一个新账号，然后为新账号分配用户号、用户组、主目录和登录Shell等资源。<br>刚添加的账号是被锁定的，无法使用。</p>
<h5 id="1、添加新的用户账号使用useradd命令，其语法如下："><a href="#1、添加新的用户账号使用useradd命令，其语法如下：" class="headerlink" title="1、添加新的用户账号使用useradd命令，其语法如下："></a>1、添加新的用户账号使用useradd命令，其语法如下：</h5><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">useradd 选项 用户名</span><br></pre></td></tr></table></figure></div>
<p>参数说明：</p>
<ul>
<li><p>选项:</p>
<ul>
<li>-c comment 指定一段注释性描述。</li>
<li>-d 目录 指定用户主目录，如果此目录不存在，则同时使用-m选项，可以创建主目录。</li>
<li>-g 用户组 指定用户所属的用户组。</li>
<li>-G 用户组，用户组 指定用户所属的附加组。</li>
<li>-s Shell文件 指定用户的登录Shell。</li>
<li>-u 用户号 指定用户的用户号，如果同时有-o选项，则可以重复使用其他用户的标识号。</li>
</ul>
</li>
<li><p>用户名:</p>
<p>指定新账号的登录名。</p>
</li>
</ul>
<h5 id="2、删除帐号"><a href="#2、删除帐号" class="headerlink" title="2、删除帐号"></a>2、删除帐号</h5><p>如果一个用户的账号不再使用，可以从系统中删除。删除用户账号就是要将/etc/passwd等系统文件中的该用户记录删除，必要时还删除用户的主目录。</p>
<p>删除一个已有的用户账号使用<code>userdel</code>命令，其格式如下：</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">userdel 选项 用户名</span><br></pre></td></tr></table></figure></div>
<p>常用的选项是-r，它的作用是把用户的主目录一起删除。</p>
<h5 id="3、修改帐号"><a href="#3、修改帐号" class="headerlink" title="3、修改帐号"></a>3、修改帐号</h5><p>根据实际情况更改用户的有关属性。</p>
<p>修改已有用户的信息使用<code>usermod</code>命令，其格式如下：</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">usermod 选项 用户名</span><br></pre></td></tr></table></figure></div>
<p>常用的选项包括<code>-c, -d, -m, -g, -G, -s, -u以及-o等</code>，这些选项的意义与<code>useradd</code>命令中的选项一样，可以为用户指定新的资源值。</p>
<p>有些系统可以使用选项：-l 新用户名</p>
<p>这个选项指定一个新的账号，即将原来的用户名改为新的用户名。</p>
<h5 id="5、用户口令的管理"><a href="#5、用户口令的管理" class="headerlink" title="5、用户口令的管理"></a>5、用户口令的管理</h5><p>用户账号刚创建时没有口令，但是被系统锁定，无法使用，必须为其指定口令后才可以使用，即使是指定空口令。</p>
<p>指定和修改用户口令的Shell命令是<code>passwd</code>。超级用户可以为自己和其他用户指定口令，普通用户只能用它修改自己的口令。命令的格式为：</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">passwd 选项 用户名</span><br></pre></td></tr></table></figure></div>
<p>可使用的选项：</p>
<ul>
<li>-l 锁定口令，即禁用账号。</li>
<li>-u 口令解锁。</li>
<li>-d 使账号无口令。</li>
<li>-f 强迫用户下次登录时修改口令。</li>
</ul>
<p>如果默认用户名，则修改当前用户的口令。</p>
<h4 id="二、Linux系统用户组的管理"><a href="#二、Linux系统用户组的管理" class="headerlink" title="二、Linux系统用户组的管理"></a>二、Linux系统用户组的管理</h4><p>每个用户都有一个用户组，系统可以对一个用户组中的所有用户进行集中管理。<br>不同Linux 系统对用户组的规定有所不同，如Linux下的用户属于与它同名的用户组，这个用户组在创建用户时同时创建。</p>
<p>用户组的管理涉及用户组的添加、删除和修改。<br>组的增加、删除和修改实际上就是对/etc/group文件的更新。</p>
<h5 id="1、增加一个新的用户组使用groupadd命令。其格式如下："><a href="#1、增加一个新的用户组使用groupadd命令。其格式如下：" class="headerlink" title="1、增加一个新的用户组使用groupadd命令。其格式如下："></a>1、增加一个新的用户组使用groupadd命令。其格式如下：</h5><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">groupadd 选项 用户组</span><br></pre></td></tr></table></figure></div>
<p>可以使用的选项有：</p>
<ul>
<li>-g GID 指定新用户组的组标识号（GID）。</li>
<li>-o 一般与-g选项同时使用，表示新用户组的GID可以与系统已有用户组的GID相同。</li>
</ul>
<h5 id="2、如果要删除一个已有的用户组，使用groupdel命令，其格式如下："><a href="#2、如果要删除一个已有的用户组，使用groupdel命令，其格式如下：" class="headerlink" title="2、如果要删除一个已有的用户组，使用groupdel命令，其格式如下："></a>2、如果要删除一个已有的用户组，使用groupdel命令，其格式如下：</h5><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">groupdel 用户组</span><br></pre></td></tr></table></figure></div>
<h5 id="3、修改用户组的属性使用groupmod命令。其语法如下："><a href="#3、修改用户组的属性使用groupmod命令。其语法如下：" class="headerlink" title="3、修改用户组的属性使用groupmod命令。其语法如下："></a>3、修改用户组的属性使用groupmod命令。其语法如下：</h5><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">groupmod 选项 用户组</span><br></pre></td></tr></table></figure></div>
<p>常用的选项有：</p>
<ul>
<li>-g GID 为用户组指定新的组标识号。</li>
<li>-o 与-g选项同时使用，用户组的新GID可以与系统已有用户组的GID相同。</li>
<li>-n新用户组 将用户组的名字改为新名字</li>
</ul>
<h5 id="4、如果一个用户同时属于多个用户组，那么用户可以在用户组之间切换，以便具有其他用户组的权限。"><a href="#4、如果一个用户同时属于多个用户组，那么用户可以在用户组之间切换，以便具有其他用户组的权限。" class="headerlink" title="4、如果一个用户同时属于多个用户组，那么用户可以在用户组之间切换，以便具有其他用户组的权限。"></a>4、如果一个用户同时属于多个用户组，那么用户可以在用户组之间切换，以便具有其他用户组的权限。</h5><p>用户可以在登录后，使用命令newgrp切换到其他用户组，这个命令的参数就是目的用户组。例如：</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">$ newgrp root</span><br></pre></td></tr></table></figure></div>
<p>这条命令将当前用户切换到root用户组，前提条件是root用户组确实是该用户的主组或附加组。类似于用户账号的管理，用户组的管理也可以通过集成的系统管理工具来完成。</p>
]]></content>
      <categories>
        <category>Tool</category>
      </categories>
      <tags>
        <tag>Tool</tag>
      </tags>
  </entry>
  <entry>
    <title>sql基础0</title>
    <url>/2019/10/05/sql%E5%9F%BA%E7%A1%800/</url>
    <content><![CDATA[<p>记录sql基础内容<br><a id="more"></a></p>
<h3 id="登录数据库"><a href="#登录数据库" class="headerlink" title="登录数据库"></a>登录数据库</h3><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">mysql -h &quot;主机地址&quot; -u &quot;用户名&quot; -p &quot;密码&quot;</span><br></pre></td></tr></table></figure></div>
<p>mysql 为登录命令。<br>-h 后面的参数是服务器的主机地址，当客户端和服务器在同一台机器上时，可以省略。<br>-u 后面的参数是登录数据库的用户名称。<br>-p 后面的参数是用户登录密码。</p>
<p>常规连接方式<br><img src="https://github.com/bjlxb/image/blob/master/screenshot/%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/mysql%E5%B8%B8%E8%A7%84%E8%BF%9E%E6%8E%A5%E6%96%B9%E5%BC%8F.jpg?raw=true" alt="mysql常规连接方式"></p>
<p>简便连接方式<br><img src="https://github.com/bjlxb/image/blob/master/screenshot/%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/mysql%E7%AE%80%E4%BE%BF%E8%BF%9E%E6%8E%A5%E6%96%B9%E5%BC%8F.jpg?raw=true" alt="mysql简便连接方式"></p>
<h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">CREATE DATABASE [IF NOT EXISTS] &lt;数据库名&gt;</span><br><span class="line">[[DEFAULT] CHARACTER SET &lt;字符集名&gt;] [[DEFAULT] COLLATE &lt;校对规则名&gt;];</span><br></pre></td></tr></table></figure></div>
<p>[ ]中的内容可选。</p>
<p>语法说明如下：</p>
<ul>
<li>&lt;数据库名&gt;：创建数据库的名称。MySQL 的数据存储区将以目录方式表示 MySQL 数据库，因此数据库名称必须符合操作系统的文件夹命名规则，注意在 MySQL 中不区分大小写。</li>
<li>IF NOT EXISTS：在创建数据库之前进行判断，只有该数据库目前尚不存在时才能执行操作。此选项可以用来避免数据库已经存在而重复创建的错误。</li>
<li>[DEFAULT] CHARACTER SET：指定数据库的默认字符集。</li>
<li>[DEFAULT] COLLATE：指定字符集的默认校对规则。</li>
</ul>
<p>MySQL 的字符集（CHARACTER）和校对规则（COLLATION）两个不同的概念：<br>字符集是用来定义 MySQL 存储字符串的方式，校对规则定义了比较字符串的方式，解决排序和字符分组的问题。</p>
<p>字符集和校对规则是一对多的关系，每个字符集至少对应一个校对规则，MySQL 支持 39 种字符集的将近 200 种校对规则。</p>
<blockquote>
<p>MySQL 不允许在同一系统创建两个相同名称的数据库。</p>
</blockquote>
<p>例：创建 MySQL 数据库并指定字符集和校对规则</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">CREATE DATABASE IF NOT EXISTS test_db_char DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_chinese_ci;</span><br></pre></td></tr></table></figure></div>
<p>创建一个测试数据库，命名为 test_db_char，指定其默认字符集为 utf8，默认校对规则为 utf8_chinese_ci（简体中文，不区分大小写）。</p>
<h5 id="查看数据库的定义声明："><a href="#查看数据库的定义声明：" class="headerlink" title="查看数据库的定义声明："></a>查看数据库的定义声明：</h5><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">SHOW CREATE DATABASE &quot;数据库名&quot;；</span><br></pre></td></tr></table></figure></div>
<p>为防止字符混乱的情况发生，需要在创建数据库时明确指定字符集；</p>
<p>在中国大陆地区，常用的字符集有 utf8 和 gbk。</p>
<ul>
<li>utf8 能够存储全球的所有字符，在任何国家都可以使用，默认的校对规则为 utf8_general_ci，对于中文可以使用 utf8_general_ci。</li>
<li>gbk 只能存储汉语涉及到的字符，不具有全球通用性，默认的校对规则为 gbk_chinese_ci。</li>
</ul>
<h3 id="查看或显示数据库"><a href="#查看或显示数据库" class="headerlink" title="查看或显示数据库"></a>查看或显示数据库</h3><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">SHOW DATABASES [LIKE &apos;数据库名&apos;];</span><br></pre></td></tr></table></figure></div>
<p>语法说明如下：</p>
<ul>
<li>LIKE 从句是可选项，用于匹配指定的数据库名称。LIKE 从句可以部分匹配，也可以完全匹配。</li>
<li>数据库名由单引号<code>&#39;&#39;</code>包围。</li>
</ul>
<p>例：</p>
<p><strong>查看所有数据库</strong></p>
<p>列出当前用户可查看的所有数据库：</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">SHOW DATABASES;</span><br></pre></td></tr></table></figure></div>
<p><strong>使用LIKE</strong></p>
<p>使用 LIKE 从句，查看名字中包含* 的数据库：</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">SHOW DATABASES LIKE &apos;%*%&apos;;</span><br></pre></td></tr></table></figure></div>
<p>使用 LIKE 从句，查看名字以*开头的数据库：</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">SHOW DATABASES LIKE &apos;*%&apos;;</span><br></pre></td></tr></table></figure></div>
<p>使用 LIKE 从句，查看名字以 db 结尾的数据库：</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">SHOW DATABASES LIKE &apos;%*&apos;;</span><br></pre></td></tr></table></figure></div>
<h3 id="修改数据库"><a href="#修改数据库" class="headerlink" title="修改数据库"></a>修改数据库</h3><p>使用 ALTER DATABASE 或 ALTER SCHEMA 语句来修改已经被创建或者存在的数据库的相关参数。<br>修改数据库的语法格式为：</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">ALTER DATABASE [数据库名] &#123; [ DEFAULT ] CHARACTER SET &lt;字符集名&gt; |</span><br><span class="line">[ DEFAULT ] COLLATE &lt;校对规则名&gt;&#125;</span><br></pre></td></tr></table></figure></div>
<p>说明如下：</p>
<ul>
<li>ALTER DATABASE 用于更改数据库的全局特性。这些特性存储在数据库目录的 db.opt 文件中。</li>
<li>使用 ALTER DATABASE 需要获得数据库 ALTER 权限。</li>
<li>数据库名称可以忽略，此时语句对应于默认数据库。</li>
<li>CHARACTER SET 子句用于更改默认的数据库字符集。</li>
</ul>
<h3 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h3><p>使用 <strong>DROP DATABASE</strong> 或 <strong>DROP SCHEMA</strong> 语句删除已创建的数据库。</p>
<p>语法格式：</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">DROP DATABASE [ IF EXISTS ] &lt;数据库名&gt;</span><br></pre></td></tr></table></figure></div>
<p>说明如下：</p>
<ul>
<li>&lt;数据库名&gt;：指定要删除的数据库名。</li>
<li>IF EXISTS：用于防止当数据库不存在时发生错误。</li>
<li>DROP DATABASE：删除数据库中的所有表格并同时删除数据库。使用此语句时要非常小心，以免错误删除。如果要使用 DROP DATABASE，需要获得数据库 DROP 权限。</li>
</ul>
<blockquote>
<p>MySQL 安装后，系统会自动创建名为 information_schema 和 mysql 的两个系统数据库，系统数据库存放一些和数据库相关的信息，如果删除了这两个数据库，MySQL 将不能正常工作。</p>
</blockquote>
<h3 id="选择数据库"><a href="#选择数据库" class="headerlink" title="选择数据库"></a>选择数据库</h3><p>USE 语句用来完成一个数据库到另一个数据库的跳转</p>
<p>语法格式为：</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">USE &lt;数据库名&gt;;</span><br></pre></td></tr></table></figure></div>
<p>该语句可以通知 MySQL 把<code>&lt;数据库名&gt;</code>所指示的数据库作为当前数据库。<br>该数据库保持为默认数据库，直到语段的结尾，或者直到遇见一个不同的 USE 语句。</p>
<p>只有使用 USE 语句来指定某个数据库作为当前数据库之后，才能对该数据库及其存储的数据对象执行操作。</p>
<h3 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h3><p>数据库存储引擎是数据库底层软件组件，数据库管理系统使用数据引擎进行创建、查询、更新和删除数据操作。<br>不同的存储引擎提供不同的存储机制、索引技巧、锁定水平等功能，使用不同的存储引擎还可以获得特定的功能。</p>
<p><strong>InnoDB 事务型数据库的首选引擎，支持事务安全表（ACID），支持行锁定和外键。MySQL 5.5.5 之后，InnoDB 作为默认存储引擎。</strong><br>MyISAM 是基于 ISAM 的存储引擎，并对其进行扩展，是在 Web、数据仓储和其他应用环境下最常使用的存储引擎之一。MyISAM 拥有较高的插入、查询速度，但不支持事务。<br>MEMORY 存储引擎将表中的数据存储到内存中，为查询和引用其他数据提供快速访问。</p>
<h5 id="MySQL-5-7-支持的存储引擎"><a href="#MySQL-5-7-支持的存储引擎" class="headerlink" title="MySQL 5.7 支持的存储引擎"></a>MySQL 5.7 支持的存储引擎</h5><p>在 MySQL 中利用 SHOW ENGINES 语句来显示可用的数据库引擎和默认引擎。</p>
<p>MySQL 5.7 支持的存储引擎有 InnoDB、MyISAM、Memory、Merge、Archive、Federated、CSV、BLACKHOLE 等。</p>
<p><img src="https://github.com/bjlxb/image/blob/master/screenshot/%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/MySQL%E6%94%AF%E6%8C%81%E7%9A%84%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E.png?raw=true" alt="MySQL支持的存储引擎"></p>
<h5 id="选择-MySQL-存储引擎"><a href="#选择-MySQL-存储引擎" class="headerlink" title="选择 MySQL 存储引擎"></a>选择 MySQL 存储引擎</h5><table>
<thead>
<tr>
<th>功能</th>
<th>MylSAM</th>
<th>MEMORY</th>
<th>InnoDB</th>
<th>Archive</th>
</tr>
</thead>
<tbody>
<tr>
<td>存储限制</td>
<td>256TB</td>
<td>RAM</td>
<td>64TB</td>
<td>None</td>
</tr>
<tr>
<td>支持事务</td>
<td>No</td>
<td>No</td>
<td>Yes</td>
<td>No</td>
</tr>
<tr>
<td>支持全文索引</td>
<td>Yes</td>
<td>No</td>
<td>No</td>
<td>No</td>
</tr>
<tr>
<td>支持树索引</td>
<td>Yes</td>
<td>Yes</td>
<td>Yes</td>
<td>No</td>
</tr>
<tr>
<td>支持哈希索引</td>
<td>No</td>
<td>Yes</td>
<td>No</td>
<td>No</td>
</tr>
<tr>
<td>支持数据缓存</td>
<td>No</td>
<td>N/A</td>
<td>Yes</td>
<td>No</td>
</tr>
<tr>
<td>支持外键</td>
<td>No</td>
<td>No</td>
<td>Yes</td>
<td>No</td>
</tr>
</tbody>
</table>
<p>可以根据以下的原则来选择 MySQL 存储引擎：</p>
<ul>
<li>如果要提供提交、回滚和恢复的事务安全（ACID 兼容）能力，并要求实现并发控制，InnoDB 是一个很好的选择。</li>
<li>如果数据表主要用来插入和查询记录，则 MyISAM 引擎提供较高的处理效率。</li>
<li>如果只是临时存放数据，数据量不大，并且不需要较高的数据安全性，可以选择将数据保存在内存的 MEMORY 引擎中，MySQL 中使用该引擎作为临时表，存放查询的中间结果。</li>
<li>如果只有 INSERT 和 SELECT 操作，可以选择Archive 引擎，Archive 存储引擎支持高并发的插入操作，但是本身并不是事务安全的。Archive 存储引擎非常适合存储归档数据，如记录日志信息可以使用 Archive 引擎。</li>
</ul>
<blockquote>
<p>使用哪一种引擎要根据需要灵活选择，一个数据库中多个表可以使用不同的引擎以满足各种性能和实际需求。使用合适的存储引擎将会提高整个数据库的性能。</p>
</blockquote>
<h5 id="MySQL-默认存储引擎"><a href="#MySQL-默认存储引擎" class="headerlink" title="MySQL 默认存储引擎"></a>MySQL 默认存储引擎</h5><p>InnoDB 是系统的默认引擎，支持可靠的事务处理。</p>
<p>修改数据库<strong>临时</strong>的默认存储引擎:</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">SET default_storage_engine=&lt;存储引擎名&gt;;</span><br></pre></td></tr></table></figure></div>
<p>当再次重启客户端时，默认存储引擎仍然是 InnoDB。</p>
]]></content>
      <categories>
        <category>DB</category>
      </categories>
      <tags>
        <tag>DB</tag>
      </tags>
  </entry>
  <entry>
    <title>Django基本命令</title>
    <url>/2019/03/12/Django%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p>平时工作使用Django时，常用的一些基本命令。<br><a id="more"></a></p>
<h2 id="1-新建project"><a href="#1-新建project" class="headerlink" title="1.新建project"></a>1.新建project</h2><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#python2</span></span><br><span class="line">django-admin.py startproject project_name</span><br><span class="line"><span class="comment">#python3</span></span><br><span class="line">django-admin startproject project_name</span><br></pre></td></tr></table></figure></div>
<h2 id="2-新建app"><a href="#2-新建app" class="headerlink" title="2.新建app"></a>2.新建app</h2><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line">python manage.py startapp app_name</span><br><span class="line"><span class="keyword">or</span></span><br><span class="line">django-admin.py startapp app_name</span><br></pre></td></tr></table></figure></div>
<h2 id="3-启动Django项目"><a href="#3-启动Django项目" class="headerlink" title="3.启动Django项目"></a>3.启动Django项目</h2><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 只允许本机访问</span></span><br><span class="line">python manage.py runserver <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8000</span></span><br><span class="line"><span class="comment"># 允许局域网中其他设备访问</span></span><br><span class="line">python manage.py runserver <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">8000</span></span><br><span class="line"><span class="keyword">or</span></span><br><span class="line">python manage.py runserver <span class="number">0</span>:<span class="number">8000</span></span><br></pre></td></tr></table></figure></div>
<p>同一局域网其他设备直接输入项目设备的IP+端口号进行访问</p>
<h2 id="4-同步更改数据库表或字段"><a href="#4-同步更改数据库表或字段" class="headerlink" title="4.同步更改数据库表或字段"></a>4.同步更改数据库表或字段</h2><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Django 1.6及以下</span></span><br><span class="line">python manage.py syncdb</span><br><span class="line"><span class="comment"># Django 1.7.1及以上 用以下命令</span></span><br><span class="line"><span class="comment"># 1. 创建更改的文件</span></span><br><span class="line">python manage.py makemigrations</span><br><span class="line"><span class="comment"># 2. 将生成的py文件应用到数据库</span></span><br><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure></div>
<h2 id="5-清空数据库"><a href="#5-清空数据库" class="headerlink" title="5. 清空数据库"></a>5. 清空数据库</h2><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line">python manage.py flush</span><br></pre></td></tr></table></figure></div>
<h2 id="6-创建超级管理员"><a href="#6-创建超级管理员" class="headerlink" title="6. 创建超级管理员"></a>6. 创建超级管理员</h2><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 按照提示输入用户名和对应的密码</span></span><br><span class="line"><span class="comment"># 其中邮箱可以为空，用户名和密码必填</span></span><br><span class="line">python manage.py createsuperuser</span><br></pre></td></tr></table></figure></div>
<h2 id="7-修改用户密码"><a href="#7-修改用户密码" class="headerlink" title="7. 修改用户密码"></a>7. 修改用户密码</h2><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line"># username对应之前设置的用户名，若忘记可以去数据库表中查询</span><br><span class="line">python manage.py changepassword username</span><br></pre></td></tr></table></figure></div>
<h2 id="8-Django-项目环境终端"><a href="#8-Django-项目环境终端" class="headerlink" title="8. Django 项目环境终端"></a>8. Django 项目环境终端</h2><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 可以在shell中调用当前项目的models.py相关的API。</span></span><br><span class="line">python manage.py shell</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP协议请求类型</title>
    <url>/2019/10/18/HTTP%E5%8D%8F%E8%AE%AE%E8%AF%B7%E6%B1%82%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<p>http的协议请求类型和响应的状态码！<br><a id="more"></a></p>
<h2 id="HTTP-协议的-8-种请求类型介绍"><a href="#HTTP-协议的-8-种请求类型介绍" class="headerlink" title="HTTP 协议的 8 种请求类型介绍"></a>HTTP 协议的 8 种请求类型介绍</h2><ul>
<li>OPTIONS：返回服务器针对特定资源所支持的HTTP请求方法。也可以利用向Web服务器发送’*’的请求来测试服务器的功能性。</li>
<li>HEAD：向服务器索要与GET请求相一致的响应，只不过响应体将不会被返回。这一方法可以在不必传输整个响应内容的情况下，就可以获取包含在响应消息头中的元信息。</li>
<li>GET：向特定的资源发出请求。</li>
<li>POST：向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST请求可能会导致新的资源的创建和/或已有资源的修改。</li>
<li>PUT：向指定资源位置上传其最新内容。</li>
<li>DELETE：请求服务器删除 Request-URI 所标识的资源。</li>
<li>TRACE：回显服务器收到的请求，主要用于测试或诊断。</li>
<li>CONNECT：HTTP/1.1 协议中预留给能够将连接改为管道方式的代理服务器。</li>
</ul>
<p>虽然 HTTP 的请求方式有 8 种，但是我们在实际应用中常用的也就是 get 和 post，其他请求方式也都可以通过这两种方式间接的来实现。</p>
<hr>
<p>当服务器响应时，其状态行的信息为HTTP的版本号，状态码，及解释状态码的简单说明。</p>
<p>将5类状态码详细列出：<br>① 客户方错误<br>100　 继续<br>101　 交换协议<br>② 成功<br>200 　OK<br>201 　已创建<br>202　 接收<br>203　 非认证信息<br>204　 无内容<br>205 　重置内容<br>206　 部分内容<br>③ 重定向<br>300 　多路选择<br>301　 永久转移<br>302　 暂时转移<br>303　 参见其它<br>304 　未修改（Not Modified）<br>305　 使用代理<br>④ 客户方错误<br>400　 错误请求（Bad Request）<br>401 　未认证<br>402 　需要付费<br>403　 禁止（Forbidden）<br>404　 未找到（Not Found）<br>405　 方法不允许<br>406　 不接受<br>407　 需要代理认证<br>408　 请求超时<br>409　 冲突<br>410 　失败<br>411 　需要长度<br>412　 条件失败<br>413 　请求实体太大<br>414 　请求URI太长<br>415 　不支持媒体类型<br>⑤ 服务器错误<br>500　 服务器内部错误<br>501　 未实现（Not Implemented）<br>502　 网关失败<br>504 　网关超时<br>505 HTTP版本不支持</p>
]]></content>
      <categories>
        <category>面试题</category>
      </categories>
      <tags>
        <tag>面试题</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows下Scoop使用</title>
    <url>/2020/01/28/Windows%E4%B8%8BScoop%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>介绍一下Windows下命令行软件管理工具Scoop</p>
<a id="more"></a>
<p>主要是为了Windows上安装软件安装繁琐，路径不统一，而且更新卸载麻烦，包管理系统可以完美的解决这些问题！</p>
<p>目前Windows平台下比较流行的两种包管理平台：</p>
<ul>
<li>chocolatey 和 scoop</li>
</ul>
<blockquote>
<p>Chocolatey中软件安装路径默认在C盘<br>scoop自由度高，可以将软件部署到任意盘中</p>
</blockquote>
<h4 id="官方信息"><a href="#官方信息" class="headerlink" title="官方信息"></a>官方信息</h4><ul>
<li>官方网址:<br><a href="https://scoop.sh/" target="_blank" rel="noopener">https://scoop.sh/</a></li>
<li>官方快速入门:<br><a href="https://github.com/lukesampson/scoop/wiki/Quick-Start" target="_blank" rel="noopener">https://github.com/lukesampson/scoop/wiki/Quick-Start</a></li>
</ul>
<h4 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h4><p>操作环境: Windows10 或Windows7<br>确保PowerShell 版本 &gt;= 3. win7或许低于3，需要升级。</p>
<hr>
<p>打开PowerShell方式：</p>
<pre><code>1. win + R 打开运行，输入PowerShell，确定。
2. cmd中输入PowerShell然后回车。
3. 在开始菜单中查找。
4. 开始菜单右键，选择Windows PowerShell或i打开。
</code></pre><ol>
<li><p>命令行查看自己的PowerShell 版本</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="POWERSHELL"><figure class="iseeu highlight /powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$psversiontable</span>.psversion.major</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>确保你允许PowerShell执行本地脚本</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="POWERSHELL"><figure class="iseeu highlight /powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Set-ExecutionPolicy</span> RemoteSigned -Scope CurrentUser</span><br><span class="line"></span><br><span class="line">执行策略更改</span><br><span class="line">执行策略可帮助你防止执行不信任的脚本。更改执行策略可能会产生安全风险，如 https:/go.microsoft.com/fwlink/?LinkID=<span class="number">135170</span></span><br><span class="line">中的 about_Execution_Policies 帮助主题所述。是否要更改执行策略?</span><br><span class="line">[Y] 是(Y)  [A] 全是(A)  [N] 否(N)  [L] 全否(L)  [S] 暂停(S)  [?] 帮助 (默认值为“N”): A</span><br></pre></td></tr></table></figure></div>
</li>
</ol>
<h4 id="安装Scoop"><a href="#安装Scoop" class="headerlink" title="安装Scoop"></a>安装Scoop</h4><ol>
<li><p>不指定安装路径，使用默认安装路径（将会安装到默认目录C:\Users\user(自己的用户名)\scoop）</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="POWERSHELL"><figure class="iseeu highlight /powershell"><table><tr><td class="code"><pre><span class="line">iex (<span class="built_in">new-object</span> net.webclient).downloadstring(<span class="string">'https://get.scoop.sh'</span>)</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>指定安装目录</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="POWERSHELL"><figure class="iseeu highlight /powershell"><table><tr><td class="code"><pre><span class="line">[environment]::setEnvironmentVariable(<span class="string">'SCOOP'</span>,<span class="string">'指定安装路径'</span>,<span class="string">'User'</span>)</span><br><span class="line"><span class="variable">$env:SCOOP</span>=<span class="string">'指定安装路径'</span></span><br><span class="line">iex (<span class="built_in">new-object</span> net.webclient).downloadstring(<span class="string">'https://get.scoop.sh'</span>)</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>安装scoop可能遇到的错误：</p>
</li>
</ol>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="POWERSHELL"><figure class="iseeu highlight /powershell"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">使用“<span class="number">1</span>”个参数调用“DownloadString”时发生异常:“基础连接已经关闭: 发送时发生错误。”</span><br><span class="line">所在位置 行:<span class="number">1</span> 字符: <span class="number">1</span></span><br><span class="line">+ iex (<span class="built_in">new-object</span> net.webclient).downloadstring(<span class="string">'https://get.scoop.sh'</span>)</span><br><span class="line">+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">    + CategoryInfo          : NotSpecified: (:) [], MethodInvocationException</span><br><span class="line">    + FullyQualifiedErrorId : WebException问</span><br></pre></td></tr></table></figure></div>
<p>原因：由于墙的原因无法安装<br>解决：确保浏览器在能访问到<a href="https://get.scoop.sh" target="_blank" rel="noopener">https://get.scoop.sh</a> （使用shadowsocks全局代理）</p>
<h4 id="使用Scoop"><a href="#使用Scoop" class="headerlink" title="使用Scoop"></a>使用Scoop</h4><p>在cmd和PowerShell中输入以下命令均可，因为已经为Scoop自动设置了环境变量</p>
<h6 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h6><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="POWERSHELL"><figure class="iseeu highlight /powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 帮助语法</span></span><br><span class="line">scoop help</span><br><span class="line"><span class="comment"># 安装操作</span></span><br><span class="line">scoop install 软件名</span><br><span class="line"><span class="comment"># 更新操作（此更新操作是对scoop本身以及bucket库的更新）</span></span><br><span class="line">scoop update</span><br><span class="line"><span class="comment"># 更新所有已安装应用</span></span><br><span class="line">scoop update *</span><br><span class="line"><span class="comment"># 移除所有旧版本</span></span><br><span class="line">scoop cleanup *</span><br><span class="line"><span class="comment"># 卸载操作</span></span><br><span class="line">scoop uninstall 软件名</span><br></pre></td></tr></table></figure></div>
<h6 id="Bucket软件源"><a href="#Bucket软件源" class="headerlink" title="Bucket软件源"></a>Bucket软件源</h6><p>scoop的bucket软件源策略，由社区来维护</p>
<pre><code>1. 社区地址：
https://github.com/rasa/scoop-directory/blob/master/by-score.md
2.    bucket语法：
scoop bucket add [软件源名字(随意)] [源地址]
3.bucket源推荐：
</code></pre><blockquote>
<pre><code>官方：
scoop bucket add main # 默认
scoop bucket add extras # 推荐
scoop bucket add versions
scoop bucket add nightlies
scoop bucket add nirsoft
scoop bucket add php
scoop bucket add nerd-fonts
scoop bucket add nonportable
scoop bucket add java
scoop bucket add games
scoop bucket add jetbrains # 推荐
国内常用软件：
微信、QQ、钉钉
scoop bucket add dorado https://github.com/h404bi/dorado    
</code></pre></blockquote>
<pre><code>小新Bucket：
FSCapture、Shadowsocksrr、UninstallTool、Notepad3、Wechat……
scoop bucket add dajiu https://github.com/dajiiu/dajiu-scoop

其他：
scoop bucket add dodorz https://github.com/dodorz/scoop-bucket
</code></pre><h6 id="常用软件"><a href="#常用软件" class="headerlink" title="常用软件"></a>常用软件</h6><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="POWERSHELL"><figure class="iseeu highlight /powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 01. 7zip：</span></span><br><span class="line">scoop install <span class="number">7</span>zip</span><br><span class="line"><span class="comment"># 02. git：</span></span><br><span class="line">scoop install git</span><br><span class="line"><span class="comment"># 03.aria2：</span></span><br><span class="line">scoop install aria2</span><br><span class="line"><span class="comment">#04.vim：</span></span><br><span class="line">scoop install vim</span><br><span class="line"><span class="comment">#05.wget：</span></span><br><span class="line">scoop install wget</span><br><span class="line"><span class="comment">#06.everything：</span></span><br><span class="line">scoop install everything</span><br><span class="line"><span class="comment">#07.Q-Dir：</span></span><br><span class="line">scoop install q-dir</span><br><span class="line"><span class="comment">#08.chrome：</span></span><br><span class="line">scoop install googlechrome</span><br><span class="line"><span class="comment">#09.firefox：</span></span><br><span class="line">scoop install firefox</span><br><span class="line"><span class="comment">#10.opera：</span></span><br><span class="line">scoop install opera</span><br><span class="line"><span class="comment">#11.vivaldi：</span></span><br><span class="line">scoop install vivaldi</span><br><span class="line"><span class="comment">#12.python：</span></span><br><span class="line">scoop install python</span><br><span class="line"><span class="comment">#13.golang：</span></span><br><span class="line">scoop install go</span><br><span class="line"><span class="comment">#14.notepadplusplus：</span></span><br><span class="line">scoop install notepadplusplus</span><br><span class="line"><span class="comment">#15.sublime-text：</span></span><br><span class="line">scoop install sublime-text</span><br><span class="line"><span class="comment">#16.vscode：</span></span><br><span class="line">scoop install vscode</span><br><span class="line"><span class="comment">#17.idea：</span></span><br><span class="line">scoop install idea</span><br><span class="line"><span class="comment">#18.pycharm：</span></span><br><span class="line">scoop install pycharm</span><br><span class="line"><span class="comment">#19.goland：</span></span><br><span class="line">scoop install goland</span><br><span class="line"><span class="comment">#20.snipaste：</span></span><br><span class="line">scoop install snipaste</span><br><span class="line"><span class="comment">#21.telegram：</span></span><br><span class="line">scoop install telegram</span><br><span class="line"><span class="comment">#22.typora：</span></span><br><span class="line">scoop install typora</span><br></pre></td></tr></table></figure></div>
<h6 id="导出软件列表"><a href="#导出软件列表" class="headerlink" title="导出软件列表"></a>导出软件列表</h6><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="POWERSHELL"><figure class="iseeu highlight /powershell"><table><tr><td class="code"><pre><span class="line">scoop list &gt; F:/scoop/ScoopAppList.txt</span><br></pre></td></tr></table></figure></div>
<h6 id="版本切换"><a href="#版本切换" class="headerlink" title="版本切换"></a>版本切换</h6><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="POWERSHELL"><figure class="iseeu highlight /powershell"><table><tr><td class="code"><pre><span class="line">scoop reset python</span><br><span class="line">scoop reset python27</span><br></pre></td></tr></table></figure></div>
<h6 id="提高下载速度"><a href="#提高下载速度" class="headerlink" title="提高下载速度"></a>提高下载速度</h6><ol>
<li><p>建议安装aria2： scoop install aria2 </p>
</li>
<li><p>使用代理(每次进入dos或PowerShell都需设置一遍)： PC端→shadowsocker右键「设置选项」→本地代理下的「允许来自互联网的连接」勾选上 </p>
</li>
<li><p>set http_proxy=<a href="http://127.0.0.1:1080" target="_blank" rel="noopener">http://127.0.0.1:1080</a> set https_proxy=<a href="http://127.0.0.1:1080" target="_blank" rel="noopener">http://127.0.0.1:1080</a></p>
</li>
</ol>
<p>或：</p>
<p>   在scoop 的配置文件（~/.config/scoop/config.json）中添加</p>
<blockquote>
<p>scoop config proxy [username:password@]host:port<br>例如 scoop config proxy 127.0.0.1:1080</p>
</blockquote>
]]></content>
      <categories>
        <category>Tool</category>
      </categories>
      <tags>
        <tag>Tool</tag>
      </tags>
  </entry>
  <entry>
    <title>PuTTY生成ppk文件并使用ssh私钥登录</title>
    <url>/2020/01/29/PuTTY%E7%94%9F%E6%88%90ppk%E6%96%87%E4%BB%B6%E5%B9%B6%E4%BD%BF%E7%94%A8ssh%E7%A7%81%E9%92%A5%E7%99%BB%E5%BD%95/</url>
    <content><![CDATA[<p>PuTTY默认不使用ssh keys免密登录，需要进行配置，简单记录一下步骤！</p>
<a id="more"></a>
<h4 id="1-生成公钥和私钥"><a href="#1-生成公钥和私钥" class="headerlink" title="1. 生成公钥和私钥"></a>1. 生成公钥和私钥</h4><ol>
<li>使用puttygen，点击Generate生成ssh公钥和私钥。<br><img src="/image/PuTTY/生成ssh公钥私钥.png"></li>
<li>若已有ssh公钥和私钥，选择load按钮，选择需要加载的私钥。<br><img src="/image/PuTTY/加载已存在的私钥.png"></li>
<li>生成私钥，保存至指定位置。<br><img src="/image/PuTTY/生成私钥.png"></li>
</ol>
<h4 id="2-PuTTY端配置"><a href="#2-PuTTY端配置" class="headerlink" title="2. PuTTY端配置"></a>2. PuTTY端配置</h4><ol>
<li>打开PuTTY，在Connection–&gt;Data中配置登录用户名<br><img src="/image/PuTTY/添加用户名.png"></li>
<li>在Connection–&gt;SSH–&gt;Auth中加载之前保存的*.ppk文件<br><img src="/image/PuTTY/选择私钥.png"><br><img src="/image/PuTTY/打开私钥.png"><br><img src="/image/PuTTY/添加ppk文件.png"></li>
<li>选择Session填写Host Name信息后可以选择直接连接或填写Saved Sessions，点击Save保存该Session<br><img src="/image/PuTTY/保存并连接服务器.png"></li>
<li>点击Open，若之前配置没问题，应该可以直接连接上<h4 id="3-配置免密登录"><a href="#3-配置免密登录" class="headerlink" title="3.配置免密登录"></a>3.配置免密登录</h4></li>
</ol>
<p>可以查看上一篇文章，链接如下：</p>
<p><a href="https://bjlxb.github.io/2020/01/29/ssh%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95/">ssh免密登录</a></p>
]]></content>
      <categories>
        <category>Tool</category>
      </categories>
      <tags>
        <tag>Tool</tag>
      </tags>
  </entry>
  <entry>
    <title>PyCharm模板详解</title>
    <url>/2020/01/29/PyCharm%E6%A8%A1%E6%9D%BF%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<p>PyCharm配置模板，新建.py文件时自动添加！</p>
<a id="more"></a>
<h4 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h4><p>File–&gt;Settings–&gt;Editor–&gt;File and Code Templates</p>
<p><img src="/image/PyCharm模板.png"></p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">@File    :   $&#123;NAME&#125;.py    </span></span><br><span class="line"><span class="string">@Contact :   liuxinbo@conew.com</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">@Modify Time      @Author    @Version    @Desciption</span></span><br><span class="line"><span class="string">------------      -------    --------    -----------</span></span><br><span class="line"><span class="string">$&#123;DATE&#125; $&#123;TIME&#125;   xinbo      1.0         None</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure></div>
<h4 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h4><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line">（a）首行</span><br><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line">（b）预定义的变量要扩展为格式为$ &#123;&lt;variable_name&gt;&#125;的相应值。</span><br><span class="line">可用的预定义文件模板变量为：</span><br><span class="line">$ &#123;PROJECT_NAME&#125; - 当前项目的名称。</span><br><span class="line">$ &#123;NAME&#125; - 在文件创建过程中在“新建文件”对话框中指定的新文件的名称。</span><br><span class="line">$ &#123;USER&#125; - 当前用户的登录名。</span><br><span class="line">$ &#123;DATE&#125; - 当前的系统日期。</span><br><span class="line">$ &#123;TIME&#125; - 当前系统时间。</span><br><span class="line">$ &#123;YEAR&#125; - 今年。</span><br><span class="line">$ &#123;MONTH&#125; - 当月。</span><br><span class="line">$ &#123;DAY&#125; - 当月的当天。</span><br><span class="line">$ &#123;HOUR&#125; - 目前的小时。</span><br><span class="line">$ &#123;MINUTE&#125; - 当前分钟。</span><br><span class="line">$ &#123;PRODUCT_NAME&#125; - 将在其中创建文件的IDE的名称。</span><br><span class="line">$ &#123;MONTH_NAME_SHORT&#125; - 月份名称的前<span class="number">3</span>个字母。 示例：<span class="number">1</span>月，<span class="number">2</span>月等</span><br><span class="line">$ &#123;MONTH_NAME_FULL&#125; - 一个月的全名。 示例：<span class="number">1</span>月，<span class="number">2</span>月等</span><br></pre></td></tr></table></figure></div>
<p>实例</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time    : $&#123;DATE&#125; $&#123;TIME&#125;</span></span><br><span class="line"><span class="comment"># @Author  : Mat</span></span><br><span class="line"><span class="comment"># @Email   : mat_wu@163.com</span></span><br><span class="line"><span class="comment"># @File    : $&#123;NAME&#125;.py</span></span><br><span class="line"><span class="comment"># @Software: $&#123;PRODUCT_NAME&#125;</span></span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>Tool</category>
      </categories>
      <tags>
        <tag>Tool</tag>
      </tags>
  </entry>
  <entry>
    <title>os.path模块详解</title>
    <url>/2020/01/29/os-path%E6%A8%A1%E5%9D%97%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<p>工作中经常会使用到os.path模块，记录一下基本用法！</p>
<a id="more"></a>
<h4 id="os-path-abspath"><a href="#os-path-abspath" class="headerlink" title="os.path.abspath"></a>os.path.abspath</h4><p>返回一个目录的绝对路径</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.path.abspath(<span class="string">'c:/soft'</span>)</span><br><span class="line"><span class="string">'c:\\soft'</span></span><br></pre></td></tr></table></figure></div>
<h4 id="os-path-exists"><a href="#os-path-exists" class="headerlink" title="os.path.exists"></a>os.path.exists</h4><p>判断指定文件是否存在</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.path.exists(<span class="string">"c:\\soft"</span>)</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure></div>
<h4 id="os-path-getsize"><a href="#os-path-getsize" class="headerlink" title="os.path.getsize"></a>os.path.getsize</h4><p>返回文件的大小</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.stat(<span class="string">'c:\\soft'</span>)</span><br><span class="line">os.stat_result(st_mode=<span class="number">16895</span>, st_ino=<span class="number">1125899906987469</span>, st_dev=<span class="number">2694845472</span>, st_nlink=<span class="number">1</span>, st_uid=<span class="number">0</span>, st_gid=<span class="number">0</span>, st_size=<span class="number">8192</span>, st_atime=<span class="number">1580279596</span>, st_mtime=<span class="number">1580208262</span>, st_ctime=<span class="number">1578724838</span>)</span><br><span class="line">os.path.getsize(<span class="string">"c:\\soft"</span>)</span><br><span class="line"><span class="number">8192</span></span><br></pre></td></tr></table></figure></div>
<h4 id="os-path-isdir"><a href="#os-path-isdir" class="headerlink" title="os.path.isdir"></a>os.path.isdir</h4><p>判断是否为目录</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line">os.path.isdir(<span class="string">"/etc/sysconfig/selinux"</span>)</span><br><span class="line"><span class="literal">False</span></span><br><span class="line">os.path.isdir(<span class="string">"/home"</span>)</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure></div>
<h4 id="os-path-isfile"><a href="#os-path-isfile" class="headerlink" title="os.path.isfile"></a>os.path.isfile</h4><p>判断是否为文件<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line">os.path.isfile(<span class="string">"/home"</span>)</span><br><span class="line"><span class="literal">False</span></span><br><span class="line">os.path.isfile(<span class="string">"/etc/sysconfig/selinux"</span>)</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure></div></p>
<h4 id="os-path-join"><a href="#os-path-join" class="headerlink" title="os.path.join"></a>os.path.join</h4><p>join(a, *p)<br>将目录名和文件的基名拼接成一个完整的路径<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line">os.path.join(<span class="string">"/tmp"</span>,<span class="string">"a"</span>)</span><br><span class="line">/tmp/a</span><br></pre></td></tr></table></figure></div></p>
<h4 id="os-path-basename"><a href="#os-path-basename" class="headerlink" title="os.path.basename"></a>os.path.basename</h4><p>返回一个目录</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line">os.path.basename(<span class="string">"/etc/sysconfig/selinux"</span>)</span><br><span class="line"><span class="string">'selinux'</span></span><br></pre></td></tr></table></figure></div>
<h4 id="os-path-dirname"><a href="#os-path-dirname" class="headerlink" title="os.path.dirname"></a>os.path.dirname</h4><p>返回一个目录名</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line">os.path.dirname(<span class="string">"/etc/sysconfig/selinux"</span>)</span><br><span class="line"><span class="string">'/etc/sysconfig'</span></span><br></pre></td></tr></table></figure></div>
<h4 id="os-path-getatime"><a href="#os-path-getatime" class="headerlink" title="os.path.getatime"></a>os.path.getatime</h4><p>返回指定文件最后一次的访问时间</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line">os.stat(<span class="string">'c:\\soft'</span>)</span><br><span class="line">os.stat_result(st_mode=<span class="number">16895</span>, st_ino=<span class="number">1125899906987469</span>, st_dev=<span class="number">2694845472</span>, st_nlink=<span class="number">1</span>, st_uid=<span class="number">0</span>, st_gid=<span class="number">0</span>, st_size=<span class="number">8192</span>, st_atime=<span class="number">1580280499</span>, st_mtime=<span class="number">1580208262</span>, st_ctime=<span class="number">1578724838</span>)</span><br><span class="line">os.path.getatime(<span class="string">'c:\\soft'</span>)</span><br><span class="line"><span class="number">1580280499.3629825</span></span><br></pre></td></tr></table></figure></div>
<h4 id="os-path-getctime"><a href="#os-path-getctime" class="headerlink" title="os.path.getctime"></a>os.path.getctime</h4><p>返回指定文件最后一次的改变时间</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line">os.stat(<span class="string">'c:\\soft'</span>)</span><br><span class="line">os.stat_result(st_mode=<span class="number">16895</span>, st_ino=<span class="number">1125899906987469</span>, st_dev=<span class="number">2694845472</span>, st_nlink=<span class="number">1</span>, st_uid=<span class="number">0</span>, st_gid=<span class="number">0</span>, st_size=<span class="number">8192</span>, st_atime=<span class="number">1580280499</span>, st_mtime=<span class="number">1580208262</span>, st_ctime=<span class="number">1578724838</span>)</span><br><span class="line">os.path.getctime(<span class="string">'c:\\soft'</span>)</span><br><span class="line"><span class="number">1578724838.0129825</span></span><br></pre></td></tr></table></figure></div>
<h4 id="os-path-isabs"><a href="#os-path-isabs" class="headerlink" title="os.path.isabs"></a>os.path.isabs</h4><p>返回是否为绝对路径</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line">os.path.isabs(<span class="string">"/etc/sysconfig"</span>)</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure></div>
<h4 id="os-path-islink"><a href="#os-path-islink" class="headerlink" title="os.path.islink"></a>os.path.islink</h4><p>返回指定参数是否为软链接</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line">os.path.islink(<span class="string">"/etc/sysconfig/selinux"</span>)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line">os.path.islink(<span class="string">"/etc/sysconfig/nfs"</span>)</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure></div>
<h4 id="os-path-ismount"><a href="#os-path-ismount" class="headerlink" title="os.path.ismount"></a>os.path.ismount</h4><p>判断指定参数是否为挂载点</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line">os.path.ismount(<span class="string">"/mnt/cdrom"</span>)</span><br><span class="line"><span class="literal">False</span></span><br><span class="line">以上是未挂载光盘，现在把光盘挂载到/mnt/cdrom下，再进行测试</span><br><span class="line">os.path.ismount(<span class="string">"/mnt/cdrom"</span>)</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure></div>
<h4 id="os-path-realpath"><a href="#os-path-realpath" class="headerlink" title="os.path.realpath"></a>os.path.realpath</h4><p>返回指定文件的标准路径，而非软链接所在的路径</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line">os.path.realpath(<span class="string">"/etc/sysconfig/selinux"</span>)</span><br><span class="line"><span class="string">'/etc/selinux/config'</span></span><br><span class="line">os.path.realpath(<span class="string">"/usr/bin/python"</span>)</span><br><span class="line"><span class="string">'/usr/bin/python2.7'</span></span><br></pre></td></tr></table></figure></div>
<h4 id="os-path-samefile"><a href="#os-path-samefile" class="headerlink" title="os.path.samefile"></a>os.path.samefile</h4><p>判断两个路径是否指向同一个文件</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line">sameopenfile</span><br><span class="line">判断两个打开的文件是否指向同一个文件</span><br></pre></td></tr></table></figure></div>
<h4 id="os-path-split"><a href="#os-path-split" class="headerlink" title="os.path.split"></a>os.path.split</h4><p>分割目录名，返回由其目录名和基名给成的元组</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line">os.path.split(<span class="string">"/tmp/f1.txt"</span>)</span><br><span class="line">(<span class="string">'/tmp'</span>, <span class="string">'f1.txt'</span>)</span><br><span class="line">os.path.split(<span class="string">"/home/test.sh"</span>)</span><br><span class="line">(<span class="string">'/home'</span>, <span class="string">'test.sh'</span>)</span><br></pre></td></tr></table></figure></div>
<h4 id="os-path-splitext"><a href="#os-path-splitext" class="headerlink" title="os.path.splitext"></a>os.path.splitext</h4><p>分割文件名，返回由文件名和扩展名组成的元组</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line">os.path.splitext(<span class="string">"/home/test.sh"</span>)</span><br><span class="line">(<span class="string">'/home/test'</span>, <span class="string">'.sh'</span>)</span><br><span class="line">os.path.splitext(<span class="string">"/tmp/f1.txt"</span>)</span><br><span class="line">(<span class="string">'/tmp/f1'</span>, <span class="string">'.txt'</span>)</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python中map函数</title>
    <url>/2020/02/01/Python%E4%B8%ADmap%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<p>阅读Python进阶书籍时，看到map函数，觉得很有用，记录一下该函数的详细用法！</p>
<a id="more"></a>
<p>map()是Python内置函数。<br>map()函数的格式是：<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line">map(function, iterable, ...)</span><br></pre></td></tr></table></figure></div></p>
<p>map()函数接收两个参数：</p>
<pre><code>1. function 是对iterable进行操作的功能函数
2. iterable 是一个或多个可迭代对象，用逗号隔开
</code></pre><p>若function为None，作用同zip()。<br>map()函数返回值：<br>    Python2： 直接返回一个新列表，原iterable不变<br>    Python3： 得到新的map对象，可用list(map_obj)或tuple(map_obj)转化为想要的数据类型</p>
<h4 id="1-当iterable只有一个"><a href="#1-当iterable只有一个" class="headerlink" title="1. 当iterable只有一个"></a>1. 当iterable只有一个</h4><p>例1：</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line">items = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">squared = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> items:</span><br><span class="line">	squared.append(i**<span class="number">2</span>)</span><br><span class="line"><span class="comment"># squared = [1, 4, 9, 16, 25]</span></span><br><span class="line"><span class="comment"># 用map实现：</span></span><br><span class="line">items = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">squared = list(map(<span class="keyword">lambda</span> x: x**<span class="number">2</span>, items))</span><br><span class="line"><span class="comment"># squared = [1, 4, 9, 16, 25]</span></span><br></pre></td></tr></table></figure></div>
<p>例2：</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">multiply</span><span class="params">(x)</span>:</span></span><br><span class="line">	<span class="keyword">return</span> (x*x)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x)</span>:</span></span><br><span class="line">	<span class="keyword">return</span> (x+x)</span><br><span class="line"></span><br><span class="line">funcs = [multiply, add]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">	value = map(<span class="keyword">lambda</span> x: x(i), funcs)</span><br><span class="line">	print(list(value))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注:上面print时,加了list转换,是为了python2/3的兼容性</span></span><br><span class="line"><span class="comment"># 在python2中map直接返回列表,但在python3中返回迭代器</span></span><br><span class="line"><span class="comment"># 因此为了兼容python3, 需要list转换一下</span></span><br><span class="line"><span class="comment"># Output:# [0, 0]</span></span><br><span class="line"><span class="comment"># [1, 2]</span></span><br><span class="line"><span class="comment"># [4, 4]</span></span><br><span class="line"><span class="comment"># [9, 6]</span></span><br><span class="line"><span class="comment"># [16, 8]</span></span><br></pre></td></tr></table></figure></div>
<h4 id="2-当iterable多于一个"><a href="#2-当iterable多于一个" class="headerlink" title="2. 当iterable多于一个"></a>2. 当iterable多于一个</h4><p>例3：</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line">result = map(<span class="keyword">lambda</span> x, y: x + y, [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>], [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>])</span><br><span class="line"><span class="comment"># result = [3, 7, 11, 15, 19]</span></span><br></pre></td></tr></table></figure></div>
<p>注：</p>
<p>​    当function函数时None时，这就同zip()函数了，并且zip()开始取代这个了，目的是将多个列表相同位置的元素归并到一个元组。</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line">result = map(<span class="literal">None</span>, [<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>],[<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>])</span><br><span class="line">result = [(<span class="number">2</span>, <span class="number">3</span>), (<span class="number">4</span>, <span class="number">2</span>), (<span class="number">6</span>, <span class="number">1</span>)]</span><br></pre></td></tr></table></figure></div>
<h4 id="3-使用map-函数可以实现将其他类型的数转换成list"><a href="#3-使用map-函数可以实现将其他类型的数转换成list" class="headerlink" title="3. 使用map()函数可以实现将其他类型的数转换成list"></a>3. 使用map()函数可以实现将其他类型的数转换成list</h4><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line">***将元组转换成list***</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>map(int, (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>))</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">***将字符串转换成list***</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>map(int, <span class="string">'1234'</span>)</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">***提取字典的key，并将结果存放在一个list中***</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>map(int, &#123;<span class="number">1</span>:<span class="number">2</span>,<span class="number">2</span>:<span class="number">3</span>,<span class="number">3</span>:<span class="number">4</span>&#125;)</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">***字符串转换成元组，并将结果以列表的形式返回***</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>map(tuple, <span class="string">'agdf'</span>)</span><br><span class="line">[(<span class="string">'a'</span>,), (<span class="string">'g'</span>,), (<span class="string">'d'</span>,), (<span class="string">'f'</span>,)]</span><br><span class="line"><span class="comment"># 将小写转成大写</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">u_to_l</span> <span class="params">(s)</span>:</span></span><br><span class="line">  <span class="keyword">return</span> s.upper()</span><br><span class="line"><span class="keyword">print</span> map(u_to_l,<span class="string">'abcdef'</span>)</span><br><span class="line">[<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>, <span class="string">'E'</span>, <span class="string">'F'</span>]</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>windows安装MinGW-w64</title>
    <url>/2020/02/06/windows%E5%AE%89%E8%A3%85MinGW-w64/</url>
    <content><![CDATA[<p>记录一下Windows安装MinGW-w64的详细过程！</p>
<a id="more"></a>
<h4 id="1-下载MinGW-w64"><a href="#1-下载MinGW-w64" class="headerlink" title="1. 下载MinGW-w64"></a>1. 下载MinGW-w64</h4><p>  进入<a href="https://sourceforge.net/projects/mingw-w64/files/mingw-w64/" target="_blank" rel="noopener">MinGW-w64官网</a>，选择<a href="[x86_64-posix-sjlj](https://sourceforge.net/projects/mingw-w64/files/Toolchains targetting Win64/Personal Builds/mingw-builds/8.1.0/threads-posix/sjlj/x86_64-8.1.0-release-posix-sjlj-rt_v6-rev0.7z">x86_64-posix-seh</a>)进行下载</p>
<h4 id="2-解压至指定位置"><a href="#2-解压至指定位置" class="headerlink" title="2. 解压至指定位置"></a>2. 解压至指定位置</h4><p>  使用7-Zip将下载文件解压至指定位置，最好将文件夹名字修改为MinGW-w64，方便后续环境变量配置。</p>
<h4 id="3-配置环境变量"><a href="#3-配置环境变量" class="headerlink" title="3. 配置环境变量"></a>3. 配置环境变量</h4><ol>
<li>此电脑–&gt;右键–&gt;属性<br><img src="/image/MinGW-w64/MinGW-w64-1.png"></li>
<li>选择高级系统设置<br><img src="/image/MinGW-w64/MinGW-w64-2.png"></li>
<li>选择环境变量<br><img src="/image/MinGW-w64/MinGW-w64-3.png"></li>
<li>系统变量–&gt;选中Path–&gt;点击编辑<br><img src="/image/MinGW-w64/MinGW-w64-4.png"></li>
<li>将MinGW-w64中bin目录地址拷贝<br><img src="/image/MinGW-w64/MinGW-w64-5.png"></li>
<li>选择新建–&gt;将前面拷贝的地址粘贴<br><img src="/image/MinGW-w64/MinGW-w64-6.png"></li>
</ol>
<h4 id="4-验证配置"><a href="#4-验证配置" class="headerlink" title="4. 验证配置"></a>4. 验证配置</h4><p>  1.使用win+r输入cmd或者powershell。<br>  2.输入gcc -v，回车，出现如下信息说明配置正确。<br>  <img src="/image/MinGW-w64/MinGW-w64-7.png"></p>
<ol start="3">
<li>若不是该信息需检查上面步骤是否都正确！</li>
</ol>
<h4 id="5-运行程序"><a href="#5-运行程序" class="headerlink" title="5. 运行程序"></a>5. 运行程序</h4><p>  可以通过g++ xxx.cpp -o xxx.exe命令指令编译c/cpp文件</p>
]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>使用vscode编译运行和调试C/C++</title>
    <url>/2020/02/05/%E4%BD%BF%E7%94%A8vscode%E7%BC%96%E8%AF%91%E8%BF%90%E8%A1%8C%E5%92%8C%E8%B0%83%E8%AF%95C-C/</url>
    <content><![CDATA[<p>记录一下vscode编译运行和调试C/C++的过程！</p>
<a id="more"></a>
<h3 id="一、前期准备"><a href="#一、前期准备" class="headerlink" title="一、前期准备"></a>一、前期准备</h3><h4 id="1-安装vscode"><a href="#1-安装vscode" class="headerlink" title="1.  安装vscode"></a>1.  安装vscode</h4><p>   根据自己的环境去<a href="https://code.visualstudio.com/" target="_blank" rel="noopener">官网</a>下载对应版本的Visual Studio Code</p>
<h4 id="2-安装解压软件"><a href="#2-安装解压软件" class="headerlink" title="2. 安装解压软件"></a>2. 安装解压软件</h4><p>   推荐开源压缩软件<a href="https://www.7-zip.org/" target="_blank" rel="noopener">7-Zip</a>，虽然界面不是很美观，但是功能还是很强大的！</p>
<h4 id="3-下载C-C-编译器"><a href="#3-下载C-C-编译器" class="headerlink" title="3. 下载C/C++编译器"></a>3. 下载C/C++编译器</h4><p>​    因为vscode只是一个代码编译器，并没有集成C/C++的编译器，需要下载一个C/C++的编译器，推荐<code>mingw</code>系列（<a href="https://sourceforge.net/projects/mingw/files/MinGW/" target="_blank" rel="noopener">mingw</a>或者<a href="https://sourceforge.net/projects/mingw-w64/files/mingw-w64/" target="_blank" rel="noopener">mingw-w64</a>，<code>mingw-w64</code>比<code>mingw</code>功能更强大），因为中国环境问题mingw-w64难以下载，推荐<a href="https://sourceforge.net/projects/mingw-w64/files/Toolchains targetting Win64/Personal Builds/mingw-builds/8.1.0/threads-posix/seh/x86_64-8.1.0-release-posix-seh-rt_v6-rev0.7z" target="_blank" rel="noopener">离线下载</a>，但是需要手动添加环境变量！</p>
<h4 id="4-配置mingw-w64"><a href="#4-配置mingw-w64" class="headerlink" title="4. 配置mingw-w64"></a>4. 配置mingw-w64</h4><p>​    具体细节可以查看另一篇文章内容：</p>
<p>​        <a href="https://bjlxb.github.io/2020/02/06/windows%E5%AE%89%E8%A3%85MinGW-w64/#more">直达链接</a></p>
<h4 id="5-验证mingw可用"><a href="#5-验证mingw可用" class="headerlink" title="5. 验证mingw可用"></a>5. 验证mingw可用</h4><p>​    打开cmd或Windows PowerShell输入gcc -v，若出现版本信息就表明mingw配置成功，如果未出现版本信息表明配置有问题，需要查找原因。</p>
<h4 id="6-安装插件"><a href="#6-安装插件" class="headerlink" title="6. 安装插件"></a>6. 安装插件</h4><p>  依次安装下方三个插件</p>
<ul>
<li><p>chinese(simplified)</p>
</li>
<li><p>C/C++</p>
</li>
<li><p>Code Runner</p>
<p><img src="/image/vscode-C/vscode-1.png"></p>
<h3 id="二、编译运行程序"><a href="#二、编译运行程序" class="headerlink" title="二、编译运行程序"></a>二、编译运行程序</h3><p>编译运行两种方法：</p>
<ol>
<li><p>使用Code Runner一键编译运行程序</p>
</li>
<li><p>使用vscode的集成终端使用命令行编译运行</p>
</li>
</ol>
</li>
</ul>
<hr>
<p>新建文件：文件&gt;新建文件&gt;添加如下代码&gt;Ctrl+S保存文件并<strong>将文件后缀名改为<code>.c</code>或<code>.cpp</code></strong><br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="keyword">char</span> name[<span class="number">100</span>];</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"What is your name?\n"</span>);</span><br><span class="line">   <span class="built_in">scanf</span>(<span class="string">"%s"</span>,name);</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"Hello,%s,nice to meet you!\n"</span>,name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p>
<p>点击右上角的三角形按钮(Ctrl+Alt+N)运行代码：<br><img src="/image/vscode-C/vscode-2.png"></p>
<p>运行后会出现如下情况：<br><img src="/image/vscode-C/vscode-3.png"></p>
<p>原因：程序中使用了<code>scanf</code>函数从键盘读取一串字符，但此时无法输入数据，也无法结束程序。</p>
<p>解决方案：</p>
<ol>
<li><p>首先重启vscode（关闭vscode再重新打开）</p>
</li>
<li><p><strong>文件&gt;首选项&gt;设置</strong><br> <img src="/image/vscode-C/vscode-4.png"></p>
</li>
<li><p><strong>用户&gt;拓展&gt;Run Code Configuration&gt;Run In Termina</strong>选中<br> <img src="/image/vscode-C/vscode-5.png"></p>
</li>
<li><p>修改后程序就可以正常运行了，结束运行点击垃圾桶标志<br> <img src="/image/vscode-C/vscode-6.png"></p>
</li>
</ol>
<p>C/C++另一种选择：<code>C/C++ Compile Run</code>，配置插件：文件&gt;首选项&gt;设置&gt;扩展&gt;Compile Run Configuration的<code>Run-in-external-terminal</code>选项后可以出现和dev / codeblocks / vc一样的外部窗口</p>
<p>  <img src="/image/vscode-C/vscode-7.png"></p>
<hr>
<p>进入需要编译文件目录下，输入如下完整编译指令：</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="code"><pre><span class="line">g++ xxx.cpp -o xxx.exe -lwsock32</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>ssh免密登录</title>
    <url>/2020/01/29/ssh%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95/</url>
    <content><![CDATA[<p>使用linux免密登录会比较安全并且无需密码，方便快捷，记录一下设置过程！</p>
<a id="more"></a>
<h4 id="1-生成ssh-keys"><a href="#1-生成ssh-keys" class="headerlink" title="1. 生成ssh keys"></a>1. 生成ssh keys</h4><p>可以查看该文章：<a href="https://bjlxb.github.io/2019/03/20/生成SSH-keys/">生成SSH keys</a></p>
<h4 id="2-将公钥上传至服务器"><a href="#2-将公钥上传至服务器" class="headerlink" title="2. 将公钥上传至服务器"></a>2. 将公钥上传至服务器</h4><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="code"><pre><span class="line">ssh-copy-id user@host</span><br></pre></td></tr></table></figure></div>
<p>查看公钥是否上传至服务器</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="code"><pre><span class="line">cat ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure></div>
<p>修改权限信息，若不修改可能会因为权限问题，登录失败</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="code"><pre><span class="line">~/.ssh目录的权限为700，</span><br><span class="line">~/.ssh/authorized_keys和私钥的权限为600</span><br><span class="line">chmod 700 ~/.ssh</span><br><span class="line">chmod 600 ~/.ssh/authorized_keys</span><br><span class="line"><span class="meta">#</span><span class="bash"> chmod 644 ~/.ssh/authorized_keys</span></span><br></pre></td></tr></table></figure></div>
<p>linux系统中,文件或目录的权限可以分为3种:</p>
<p>r: 4 读</p>
<p>w: 2 写</p>
<p>x: 1 执行(运行)</p>
<p>－: 对应数值 0</p>
<p>数字 4 、2 和 1表示读、写、执行权限</p>
<p>rwx = 4 + 2 + 1 = 7 (可读写运行）</p>
<p>rw = 4 + 2 = 6 （可读写不可运行）</p>
<p>rx = 4 +1 = 5 （可读可运行不可写）</p>
<h4 id="3-配置ssh服务器配置文件"><a href="#3-配置ssh服务器配置文件" class="headerlink" title="3. 配置ssh服务器配置文件"></a>3. 配置ssh服务器配置文件</h4><p>使用root用户修改/etc/ssh/sshd_config文件</p>
<ol>
<li><p>修改内容：</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line"># 若不允许root登录</span><br><span class="line">PermitRootLogin no</span><br><span class="line"># 允许root登录</span><br><span class="line">PermitRootLogin yes</span><br><span class="line"># 需要修改为no的内容</span><br><span class="line">UsePAM no</span><br><span class="line">PasswordAuthentication no</span><br><span class="line"># 需要修改为yes的内容</span><br><span class="line">RSAAuthentication yes</span><br><span class="line">PubkeyAuthentication yes</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>重启sshd服务</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="code"><pre><span class="line">systemctl restart sshd.service</span><br><span class="line">systemctl status sshd.service #查看ssh服务的状态</span><br><span class="line"><span class="meta">#</span><span class="bash">systemctl start sshd.service  <span class="comment">#开启ssh服务</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">sytemctl <span class="built_in">enable</span> sshd.service <span class="comment">#ssh服务随开机启动，还有个disabled</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">systemctl stop sshd.ervice <span class="comment">#停止</span></span></span><br></pre></td></tr></table></figure></div>
</li>
</ol>
<p>注：</p>
<p>若修改后免密连接出现Permission denied (publickey,gssapi-keyex,gssapi-with-mic)错误。</p>
<ol>
<li>确认服务器~/.ssh/authorized_keys文件中是否包含本地的公钥。</li>
<li>确认服务器~/.ssh和~/.ssh/authorized_keys文件的权限是否设置正确。</li>
<li>确认修改/etc/ssh/sshd_config文件后是否重启了ssh服务。</li>
</ol>
]]></content>
      <categories>
        <category>Tool</category>
      </categories>
      <tags>
        <tag>Tool</tag>
      </tags>
  </entry>
  <entry>
    <title>C++中std::vector转string</title>
    <url>/2020/02/12/C-%E4%B8%ADstd-vector%E8%BD%ACstring/</url>
    <content><![CDATA[<p>在C++中将std::vector<string>在不经过for遍历的前提下转为string<br><a id="more"></a></string></p>
<h4 id="1-accumulate函数"><a href="#1-accumulate函数" class="headerlink" title="1. accumulate函数"></a>1. accumulate函数</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;numeric&gt; //accumulate需要</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> str;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt; <span class="built_in">list</span>;</span><br><span class="line">    <span class="built_in">list</span>.push_back(<span class="string">"hello"</span>);</span><br><span class="line">    <span class="built_in">list</span>.push_back(<span class="string">"world"</span>);</span><br><span class="line">    str = accumulate(<span class="built_in">list</span>.begin(), <span class="built_in">list</span>.end(), str);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;str.c_str()&lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line">helloworld</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言学习笔记一</title>
    <url>/2020/02/13/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80/</url>
    <content><![CDATA[<p>记录日常学习C语言笔记一。<br><a id="more"></a></p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Anaconda虚拟环境</title>
    <url>/2020/02/14/Anaconda%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<p>Anaconda虚拟环境是python中很推荐的虚拟环境，它内置了很多算法计算相关的包，可以无需下载直接使用，方便快捷。<br><a id="more"></a></p>
<h4 id="1-查看已有环境"><a href="#1-查看已有环境" class="headerlink" title="1. 查看已有环境"></a>1. 查看已有环境</h4><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line">conda env list</span><br><span class="line">conda info -e</span><br></pre></td></tr></table></figure></div>
<h4 id="2-创建环境"><a href="#2-创建环境" class="headerlink" title="2. 创建环境"></a>2. 创建环境</h4><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line">conda create -n env_name python=version </span><br><span class="line"><span class="comment"># 同时安装必要的包</span></span><br><span class="line">conda create -n env_name <span class="string">'包1'</span> <span class="string">'包2'</span> <span class="string">'...'</span> python=version</span><br></pre></td></tr></table></figure></div>
<p>注：</p>
<ol>
<li>参数-n是指参数指定虚拟环境名，与–name等效</li>
<li>env_name为虚拟环境名字</li>
<li>python=version是为虚拟环境指定Python版本</li>
<li>若指定版本为3.6时，conda将会安装最新的3.6.x版本<br>例：创建一个虚拟环境，Python版本为3.6，虚拟环境名为python3.6<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line">conda create --name python3<span class="number">.6</span> python=<span class="number">3.6</span></span><br><span class="line">conda create -n python3<span class="number">.6</span> python=<span class="number">3.6</span></span><br></pre></td></tr></table></figure></div>
</li>
</ol>
<h4 id="3-激活虚拟环境"><a href="#3-激活虚拟环境" class="headerlink" title="3. 激活虚拟环境"></a>3. 激活虚拟环境</h4><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line">Linux:  source activate env_name</span><br><span class="line">Windows: activate env_name</span><br></pre></td></tr></table></figure></div>
<p>例：激活上面创建的虚拟环境python3.6<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line">Linux:  source activate python3<span class="number">.6</span></span><br><span class="line">Windows: activate python3<span class="number">.6</span></span><br></pre></td></tr></table></figure></div></p>
<h4 id="4-退出虚拟环境"><a href="#4-退出虚拟环境" class="headerlink" title="4. 退出虚拟环境"></a>4. 退出虚拟环境</h4><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line">Linux: source deactivate env_name</span><br><span class="line">Windows: deactivate env_name </span><br><span class="line"><span class="comment"># 也可以使用`activate root`切回root环境</span></span><br></pre></td></tr></table></figure></div>
<h4 id="5-删除虚拟环境"><a href="#5-删除虚拟环境" class="headerlink" title="5. 删除虚拟环境"></a>5. 删除虚拟环境</h4><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line">conda remove -n env_name --all</span><br></pre></td></tr></table></figure></div>
<h4 id="6-虚拟环境包管理"><a href="#6-虚拟环境包管理" class="headerlink" title="6. 虚拟环境包管理"></a>6. 虚拟环境包管理</h4><h5 id="6-1-安装包"><a href="#6-1-安装包" class="headerlink" title="6.1 安装包"></a>6.1 安装包</h5>  <div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line">conda install package_name</span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line">pip install package_name</span><br></pre></td></tr></table></figure></div>
<h5 id="6-2-查看包列表"><a href="#6-2-查看包列表" class="headerlink" title="6.2 查看包列表"></a>6.2 查看包列表</h5>  <div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line">conda list</span><br></pre></td></tr></table></figure></div>
<h5 id="6-3-更新包"><a href="#6-3-更新包" class="headerlink" title="6.3 更新包"></a>6.3 更新包</h5>  <div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line">conda update package_name</span><br></pre></td></tr></table></figure></div>
<h5 id="6-4-查找包"><a href="#6-4-查找包" class="headerlink" title="6.4 查找包"></a>6.4 查找包</h5>  <div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line">conda search keyword</span><br></pre></td></tr></table></figure></div>
<p>  例：你需要安装pandas，忘记名字，可以这样查找<br>  <div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line">conda search pan</span><br></pre></td></tr></table></figure></div></p>
<h5 id="6-5-删除包"><a href="#6-5-删除包" class="headerlink" title="6.5 删除包"></a>6.5 删除包</h5>  <div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line">conda remove package_name</span><br></pre></td></tr></table></figure></div>
<h4 id="7-导出虚拟环境"><a href="#7-导出虚拟环境" class="headerlink" title="7. 导出虚拟环境"></a>7. 导出虚拟环境</h4><pre><code>在多人协作开发或电脑切换过程中，为了让他人了解项目需要依赖，需要将环境信息进行分享，conda提供了方便得功能将虚拟环境中所有依赖包统一导出一个配置文件中，在新的机器上，只需要让conda根绝导出的配置文件重建虚拟环境。
</code></pre><h5 id="7-1-导出配置文件"><a href="#7-1-导出配置文件" class="headerlink" title="7.1 导出配置文件"></a>7.1 导出配置文件</h5><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line">conda env export --file python3<span class="number">.6</span>_env.yml</span><br></pre></td></tr></table></figure></div>
<p>  environment.yaml是导出依赖的目标文件，运行命令后，当前目录下就回生成一个environment.yaml文件，包含了所有依赖信息。</p>
<h5 id="7-2-创建虚拟环境"><a href="#7-2-创建虚拟环境" class="headerlink" title="7.2 创建虚拟环境"></a>7.2 创建虚拟环境</h5><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line">conda env create -f /home/chb/code/python3<span class="number">.6</span>_env.yml</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>Tool</category>
      </categories>
      <tags>
        <tag>Tool</tag>
      </tags>
  </entry>
  <entry>
    <title>PowerShell不兼容Anaconda虚拟环境解决方案</title>
    <url>/2020/02/14/PowerShell%E4%B8%8D%E5%85%BC%E5%AE%B9Anaconda%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<p>在Windows中PowerShell使用Anaconda虚拟环境时会报错，原因是不兼容，需要使用开源库进行兼容！<br><a id="more"></a></p>
<ol>
<li>打开Windows PowerShell<br><img src="/image/Anaconda/Anaconda-6.png"></li>
</ol>
<p>2.运行如下命令<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="POWERSHELL"><figure class="iseeu highlight /powershell"><table><tr><td class="code"><pre><span class="line">conda install -n root -c pscondaenvs pscondaenvs</span><br></pre></td></tr></table></figure></div></p>
<p><img src="/image/Anaconda/Anaconda-7.png"></p>
<ol start="3">
<li>上面命令执行结束后，再执行下方命令<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="POWERSHELL"><figure class="iseeu highlight /powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Set-ExecutionPolicy</span> RemoteSigned</span><br></pre></td></tr></table></figure></div>
</li>
</ol>
<p>执行效果如下：<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="POWERSHELL"><figure class="iseeu highlight /powershell"><table><tr><td class="code"><pre><span class="line">PS C:\Windows\system32&gt; <span class="built_in">Set-ExecutionPolicy</span> RemoteSigned</span><br><span class="line"> </span><br><span class="line">执行策略更改</span><br><span class="line">执行策略可帮助你防止执行不信任的脚本。更改执行策略可能会产生安全风险，如 https:/go.microsoft.com/fwlink/?LinkID=<span class="number">135170</span></span><br><span class="line">中的 about_Execution_Policies 帮助主题所述。是否要更改执行策略?</span><br><span class="line">[Y] 是(Y)  [A] 全是(A)  [N] 否(N)  [L] 全否(L)  [S] 暂停(S)  [?] 帮助 (默认值为“N”): Y</span><br><span class="line">PS C:\Windows\system32&gt;</span><br></pre></td></tr></table></figure></div></p>
]]></content>
      <categories>
        <category>Tool</category>
      </categories>
      <tags>
        <tag>Tool</tag>
      </tags>
  </entry>
  <entry>
    <title>C++中std::pair的用法</title>
    <url>/2020/02/20/C-%E4%B8%ADstd-pair%E7%9A%84%E7%94%A8%E6%B3%95/</url>
    <content><![CDATA[<p>pair用法是C++中常用的对象，本文主要讲解C++中pair的相关用法！<br><a id="more"></a></p>
<h4 id="1-pairy应用"><a href="#1-pairy应用" class="headerlink" title="1. pairy应用"></a>1. pairy应用</h4><p>  1.1 pair是将2个数据组合成一个数据，当需要这样的需求时就可以使用pair，如stl中的map就是将key和value放在一起来保存。<br>  1.2 当一个函数需要返回2个数据的时候，可以选择pair。<br>  1.3 pair的实现是一个结构体，主要的两个成员变量是first second 因为是使用struct不是class，所以可以直接使用pair的成员变量。</p>
<h4 id="2-make-pair函数"><a href="#2-make-pair函数" class="headerlink" title="2. make_pair函数"></a>2. make_pair函数</h4><p>  2.1 template pair make_pair(T1 a, T2 b) { return pair(a, b); }<br>   可以使用make_pair来生成我们需要的pair<br>   需要pair做参数时可以使用make_pair，直接调用make_pair生成pair对象，代码清晰明了。<br>   另外pair可以接受隐式的类型转换，这样可以获得更高的灵活度。<br>   但会带来了一些问题：<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="keyword">float</span>&gt;(<span class="number">1</span>, <span class="number">1.1</span>);  <span class="comment">// 1.1为float类型</span></span><br><span class="line"><span class="built_in">std</span>::make_pair(<span class="number">1</span>, <span class="number">1.1</span>);  <span class="comment">// 1.1为double类型，会自动匹配成double类型</span></span><br></pre></td></tr></table></figure></p>
<p>  2.2 类模板：template <class t1, class t2> struct pair<br>  参数：<br>   T1是第一个值的数据类型<br>   T2是第二个值的数据类型。<br>  功能：<br>   pair将一对值组合成一个值，这一对值可以具有不同的数据类型（T1和T2）。<br>   两个值可以分别用pair的两个公有函数first和second访问。</class></p>
<h4 id="3-具体用例"><a href="#3-具体用例" class="headerlink" title="3. 具体用例"></a>3. 具体用例</h4><p>  3.1 定义（构造）<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 默认构造函数</span></span><br><span class="line">pair&lt;<span class="keyword">int</span>, <span class="keyword">double</span>&gt; p1;</span><br><span class="line"><span class="comment">// 给定值初始化</span></span><br><span class="line">pair&lt;<span class="keyword">int</span>, <span class="keyword">double</span>&gt; p2(<span class="number">1</span>, <span class="number">2.4</span>);</span><br><span class="line"><span class="comment">// 拷贝构造函数</span></span><br><span class="line">pair&lt;<span class="keyword">int</span>, <span class="keyword">double</span>&gt; p3(p2);</span><br></pre></td></tr></table></figure></p>
<p>  3.2 访问两个元素（first和second）<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 默认构造函数</span></span><br><span class="line">pair&lt;<span class="keyword">int</span>, <span class="keyword">double</span>&gt; p1;  </span><br><span class="line">p1.first = <span class="number">520</span>;</span><br><span class="line">p1.second = <span class="number">13.14</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; p1.first &lt;&lt; <span class="string">' '</span> &lt;&lt; p1.second &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出：</span></span><br><span class="line"><span class="comment">// 520 13.14</span></span><br></pre></td></tr></table></figure></p>
<p>  3.3 赋值operator =<br>   3.3.1 make_pair<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">pair&lt;<span class="keyword">int</span>, <span class="keyword">double</span>&gt; p1;</span><br><span class="line">p1 = make_pair(<span class="number">520</span>, <span class="number">13.14</span>);</span><br></pre></td></tr></table></figure></p>
<p>   3.3.2 变量间赋值<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">pair&lt;<span class="keyword">int</span>, <span class="keyword">double</span>&gt; p1(<span class="number">1</span>, <span class="number">1.2</span>);</span><br><span class="line">pair&lt;<span class="keyword">int</span>, <span class="keyword">double</span>&gt; p2 = p1;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows配置Allure Test Report环境</title>
    <url>/2020/02/17/Windows%E9%85%8D%E7%BD%AEAllure-Test-Report%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<p>相对于目前常用的测试报告框架，Allure Test Report具有更好看，跨平台等优势！这里主要记录一下在Windows平台下配置Allure Test Report环境！<br><a id="more"></a></p>
<h4 id="1-安装Scoop"><a href="#1-安装Scoop" class="headerlink" title="1. 安装Scoop"></a>1. 安装Scoop</h4><p>1.1 在PowerShell中输入如下内容（将会安装到默认目录C:\Users\user(自己的用户名)\scoop，也可指定安装目录）：</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="POWERSHELL"><figure class="iseeu highlight /powershell"><table><tr><td class="code"><pre><span class="line">iex (<span class="built_in">new-object</span> net.webclient).downloadstring(<span class="string">'https://get.scoop.sh'</span>)</span><br></pre></td></tr></table></figure></div>
<p>1.2想要指定安装目录，在PowerShell中输入如下内容（代码中的D:\Applications\Scoop为指定的目录）：<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="POWERSHELL"><figure class="iseeu highlight /powershell"><table><tr><td class="code"><pre><span class="line">[environment]::setEnvironmentVariable(<span class="string">'SCOOP'</span>,<span class="string">'D:\Applications\Scoop'</span>,<span class="string">'User'</span>)</span><br><span class="line"><span class="variable">$env:SCOOP</span>=<span class="string">'D:\Applications\Scoop'</span></span><br><span class="line">iex (<span class="built_in">new-object</span> net.webclient).downloadstring(<span class="string">'https://get.scoop.sh'</span>)</span><br></pre></td></tr></table></figure></div></p>
<h4 id="2-python生成报告"><a href="#2-python生成报告" class="headerlink" title="2. python生成报告"></a>2. python生成报告</h4><p>2.1 生成xml：<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="POWERSHELL"><figure class="iseeu highlight /powershell"><table><tr><td class="code"><pre><span class="line">py.test --alluredir ./result</span><br></pre></td></tr></table></figure></div></p>
<p>2.2 生产网页：<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="POWERSHELL"><figure class="iseeu highlight /powershell"><table><tr><td class="code"><pre><span class="line">allure generate ./result/ -o ./report/ --clean</span><br></pre></td></tr></table></figure></div></p>
<p>2.3 打开网页：<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="POWERSHELL"><figure class="iseeu highlight /powershell"><table><tr><td class="code"><pre><span class="line">allure open -h <span class="number">127.0</span>.<span class="number">0.1</span> -p <span class="number">8083</span> ./report/</span><br></pre></td></tr></table></figure></div></p>
]]></content>
      <categories>
        <category>测试</category>
      </categories>
      <tags>
        <tag>测试</tag>
      </tags>
  </entry>
  <entry>
    <title>C++中int与string的相互转换</title>
    <url>/2020/02/23/C-%E4%B8%ADint%E4%B8%8Estring%E7%9A%84%E7%9B%B8%E4%BA%92%E8%BD%AC%E6%8D%A2/</url>
    <content><![CDATA[<p>在C++中经常会遇到类型转换问题，这里主要记录一下C++中int和string类型的相互转换！<br><a id="more"></a><br>一、int转换成string<br>1.1 to_string函数<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// c++11标准增加了全局函数std::to_string:</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">to_string</span> <span class="params">(<span class="keyword">int</span> val)</span></span>;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">to_string</span> <span class="params">(<span class="keyword">long</span> val)</span></span>;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">to_string</span> <span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> val)</span></span>;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">to_string</span> <span class="params">(<span class="keyword">unsigned</span> val)</span></span>;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">to_string</span> <span class="params">(<span class="keyword">unsigned</span> <span class="keyword">long</span> val)</span></span>;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">to_string</span> <span class="params">(<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> val)</span></span>;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">to_string</span> <span class="params">(<span class="keyword">float</span> val)</span></span>;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">to_string</span> <span class="params">(<span class="keyword">double</span> val)</span></span>;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">to_string</span> <span class="params">(<span class="keyword">long</span> <span class="keyword">double</span> val)</span></span>;</span><br><span class="line"><span class="comment">// to_string例子</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;   // std::cout  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;     // std::string, std::to_string  </span></span></span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">string</span> pi = <span class="string">"圆周率："</span> + <span class="built_in">std</span>::to_string(<span class="number">3.14</span>);  </span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">string</span> perfect = <span class="built_in">std</span>::to_string(<span class="number">6</span>+<span class="number">6</span>+<span class="number">6</span>+<span class="number">6</span>+<span class="number">6</span>) + <span class="string">"是一个很好的数字！"</span>;  </span><br><span class="line">    </span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; pi &lt;&lt; <span class="string">'\n'</span>;  </span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; perfect &lt;&lt; <span class="string">'\n'</span>;  </span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="comment">// 圆周率：3.14</span></span><br><span class="line"><span class="comment">// 30是一个很好的数字！</span></span><br></pre></td></tr></table></figure></p>
<p>1.2 字符串流</p>
<ul>
<li><p>标准库定义了三种类型字符串流：istringstream,ostringstream,stringstream，分别可以读、写以及读和写string类型,它们是由iostream类型派生而来的。</p>
</li>
<li><p>要使用它们需要包含sstream头文件。</p>
</li>
<li><p>sstream类型定义了一个有string形参的构造函数，即：stringstream stream(str); 创建了存储str副本的stringstream对象，str为string类型对象。</p>
</li>
<li><p>定义了名为str的成员，用来读取或设置stringstream对象所操纵的string值：stream.str(); 返回stream中存储的string类型对象stream.str(str); 将string类型的s复制给stream，返回void。</p>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> num = <span class="number">30</span>;</span><br><span class="line"><span class="built_in">stringstream</span> s;</span><br><span class="line">s&lt;&lt;num; </span><br><span class="line"><span class="built_in">string</span> str = s.str();</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;str&lt;&lt;<span class="built_in">endl</span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="comment">// 30</span></span><br></pre></td></tr></table></figure>
<p>二、string转换成int</p>
<p>2.1 采用标准库中atoi函数</p>
<ul>
<li>其他类型也都有对应的标准库函数，比如浮点型atof(),long型atol()。<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> str = <span class="string">"123"</span>;</span><br><span class="line"><span class="keyword">int</span> n = atoi(str.c_str());</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;n; </span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="comment">// 123</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>2.2 使用sstream头文件中定义的字符串流对象</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//构造输入字符串流，流的内容初始化为“12”的字符串</span></span><br><span class="line"><span class="function"><span class="built_in">istringstream</span> <span class="title">is</span><span class="params">(<span class="string">"123"</span>)</span></span>;</span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line"><span class="comment">//从is流中读入一个int整数存入i中</span></span><br><span class="line">is &gt;&gt; num;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>redis学习笔记一</title>
    <url>/2020/02/26/redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80/</url>
    <content><![CDATA[<p>记录一下日常用到的常用redis操作。<br><a id="more"></a></p>
<h4 id="一、redis介绍"><a href="#一、redis介绍" class="headerlink" title="一、redis介绍"></a>一、redis介绍</h4><h5 id="Nosql-基本概念"><a href="#Nosql-基本概念" class="headerlink" title="Nosql 基本概念"></a>Nosql 基本概念</h5><p>  redis数据库是一种NoSql，叫非关系型数据库，它的全名Not only sql。<br>  NoSql为了解决高并发、高可用、高可扩展，大数据存储等一系列问题而产生的数据库解决方案。<br>  它不能替代关系型数据库，只能作为关系型数据库的一个良好补充。</p>
<h5 id="Nosql-分类"><a href="#Nosql-分类" class="headerlink" title="Nosql 分类"></a>Nosql 分类</h5><p> 1 列存储（Hbase、Cassandra、Hypertable）<br>  顾名思义，是按列存储数据的。最大的特点是方便存储结构化和半结构化数据，方便做数据压缩，对针对某一列或者某几列的查询有非常大的IO优势。<br> 2 文档存储（MongoDB、CouchDB）<br>  文档存储一般用类似json的格式存储，存储的内容是文档型的。这样也就有机会对某些字段建立索引，实现关系数据库的某些功能。<br> 3 key-value存储（Tokyo Cabinet / Tyrant、Berkeley DB、MemcacheDB、Redis）<br>  可以通过key快速查询到其value。一般来说，存储不管value的格式，照单全收。（Redis包含了其他功能）<br> 4 图存储（Neo4J、FlockDB）<br>  图形关系的最佳存储。使用传统关系数据库来解决的话性能低下，而且设计使用不方便。<br> 5 对象存储（db4o、Versant）<br>  通过类似面向对象语言的语法操作数据库，通过对象的方式存取数据。<br> 6 xml数据库（Berkeley DB XML、BaseX）<br>  高效的存储XML数据，并支持XML的内部查询语法，比如XQuery,Xpath。</p>
<p> Redis是使用c语言开发的一个高性能键值数据库。<br> Redis可以通过一些键值类型来存储数据。<br> 键值类型：<br>  String字符类型<br>  map散列类型<br>  list列表类型<br>  set集合类型<br>  sortedset有序集合类型</p>
<h5 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h5><ul>
<li><p>缓存（数据查询、短连接、新闻内容、商品内容等等）</p>
</li>
<li><p>分布式集群架构中的session分离。</p>
</li>
<li><p>聊天室的在线好友列表。 </p>
</li>
<li><p>任务队列（秒杀、抢购、12306等等） 。</p>
</li>
<li><p>应用排行榜。</p>
</li>
<li><p>网站访问统计。 </p>
</li>
<li><p>数据过期处理（可以精确到毫秒）<br>二、Redis 安装</p>
<p><a href="http://redis.io/" target="_blank" rel="noopener">官网</a>下载<br>linux系统安装：</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Ubuntu安装redis</span></span><br><span class="line"><span class="comment">#安装Redis服务器端</span></span><br><span class="line">sudo apt-get install redis-server</span><br><span class="line"></span><br><span class="line"><span class="comment"># Centos安装</span></span><br><span class="line"><span class="comment"># 1.首先安装epel源</span></span><br><span class="line">yum install epel-release</span><br><span class="line"><span class="comment"># 2.安装redis</span></span><br><span class="line">yum install redis</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 命令启动redis服务</span></span><br><span class="line"><span class="comment"># 启动redis</span></span><br><span class="line">service redis start</span><br><span class="line"><span class="comment"># 停止redis</span></span><br><span class="line">service redis stop</span><br><span class="line"><span class="comment"># 查看redis运行状态</span></span><br><span class="line">service redis status</span><br><span class="line"><span class="comment"># 查看redis进程</span></span><br><span class="line">ps -ef | grep redis</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.设置redis为开机自动启动</span></span><br><span class="line">chkconfig redis on</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.redis-cli进入redis服务</span></span><br><span class="line"><span class="comment"># 进入本机redis</span></span><br><span class="line">redis-cli</span><br><span class="line"><span class="comment"># 列出所有key</span></span><br><span class="line">keys *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6.打开配置文件，修改密码，IP等</span></span><br><span class="line">vi /etc/redis.conf</span><br><span class="line"><span class="comment"># 可以修改端口（默认为6379）</span></span><br><span class="line">port 6179</span><br><span class="line"><span class="comment"># 可以修改密码</span></span><br><span class="line">requirepass 111</span><br><span class="line"><span class="comment"># 修改允许远程登录</span></span><br><span class="line"><span class="comment"># 1.默认只允许本机登录</span></span><br><span class="line"><span class="built_in">bind</span> 127.0.0.1</span><br><span class="line"><span class="comment"># 2.可以指定IP登录（指定ip，多个ip之间使用空格分隔）</span></span><br><span class="line"><span class="built_in">bind</span> 127.0.0.1 192.168.3.3</span><br><span class="line"><span class="comment"># 3.允许所有IP登录（不安全）</span></span><br><span class="line"><span class="built_in">bind</span> 0.0.0.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 7.修改完配置文件后，使配置文件生效</span></span><br><span class="line">redis-server /etc/redis.conf &amp;</span><br><span class="line"><span class="comment"># 停止redis</span></span><br><span class="line">service redis stop</span><br><span class="line"><span class="comment"># 启动redis</span></span><br><span class="line">service redis start</span><br><span class="line"></span><br><span class="line"><span class="comment"># 8.远程登录redis</span></span><br><span class="line">redis-cli -h 127.0.0.1 -p 6379</span><br><span class="line"></span><br><span class="line">systemctl start redis.service    <span class="comment">#启动redis服务</span></span><br><span class="line">systemctl stop redis.service     <span class="comment">#停止redis服务</span></span><br><span class="line">systemctl restart redis.service  <span class="comment">#重新启动服务</span></span><br><span class="line">systemctl status redis.service   <span class="comment">#查看服务当前状态</span></span><br><span class="line">systemctl <span class="built_in">enable</span> redis.service   <span class="comment">#设置开机自启动</span></span><br><span class="line">systemctl <span class="built_in">disable</span> redis.service  <span class="comment">#停止开机自启动</span></span><br></pre></td></tr></table></figure></div>
</li>
</ul>
<h5 id="开源的图形化Redis客户端管理软件"><a href="#开源的图形化Redis客户端管理软件" class="headerlink" title="开源的图形化Redis客户端管理软件"></a>开源的图形化Redis客户端管理软件</h5><ol>
<li><p>Redis Desktop Manager<br> 一款基于Qt5的跨平台Redis桌面管理软件<br> 支持：Windows 7+, Mac OS X 10.10+, Ubuntu 14+<br> 特点：C++ 编写，响应迅速，性能好。但不支持数据库备份与恢复。<br> 项目地址：<a href="https://github.com/uglide/RedisDesktopManager" target="_blank" rel="noopener">https://github.com/uglide/RedisDesktopManager</a></p>
</li>
<li><p>Redis Client<br> 使用Java编写，功能丰富，缺点是性能稍差，网络不好时，会不时断线。<br> 支持：Windows, Mac OS X, Linux<br> 项目地址：<a href="https://github.com/caoxinyu/RedisClient" target="_blank" rel="noopener">https://github.com/caoxinyu/RedisClient</a></p>
<pre><code>https://github.com/caoxinyu/RedisClient/tree/linux
https://github.com/caoxinyu/RedisClient/tree/OSX
</code></pre></li>
<li><p>Redis Studio<br> C++编写的redis管理工具。<br> 支持：仅支持Windows平台，Windows xp+。<br> 项目地址： <a href="https://github.com/cinience/RedisStudio" target="_blank" rel="noopener">https://github.com/cinience/RedisStudio</a></p>
</li>
<li><p>Another Redis DeskTop Manager<br> 一个稳定的Redis桌面管理器，加载大量密钥时它不会崩溃。<br> 支持：Windows, Mac OS X, Linux<br> 项目地址：<a href="https://github.com/qishibo/AnotherRedisDesktopManager" target="_blank" rel="noopener">https://github.com/qishibo/AnotherRedisDesktopManager</a></p>
</li>
</ol>
]]></content>
      <categories>
        <category>DB</category>
      </categories>
      <tags>
        <tag>DB</tag>
      </tags>
  </entry>
  <entry>
    <title>Anaconda更换国内镜像</title>
    <url>/2020/02/16/Anaconda%E6%9B%B4%E6%8D%A2%E5%9B%BD%E5%86%85%E9%95%9C%E5%83%8F/</url>
    <content><![CDATA[<p>由于中国特殊网络环境原因，对境外服务器访问速度受限，Anaconda默认源是境外源，经常遇到下载失败的情况，可以考虑更换国内镜像加快访问！<br><a id="more"></a></p>
<h4 id="1-命令行添加国内镜像"><a href="#1-命令行添加国内镜像" class="headerlink" title="1. 命令行添加国内镜像"></a>1. 命令行添加国内镜像</h4><p>  1.1使用cmd或Windows PowerShell运行如下命令来添加国内镜像！</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="POWERSHELL"><figure class="iseeu highlight /powershell"><table><tr><td class="code"><pre><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/</span><br><span class="line">conda config --set show_channel_urls yes</span><br></pre></td></tr></table></figure></div>
<p><img src="/image/Anaconda/Anaconda-1.png"></p>
<p>  1.2 找到软件并打开<br>  <img src="/image/Anaconda/Anaconda-2.png"><br>  1.3 查看内容是否修改完成<br>  <img src="/image/Anaconda/Anaconda-3.png"></p>
<h4 id="2-打开软件界面修改源"><a href="#2-打开软件界面修改源" class="headerlink" title="2. 打开软件界面修改源"></a>2. 打开软件界面修改源</h4><p>  2.1 找到软件并打开<br>  <img src="/image/Anaconda/Anaconda-2.png"></p>
<p>  2.2 修改响应内容<br>  <img src="/image/Anaconda/Anaconda-5.png"></p>
]]></content>
      <categories>
        <category>Tool</category>
      </categories>
      <tags>
        <tag>Tool</tag>
      </tags>
  </entry>
  <entry>
    <title>redis中SWAPDB使用</title>
    <url>/2020/02/27/redis%E4%B8%ADSWAPDB%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>工作用遇到redis需要生成新的数据，但是想保留老数据，在不改变代码的情况下，可以使用SWAPDB交换两个数据库内容。<br><a id="more"></a></p>
<h4 id="SWAPDB-index-index"><a href="#SWAPDB-index-index" class="headerlink" title="SWAPDB index index"></a>SWAPDB index index</h4><blockquote>
<p>起始版本：4.0.0</p>
</blockquote>
<p>  该命令可以交换同一Redis服务器上的两个DATABASE，可以实现连接某一数据库的连接立即访问到其他DATABASE的数据。<br>  访问交换前其他database的连接也可以访问到该DATABASE的数据。<br>  简单讲解：<br>   SWAPDB 1 3<br>   所有访问1号数据库的连接立刻可以访问到3号数据库的数据。<br>   访问3号数据库的连接立即可以访问1号数据库的数据。</p>
<p>返回值</p>
<blockquote>
<p>SWAPDB执行成功返回OK .</p>
</blockquote>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line"># 例子</span><br><span class="line">SWAPDB 1 3</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>DB</category>
      </categories>
      <tags>
        <tag>DB</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis数据类型</title>
    <url>/2020/03/01/Redis%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<p>主要介绍Redis数据类型。<br><a id="more"></a></p>
<h4 id="redis中key的几条规则："><a href="#redis中key的几条规则：" class="headerlink" title="redis中key的几条规则："></a>redis中key的几条规则：</h4><ol>
<li>redis中key值最好不要太长，key太长不仅消耗内存，而且查找键值的计算成本高。</li>
<li>redis中key太短也不太好，几个字母并不会增加太多空间消耗，太短的键值不太易于阅读。</li>
<li>最好有统一的格式，方便查找和使用。</li>
</ol>
<h4 id="redis中value的数据类型："><a href="#redis中value的数据类型：" class="headerlink" title="redis中value的数据类型："></a>redis中value的数据类型：</h4><ol>
<li>二进制安全的字符串。</li>
<li>Lists: 有序且可重复的字符串元素集合，类似链表（linked lists）。</li>
<li>Sets: 不重复且无序的字符串元素集合。</li>
<li>Sorted sets,与Sets类似，但是每个字符串元素都关联到一个叫score浮动数值（floating number value），元素通过score进行着排序，它是可以检索的一系列元素。</li>
<li>Hashes,由field和value组成的map。field和value都是字符串的。类似Ruby、Python中的hashes。</li>
<li>Bit arrays (或者说 simply bitmaps): 通过特殊的命令，你可以将 String 值当作一系列 bits 处理。可以设置和清除单独的 bits，数出所有设为 1 的 bits 的数量，找到最前的被设为 1 或 0 的 bit。</li>
<li>HyperLogLogs: 这是被用于估计一个 set 中元素数量的概率性的数据结构。</li>
</ol>
<h4 id="String-类型"><a href="#String-类型" class="headerlink" title="String 类型"></a>String 类型</h4><p> 值可以是任何种类的字符串（包括二进制数据），值的长度不能超过512 MB。<br> 例如你可以在一个键下保存一副jpeg图片。</p>
<ul>
<li><p>赋值 set key value</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set myname jack</span><br><span class="line">OK</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>取值 get key</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; get myname</span><br><span class="line">&quot;jack&quot;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>取值并赋值 getset key value</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; getset myname jacker</span><br><span class="line">&quot;jack&quot;</span><br><span class="line">127.0.0.1:6379&gt; get myname</span><br><span class="line">&quot;jacker&quot;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>设置获取多个键值 mset key value [key value…] mget key [key…]</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; mset key1 value1 key2 value2 key3 value3</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; mget key1 key2</span><br><span class="line">1) &quot;value1&quot;</span><br><span class="line">2) &quot;value2&quot;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>查询 exists key<br>EXISTS命令返回1或0标识给定key的值存在或不存在。</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; exists myname</span><br><span class="line">(integer) 1</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>删除 del key<br>DEL命令返回1或0标识值是被删除(值存在)或没被删除(key对应的值不存在)。</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; del myname</span><br><span class="line">(integer) 1</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>查询值的存储类型 type key<br>TYPE命令可以返回key对应的值的存储类型。</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; type myname</span><br><span class="line">string</span><br></pre></td></tr></table></figure></div></li>
</ul>
]]></content>
      <categories>
        <category>DB</category>
      </categories>
      <tags>
        <tag>DB</tag>
      </tags>
  </entry>
  <entry>
    <title>crontab详细介绍</title>
    <url>/2020/03/07/crontab%E8%AF%A6%E7%BB%86%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<p>在linux和unix内核系统中经常用到的定时任务，因为经常会用到，这里做一下总结。<br><a id="more"></a><br>crontab命令常见于Unix或Linux内核的操作系统之中，用于设置周期性执行的指令。<br>Linux系统中任务调度主要分为以下两类：</p>
<ol>
<li>系统执行的工作：系统周期性所要执行的工作，如备份系统数据、清理缓存。</li>
<li>个人执行的工作：用户定期要做的工作，如每十分钟去爬取一次数据，每天去更新一下数据。</li>
</ol>
<h4 id="一、和crontab有关的文件介绍"><a href="#一、和crontab有关的文件介绍" class="headerlink" title="一、和crontab有关的文件介绍"></a>一、和crontab有关的文件介绍</h4><p> 1./etc/crontab文件<br>  系统调度的任务一般存放在/etc/crontab这个文件下，里面存放了一些系统运行的调度程序，内容如下：<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="code"><pre><span class="line">SHELL=/bin/bash</span><br><span class="line">PATH=/sbin:/bin:/usr/sbin:/usr/bin</span><br><span class="line">MAILTO=root</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> For details see man 4 crontabs</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Example of job definition:</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> .---------------- minute (0 - 59)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> |  .------------- hour (0 - 23)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> |  |  .---------- day of month (1 - 31)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> |  |  |  |  |</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> *  *  *  *  * user-name  <span class="built_in">command</span> to be executed</span></span><br></pre></td></tr></table></figure></div></p>
<p> 2./etc/cron.deny文件<br>  指定不能使用crontab 命令的用户<br> 3./etc/cron.allow文件<br>  指定能使用crontab的用户<br> 注：<br>  如果两个文件同时存在，那么/etc/cron.allow 优先。<br>  如果两个文件都不存在，那么只有root用户可以安排作业。</p>
<h4 id="二、-crontab命令语法及其各个参数含义"><a href="#二、-crontab命令语法及其各个参数含义" class="headerlink" title="二、.crontab命令语法及其各个参数含义"></a>二、.crontab命令语法及其各个参数含义</h4><ol>
<li><p>crontab语法</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="code"><pre><span class="line">crontab [-e [UserName]|-l [UserName]|-r [UserName]|-v [UserName]|File ]</span><br></pre></td></tr></table></figure></div>
<p>注：crontab 是用来让使用者在固定时间或固定间隔执行程序，也就是类似使用者的时程表。<br>-u user 是指设定指定 user 的时程表，这个前提是你必须要有其权限(比如说是 root)才能够指定他人的时程表。如果不使用 -u user 的话，就是表示设定自己的时程表。<br>各个参数说明：</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="code"><pre><span class="line">-e [UserName]: 执行文字编辑器来设定时程表，内定的文字编辑器是 vi</span><br><span class="line">-r [UserName]: 删除目前的时程表</span><br><span class="line">-l [UserName]: 列出目前的时程表</span><br><span class="line">-v [UserName]:列出用户cron作业的状态</span><br></pre></td></tr></table></figure></div>
</li>
</ol>
<h4 id="三、crontab格式"><a href="#三、crontab格式" class="headerlink" title="三、crontab格式"></a>三、crontab格式</h4><p> 1.创建一个任务调度<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="code"><pre><span class="line">[root@liuxin ~]# crontab -e</span><br><span class="line"><span class="meta">#</span><span class="bash"> 默认情况下，系统会编辑当前登录用户的crontab命令集合。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 编辑其他用户的命令集合，使用如下命令:</span></span><br><span class="line">[root@liuxin ~]# crontab -u username -e</span><br></pre></td></tr></table></figure></div></p>
<ol start="2">
<li><p>查看Crontab命令集合</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="code"><pre><span class="line">[root@liuxin ~]# crontab -l</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看其他用户的Crontab命令集合</span></span><br><span class="line">[root@liuxin ~]# crontab -u username -l</span><br></pre></td></tr></table></figure></div>
<p>crontab调度命令格式如下:</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="code"><pre><span class="line">* * * * * command path　</span><br><span class="line">// 前五个字段可以取整数值，指定何时开始工作，第六个域是字符串，即命令字段，其中包括了crontab调度执行的命令。 各个字段之间用spaces和tabs分割。</span><br></pre></td></tr></table></figure></div>
<p>调度命令的规则：</p>
</li>
</ol>
<table>
<thead>
<tr>
<th>字段名称</th>
<th>说明</th>
<th>取值范围</th>
</tr>
</thead>
<tbody>
<tr>
<td>分钟</td>
<td>每小时的第几分钟执行</td>
<td>0-59</td>
</tr>
<tr>
<td>小时</td>
<td>每日的第几个小时执行</td>
<td>0-23</td>
</tr>
<tr>
<td>日期</td>
<td>每月的第几天执行</td>
<td>1-31</td>
</tr>
<tr>
<td>月历</td>
<td>每年的第几月执行</td>
<td>1-12</td>
</tr>
<tr>
<td>星期</td>
<td>每周的第几天执行</td>
<td>0-6</td>
</tr>
<tr>
<td>命令名称</td>
<td>欲执行的命令及参数</td>
</tr>
</tbody>
</table>
<p>  crontab命令中的一些常用特殊符号：</p>
<table>
<thead>
<tr>
<th>符号</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>*</td>
<td>表示所有可能的值</td>
</tr>
<tr>
<td>,</td>
<td>表示指定一个列表范围</td>
</tr>
<tr>
<td>－</td>
<td>表示一段时间范围，如在小时阶段： 1-5，就表示1点到5点</td>
</tr>
<tr>
<td>/n</td>
<td>表示指定时间的间隔频率，如在小时阶段，*/1, 表示每1小时执行一次。也可写成1-23/1.</td>
</tr>
</tbody>
</table>
<p>  例：</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1.每天 02:00 执行任务</span></span><br><span class="line">0 2 * * * /bin/sh start.sh</span><br><span class="line"><span class="meta">#</span><span class="bash"> 每天凌晨过一分钟。一般用来进行备份的时间，因为此时系统负载不大。</span></span><br><span class="line">0 * * * /bin/sh start.sh</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2.每天 5:00和17:00执行任务</span></span><br><span class="line">0 5,17 * * * /bin/sh start.sh</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 3.每分钟执行一次任务</span></span><br><span class="line">* * * * *  /bin/sh start.sh</span><br><span class="line"><span class="meta">#</span><span class="bash"> 每隔一分钟，将系统的时间写入到/home目录下的date.txt文件里面</span></span><br><span class="line">* * * * * date &gt;&gt; /home/date.txt</span><br><span class="line"><span class="meta">#</span><span class="bash"> &gt;&gt; 命令表示将结果累加到文件后面 &gt; 命令则表示将结果覆盖文件</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 4.每周日 17:00 执行任务</span></span><br><span class="line">0 17 * * sun  /bin/sh start.sh</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 5.每 10min 执行一次任务</span></span><br><span class="line">*/10 * * * * /bin/sh start.sh</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 6.在特定的某几个月执行任务</span></span><br><span class="line">* * * jan,may,aug * /bin/sh start.sh</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 7.在每周五、周日的17点执行任务</span></span><br><span class="line">0 17 * * sun,fri /bin/sh start.sh</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 8.在某个月的第一个周日执行任务</span></span><br><span class="line">0 2 * * sun  /bin/sh start.sh</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 9.每四个小时执行一个任务</span></span><br><span class="line">0 */4 * * * /bin/sh start.sh</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 10.每周一、周日执行任务</span></span><br><span class="line">0 4,17 * * sun,mon /bin/sh start.sh</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 11.每个30秒执行一次任务</span></span><br><span class="line">我们没有办法直接通过上诉类似的例子去执行，因为最小的是1min。</span><br><span class="line">但是我们可以通过如下的方法。</span><br><span class="line">* * * * * /bin/sh start.sh</span><br><span class="line">* * * * *  sleep 30; /bin/sh start.sh</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 12.多个任务在一条命令中配置</span></span><br><span class="line">* * * * * /bin/sh start1.sh; /bin/sh start2.sh</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 13.每年执行一次任务</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> @yearly 类似于“0 0 1 1 *”。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 它会在每年的第一分钟内执行。</span></span><br><span class="line">@yearly /scripts/script.sh</span><br><span class="line">0 0 1 1 * /scripts/script.sh</span><br><span class="line"></span><br><span class="line">14.系统重启时执行</span><br><span class="line">@reboot /scripts/script.sh</span><br></pre></td></tr></table></figure></div>
<h4 id="四、crontab系统命令"><a href="#四、crontab系统命令" class="headerlink" title="四、crontab系统命令"></a>四、crontab系统命令</h4><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 启动服务</span></span><br><span class="line">service crond start</span><br><span class="line"><span class="meta">#</span><span class="bash"> 关闭服务</span></span><br><span class="line">service crond stop</span><br><span class="line"><span class="meta">#</span><span class="bash"> 重启服务</span></span><br><span class="line">service crond restart</span><br><span class="line"><span class="meta">#</span><span class="bash"> 重新载入配置</span></span><br><span class="line">service crond reload</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看服务状态</span></span><br><span class="line">service crond status</span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动cron进程</span></span><br><span class="line">/etc/init.d/crond start</span><br><span class="line"><span class="meta">#</span><span class="bash"> 开机就启动cron进程的设置命令：</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 方法一：</span></span><br><span class="line">chkconfig --add crond</span><br><span class="line"><span class="meta">#</span><span class="bash"> 方法二：</span></span><br><span class="line">rc-update add vixie-cron default</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看crontab是否执行的日志</span></span><br><span class="line">tail -f /var/log/cron</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>Tool</category>
      </categories>
      <tags>
        <tag>Tool</tag>
      </tags>
  </entry>
  <entry>
    <title>CLion+MinGW配置报错解决方案</title>
    <url>/2020/03/15/CLion-MinGW%E9%85%8D%E7%BD%AE%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<p>在学习C/C++过程中，使用了Clion工具，安装后配置了MinGW直接报错了，无法正常运行，后来在jetbrains网站中找到了全英文的解决方案，记录一下，方便以后查看！<br><a id="more"></a></p>
<h4 id="一、报错信息"><a href="#一、报错信息" class="headerlink" title="一、报错信息"></a>一、报错信息</h4><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">CMake Error at D:/Develop/JetBrains/CLion/bin/cmake/win/share/cmake-3.15/Modules/CMakeTestCCompiler.cmake:60 (message):</span><br><span class="line">  The C compiler</span><br><span class="line"></span><br><span class="line">    &quot;C:/Soft/mingw64/bin/gcc.exe&quot;</span><br><span class="line"></span><br><span class="line">  is not able to compile a simple test program.</span><br><span class="line"></span><br><span class="line">  It fails with the following output:</span><br><span class="line"></span><br><span class="line">    Change Dir: C:/Users/鏂版尝/CLionProjects/test/cmake-build-debug/CMakeFiles/CMakeTmp</span><br><span class="line">    </span><br><span class="line">    Run Build Command(s):C:/Soft/mingw64/bin/mingw32-make.exe cmTC_52a6a/fast &amp;&amp; C:/Soft/mingw64/bin/mingw32-make.exe -f CMakeFiles\cmTC_52a6a.dir\build.make CMakeFiles/cmTC_52a6a.dir/build</span><br><span class="line">    mingw32-make.exe[1]: Entering directory &apos;C:/Users/鏂版尝/CLionProjects/test/cmake-build-debug/CMakeFiles/CMakeTmp&apos;</span><br><span class="line">    Building C object CMakeFiles/cmTC_52a6a.dir/testCCompiler.c.obj</span><br><span class="line">    C:\Soft\mingw64\bin\gcc.exe    -o CMakeFiles\cmTC_52a6a.dir\testCCompiler.c.obj   -c C:\Users\閺傜増灏漒CLionProjects\test\cmake-build-debug\CMakeFiles\CMakeTmp\testCCompiler.c</span><br><span class="line">    gcc.exe: error: C:\Users\閺傜増灏漒CLionProjects\test\cmake-build-debug\CMakeFiles\CMakeTmp\testCCompiler.c: No such file or directory</span><br><span class="line">    gcc.exe: fatal error: no input files</span><br><span class="line">    compilation terminated.</span><br><span class="line">    mingw32-make.exe[1]: *** [CMakeFiles\cmTC_52a6a.dir\build.make:65: CMakeFiles/cmTC_52a6a.dir/testCCompiler.c.obj] Error 1</span><br><span class="line">    mingw32-make.exe[1]: Leaving directory &apos;C:/Users/鏂版尝/CLionProjects/test/cmake-build-debug/CMakeFiles/CMakeTmp&apos;</span><br><span class="line">    mingw32-make.exe: *** [Makefile:120: cmTC_52a6a/fast] Error 2</span><br></pre></td></tr></table></figure></div>
<h4 id="二、问题原因"><a href="#二、问题原因" class="headerlink" title="二、问题原因"></a>二、问题原因</h4><p>  并不是CLion的问题，是因为使用CMake + MinGW的原因，CMake + MinGW不支持非拉丁符号。</p>
<h4 id="三、解决方案"><a href="#三、解决方案" class="headerlink" title="三、解决方案"></a>三、解决方案</h4><ol>
<li>首先创建一个文件夹，所处的路径不能有非拉丁符号（例：D:\tmp）。</li>
<li>在CLion中，选择Help–&gt;Edit Custom VM options…–&gt;create。</li>
<li>在打开的文件中最后一行添加指定内容：-Djava.io.tmpdir=&lt;path_to_temp_folder&gt; (例： -Djava.io.tmpdir=D:/tmp)。</li>
<li>在CLion中，选择File–&gt;Save All。</li>
<li>重启CLion</li>
</ol>
<p>注：<br>  如果你的项目路径有非拉丁符号，要将生成目录移动到全部是拉丁符号的路径下。两种方案：</p>
<ol>
<li>在CLion中修改File–&gt;Settings–&gt;Build, Execution, Deployment–&gt;CMake–&gt;Generation path。</li>
<li>将项目放到全部是拉丁符号的路径下。</li>
</ol>
<p><a href="https://intellij-support.jetbrains.com/hc/en-us/community/posts/360003475400-CLion-MinGW-Test-CMake-run-finished-with-errors" target="_blank" rel="noopener">参考链接</a></p>
]]></content>
      <categories>
        <category>Tool</category>
      </categories>
      <tags>
        <tag>Tool</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows下修改hosts并立即生效</title>
    <url>/2020/03/16/Windows%E4%B8%8B%E4%BF%AE%E6%94%B9hosts%E5%B9%B6%E7%AB%8B%E5%8D%B3%E7%94%9F%E6%95%88/</url>
    <content><![CDATA[<p>因为中国特殊的网络环境，有时需要特殊方法来访问国外的网站，记录一下修改方式，并不需要重启可以直接生效的方案！<br><a id="more"></a></p>
<h4 id="一、进入hosts文件所在目录"><a href="#一、进入hosts文件所在目录" class="headerlink" title="一、进入hosts文件所在目录"></a>一、进入hosts文件所在目录</h4><p>  Win+R-&gt;C:\windows\System32\drivers\etc</p>
<h4 id="二、编辑hosts文件"><a href="#二、编辑hosts文件" class="headerlink" title="二、编辑hosts文件"></a>二、编辑hosts文件</h4><p>  使用Notepad++或者记事本以管理员身份打开hosts</p>
<h4 id="三、hosts文件说明"><a href="#三、hosts文件说明" class="headerlink" title="三、hosts文件说明"></a>三、hosts文件说明</h4><p>  按照hosts文件所带例子进行修改。<br>  例：<br>  127.0.0.1 abc.com<br>  前面表示IP，后面表示域名。<br>  打开abc .com这个网址将解析到127.0.0.1，ip地址与网址间至少有一空格，当然建议通过按[Tab]键来编辑，即美观又不容易编写失误。</p>
<h4 id="四、hosts具体作用"><a href="#四、hosts具体作用" class="headerlink" title="四、hosts具体作用"></a>四、hosts具体作用</h4><h6 id="1、加快域名解析"><a href="#1、加快域名解析" class="headerlink" title="1、加快域名解析"></a>1、加快域名解析</h6><p>　　对于要经常访问的网站，我们可以通过在Hosts中配置域名和IP的映射关系，提高域名解析速度。由于有了映射关系，当我们输入域名计算机就能很快解析出IP，而不用请求网络上的DNS服务器。</p>
<h6 id="2、方便局域网用户"><a href="#2、方便局域网用户" class="headerlink" title="2、方便局域网用户"></a>2、方便局域网用户</h6><p>　　在很多单位的局域网中，会有服务器提供给用户使用。但由于局域网中一般很少架设DNS服务器，访问这些服务器时，要输入难记的IP地址。这对不少人来说相当麻烦。可以分别给这些服务器取个容易记住的名字，然后在Hosts中建立IP映射，这样以后访问的时候，只要输入这个服务器的名字就行了。</p>
<h6 id="3、屏蔽网站（域名重定向）"><a href="#3、屏蔽网站（域名重定向）" class="headerlink" title="3、屏蔽网站（域名重定向）"></a>3、屏蔽网站（域名重定向）</h6><p>　　有很多网站不经过用户同意就将各种各样的插件安装到你的计算机中，其中有些说不定就是木马或病毒。对于这些网站我们可以利用Hosts把该网站的域名映射到错误的IP或本地计算机的IP，这样就不用访问了。在WINDOWS系统中，约定 127.0.0.1 为本地计算机的IP地址, 0.0.0.0是错误的IP地址。<br>　　如果，我们在Hosts中，写入以下内容：<br>　　127.0.0.1要屏蔽的网站A的域名<br>　　0.0.0.0要屏蔽的网站B的域名<br>　　这样，计算机解析域名A和 B时，就解析到本机IP或错误的IP，达到了屏蔽网站A 和B的目的。</p>
<h6 id="4、顺利连接系统"><a href="#4、顺利连接系统" class="headerlink" title="4、顺利连接系统"></a>4、顺利连接系统</h6><p>　　对于Lotus的服务器和一些数据库服务器，在访问时如果直接输入IP地址那是不能访问的，只能输入服务器名才能访问。那么我们配置好Hosts文件，这样输入服务器名就能顺利连接了。</p>
<h6 id="5-虚拟域名"><a href="#5-虚拟域名" class="headerlink" title="5.虚拟域名"></a>5.虚拟域名</h6><p>　　很多时候，网站建设者需要把”软环境“搭建好，再进行上传调试。但类似于邮件服务，则需要使用域名来辅助调试，这时就可以将本地 IP 地址与一个”虚拟域名“做地址指向，就可以达到要求的效果，且无需花费。如：<br>　　127.0.0.1 网站域名<br>　　之后在浏览器地址栏中输入对应的网站域名即可。</p>
<h4 id="五、不重启修改hosts生效"><a href="#五、不重启修改hosts生效" class="headerlink" title="五、不重启修改hosts生效"></a>五、不重启修改hosts生效</h4><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line"># 在cmd中输入如下命令</span><br><span class="line">ipconfig /flushdns</span><br></pre></td></tr></table></figure></div>
<p><a href="https://baike.baidu.com/item/hosts/10474546?fr=aladdin" target="_blank" rel="noopener">参考链接</a></p>
]]></content>
      <categories>
        <category>Tool</category>
      </categories>
      <tags>
        <tag>Tool</tag>
      </tags>
  </entry>
  <entry>
    <title>Python中pickle用法</title>
    <url>/2020/03/12/Python%E4%B8%ADpickle%E7%94%A8%E6%B3%95/</url>
    <content><![CDATA[<p>pickle 实现了对一个 Python 对象结构的二进制序列化和反序列化。<br><a id="more"></a><br>一、pickling和unpickling<br>pickling将 Python 对象及其所拥有的层次结构转化为一个字节流的过程，而 unpickling是相反的操作。<br>为了避免混乱，此处采用术语封存 (pickling)和解封 (unpickling)。<br>注：<br> pickle 模块是不安全的。你只应该对你信任的数据进行unpickle操作。<br> 构建恶意的 pickle 数据来在解封时<strong>执行任意代码</strong>是可能的。绝对不要对不信任来源的数据和可能被篡改过的数据进行解封。<br> 考虑使用 hmac 来对数据进行签名，确保数据没有被篡改。<br> 在处理不信任数据时，更安全的序列化格式如 json 可能更为适合。</p>
<p>二、与其他模块关系</p>
<ol>
<li><p>与 marshal 间的关系：<br>marshal是一个更原始的序列化模块，但pickle 应该在序列化 Python对象时首选。marshal主要是为了支持 Python 的 .pyc 文件。</p>
<p>pickle模块与marshal模块不同点：</p>
<ol>
<li>pickle 模块会跟踪已被序列化的对象，所以该对象之后再次被引用时不会再次被序列化。marshal 不会这么做。</li>
<li>序列化的类及其实例不能使用marshal。pickle能够透明地存储并保存类实例，然而此时类定义必须能够从与被存储时相同的模块被引入。</li>
<li>marshal不保证数据能移植到不同的 Python 版本，marshal主要任务是支持 <code>.pyc</code> 文件，必要时会以破坏向后兼容的方式更改这种序列化格式，为此 Python 的实现者保留了更改格式的权利。只要 pickle 协议合适，pickle可以在不同版本的 Python 中实现兼容。若pickle在Python 2与Python 3之间使用，封存和解封的代码在 2 和 3 之间是不同的。</li>
</ol>
</li>
<li><p>与 json 间的比较：<br>Pickle 协议和 JSON (JavaScript Object Notation) 本质的不同。</p>
<ol>
<li>JSON 是一个文本序列化格式（输出 unicode 文本，但大多数情况为 utf-8 编码），而 pickle 是一个二进制序列化格式。</li>
<li>JSON 可阅读，而 pickle 无法阅读。</li>
<li>JSON被大部分语言支持，而pickle则是Python专用的。</li>
<li>JSON 只能表示 Python 内置类型的子集，不能表示自定义的类， pickle 可以表示大量的 Python 数据类型（合理使用 Python 对象内省功能自动地表示大多数类型，复杂情况可以通过实现 specific object APIs）。</li>
<li>pickle对不信任文件进行反序列化可能出现代码执行漏洞，JSON对不信任文件进行反序列化的操作本身不会造成任意代码执行漏洞。</li>
</ol>
</li>
</ol>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>查看Linux版本信息命令</title>
    <url>/2020/03/18/%E6%9F%A5%E7%9C%8BLinux%E7%89%88%E6%9C%AC%E4%BF%A1%E6%81%AF%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p>有时需要查看linux服务器系统版本，记录一下查看方式！<br><a id="more"></a></p>
<h4 id="一、cat-proc-version"><a href="#一、cat-proc-version" class="headerlink" title="一、cat /proc/version"></a>一、cat /proc/version</h4><p>这个命令适用于所有的linux。</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">[root@ecs ~]<span class="comment"># cat /proc/version</span></span><br><span class="line">Linux version 3.10.0-1062.1.1.el7.x86_64 (mockbuild@kbuilder.bsys.centos.org) (gcc version 4.8.5 20150623 (Red Hat 4.8.5-39) (GCC) ) <span class="comment">#1 SMP Fri Sep 13 22:55:44 UTC 2019</span></span><br></pre></td></tr></table></figure></div>
<h4 id="二、uname-a"><a href="#二、uname-a" class="headerlink" title="二、uname -a"></a>二、uname -a</h4><p>这个命令适用于所有的linux。</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">[root@ecs ~]<span class="comment"># uname -a</span></span><br><span class="line">Linux ecs-s6-medium-2-linux-20191114090029 3.10.0-1062.1.1.el7.x86_64 <span class="comment">#1 SMP Fri Sep 13 22:55:44 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux</span></span><br></pre></td></tr></table></figure></div>
<h4 id="三、cat-etc-issue"><a href="#三、cat-etc-issue" class="headerlink" title="三、cat /etc/issue"></a>三、cat /etc/issue</h4><p>这个命令适用于所有的linux。</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">[root@ecs ~]<span class="comment"># cat /etc/issue</span></span><br><span class="line">\S</span><br><span class="line">Kernel \r on an \m</span><br></pre></td></tr></table></figure></div>
<h4 id="五、lsb-release-a"><a href="#五、lsb-release-a" class="headerlink" title="五、lsb_release -a"></a>五、lsb_release -a</h4><p>这个命令适用于所有的linux。</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">[root@ecs ~]<span class="comment"># lsb_release -a</span></span><br><span class="line">LSB Version:    :core-4.1-amd64:core-4.1-noarch</span><br><span class="line">Distributor ID: CentOS</span><br><span class="line">Description:    CentOS Linux release 7.5.1804 (Core)</span><br><span class="line">Release:        7.5.1804</span><br><span class="line">Codename:       Core</span><br></pre></td></tr></table></figure></div>
<h4 id="六、cat-etc-redhat-release"><a href="#六、cat-etc-redhat-release" class="headerlink" title="六、cat /etc/redhat-release"></a>六、cat /etc/redhat-release</h4><p>可以看到具体的版本号,只对Redhat Linux有效</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">[root@ecs ~]<span class="comment"># cat /etc/redhat-release</span></span><br><span class="line">CentOS Linux release 7.5.1804 (Core)</span><br></pre></td></tr></table></figure></div>
<h4 id="七、rpm-q-redhat-release"><a href="#七、rpm-q-redhat-release" class="headerlink" title="七、rpm -q redhat-release"></a>七、rpm -q redhat-release</h4><p>看到release版本号，和实际的版本之间存在一定的对应关系</p>
<p>对应关系：<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">redhat-release-3AS-1 -&gt; Redhat Enterprise Linux AS 3</span><br><span class="line">redhat-release-3AS-7.4 -&gt; Redhat Enterprise Linux AS 3 Update 4</span><br><span class="line">redhat-release-4AS-2 -&gt; Redhat Enterprise Linux AS 4</span><br><span class="line">redhat-release-4AS-2.4 -&gt; Redhat Enterprise Linux AS 4 Update 1</span><br><span class="line">redhat-release-4AS-3 -&gt; Redhat Enterprise Linux AS 4 Update 2</span><br><span class="line">redhat-release-4AS-4.1 -&gt; Redhat Enterprise Linux AS 4 Update 3</span><br><span class="line">redhat-release-4AS-5.5 -&gt; Redhat Enterprise Linux AS 4 Update 4</span><br></pre></td></tr></table></figure></div></p>
]]></content>
      <categories>
        <category>Tool</category>
      </categories>
      <tags>
        <tag>Tool</tag>
      </tags>
  </entry>
  <entry>
    <title>JMeter服务器性能资源监控</title>
    <url>/2020/03/21/JMeter%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%80%A7%E8%83%BD%E8%B5%84%E6%BA%90%E7%9B%91%E6%8E%A7/</url>
    <content><![CDATA[<p>简单介绍一下jmeter压测时如何对服务器性能监控。<br><a id="more"></a></p>
<h4 id="安装插件plugins-manager"><a href="#安装插件plugins-manager" class="headerlink" title="安装插件plugins-manager"></a>安装插件plugins-manager</h4><p><a href="**https://jmeter-plugins.org/install/Install**">点击下载plugins-manager</a>，将下载后文件放置到JMeter文件的lib/ext目录下，重启JMeter。</p>
<p><img src="/image/JMeter/JMeter-0.png"><br><img src="/image/JMeter/JMeter-1.png"></p>
<h4 id="安装PerfMon插件"><a href="#安装PerfMon插件" class="headerlink" title="安装PerfMon插件"></a>安装PerfMon插件</h4><p><img src="/image/JMeter/JMeter-2.png"></p>
<h4 id="下载ServerAgent"><a href="#下载ServerAgent" class="headerlink" title="下载ServerAgent"></a>下载ServerAgent</h4><ol>
<li>去github的<a href="https://github.com/undera/perfmon-agent" target="_blank" rel="noopener">perfmon-agent</a>项目中下载</li>
</ol>
<p><img src="/image/JMeter/JMeter-3.png"></p>
<ol start="2">
<li><p>将压缩包上传至服务器，服务器需安装jdk，版本要在jdk8以上。</p>
</li>
<li><p>解压压缩包，进入目录后执行chmod 777 startAgent.sh</p>
</li>
<li><p>执行./startAgent.sh，默认端口为4444</p>
</li>
</ol>
<p>若端口冲突，需修改端口，命令为：</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 第一种命令</span></span><br><span class="line">./startAgent.sh --udp-port 7777 --tcp-port 7777</span><br><span class="line"><span class="comment"># 第二种命令</span></span><br><span class="line">java -jar ./CMDRunner.jar --tool PerfMonAgent --udp-port 7879 --tcp-port 7879</span><br></pre></td></tr></table></figure></div>
<p>校验ServerAgent是否可以使用</p>
<p>Windows系统进入cmd命令行，输入如下内容</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="code"><pre><span class="line">telnet 部署服务器外网IP 启动端口号</span><br></pre></td></tr></table></figure></div>
<p>出现如下提示：</p>
<p><em>C:\Users\xb&gt;telent 129.204.169.23 8000</em><br><em>‘telent’ 不是内部或外部命令，也不是可运行的程序</em><br><em>或批处理文件。</em></p>
<p>解决方案：</p>
<ol>
<li>“开始菜单” –&gt; 右键 –&gt; “应用和功能” –&gt; “程序和功能（右上角）”</li>
</ol>
<p><img src="/image/JMeter/JMeter-7.png"></p>
<ol start="2">
<li>“启动或关闭Windows功能” –&gt; 勾上”Telnet Client” –&gt; 确定。</li>
</ol>
<p><img src="/image/JMeter/JMeter-8.png"></p>
<h4 id="在JMeter中添加监听器"><a href="#在JMeter中添加监听器" class="headerlink" title="在JMeter中添加监听器"></a>在JMeter中添加监听器</h4><ol>
<li>添加监听器jp@gc - PerfMon Metrics Collector<br><img src="/image/JMeter/JMeter-5.png"></li>
<li>配置要监听的资源<br><img src="/image/JMeter/JMeter-6.png"></li>
</ol>
]]></content>
      <categories>
        <category>测试</category>
      </categories>
      <tags>
        <tag>测试</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS安装Nmon</title>
    <url>/2020/03/23/CentOS%E5%AE%89%E8%A3%85Nmon/</url>
    <content><![CDATA[<p>Nmon是IBM提供的免费的在AIX与各种Linux操作系统上广泛使用的监控与分析工具。<br><a id="more"></a><br>Nmon 工具是 IBM 提供的免费的在AIX与各种Linux操作系统上广泛使用的监控与分析工具。<br>该工具可将服务器的系统资源耗用情况收集起来并输出一个特定的文件,并可利用 excel 分析工具nmonanalyser进行数据的统计分析。<br>nmon运行不会占用过多的系统资源，通常情况下CPU利用率不会超过2%。</p>
<h4 id="Centos安装Nmon"><a href="#Centos安装Nmon" class="headerlink" title="Centos安装Nmon"></a>Centos安装Nmon</h4><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">yum -y install nmon</span><br></pre></td></tr></table></figure></div>
<h4 id="Nmon直接使用"><a href="#Nmon直接使用" class="headerlink" title="Nmon直接使用"></a>Nmon直接使用</h4><ol>
<li>终端直接输入nmon进入界面，界面如下：<br><img src="/image/Nmon/Nmon-1.png"></li>
<li>根据界面提示使用相应命令<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">q : 停止并退出 Nmon</span><br><span class="line">h : 查看帮助</span><br><span class="line">c : 查看 CPU 统计数据</span><br><span class="line">m : 查看内存统计数据</span><br><span class="line">d : 查看硬盘统计数据</span><br><span class="line">k : 查看内核统计数据</span><br><span class="line">n : 查看网络统计数据</span><br><span class="line">N : 查看 NFS 统计数据</span><br><span class="line">j : 查看文件系统统计数据</span><br><span class="line">t : 查看高耗进程</span><br><span class="line">V : 查看虚拟内存统计数据</span><br><span class="line">v : 详细模式</span><br></pre></td></tr></table></figure></div>
</li>
</ol>
<h4 id="Nmon生成-nmon报告命令"><a href="#Nmon生成-nmon报告命令" class="headerlink" title="Nmon生成.nmon报告命令"></a>Nmon生成.nmon报告命令</h4><p>参数解析：<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">-f 参数:生成文件,文件名=主机名+当前时间.nmon</span><br><span class="line">-T 参数:显示资源占有率较高的进程</span><br><span class="line">-s 参数:-s 10表示每隔10秒采集一次数据</span><br><span class="line">-c 参数:-c 10表示总共采集十次数据</span><br><span class="line">-m 参数:指定文件保存目录</span><br></pre></td></tr></table></figure></div></p>
<p>命令如下：<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 每5秒采集一次，共采集12次，实际采集1分钟的数据。</span></span><br><span class="line">nmon -f -s 5 -c 12 -m /home/lxb/</span><br></pre></td></tr></table></figure></div></p>
<p>中途需要关闭Nmon，需获取Nmon对应的pid：</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">[root@ecs ~]<span class="comment"># nmon -f -s 5 -c 12 -m /root/</span></span><br><span class="line">[root@ecs ~]<span class="comment"># ps -ef | grep nmon</span></span><br><span class="line">root     10747     1  0 21:06 pts/0    00:00:00 nmon -f -s 5 -c 12 -m /root/</span><br><span class="line">root     10840 10511  0 21:06 pts/0    00:00:00 grep --color=auto nmon</span><br><span class="line">[root@ecs ~]<span class="comment"># kill -9 10747</span></span><br><span class="line">[root@ecs ~]<span class="comment"># ps -ef | grep nmon</span></span><br><span class="line">root     10850 10511  0 21:06 pts/0    00:00:00 grep --color=auto nmon</span><br><span class="line">[root@ecs ~]<span class="comment">#</span></span><br></pre></td></tr></table></figure></div>
<h4 id="数据分析"><a href="#数据分析" class="headerlink" title="数据分析"></a>数据分析</h4><h5 id="一、使用nmon-analyser生成图标"><a href="#一、使用nmon-analyser生成图标" class="headerlink" title="一、使用nmon analyser生成图标"></a>一、使用<strong>nmon analyser</strong>生成图标</h5><ol>
<li>下载<strong>nmon analyser</strong></li>
</ol>
<p>nmon analyser可以把nmon采集的数据生成直观的Excel表，nmon analyser下载网址：</p>
<p><a href="http://nmon.sourceforge.net/pmwiki.php?n=Site.Nmon-Analyser" target="_blank" rel="noopener">http://nmon.sourceforge.net/pmwiki.php?n=Site.Nmon-Analyser</a></p>
<p><img src="/image/Nmon/Nmon-2.png"></p>
<ol start="2">
<li><strong>打开nmon analyser</strong></li>
</ol>
<p><img src="/image/Nmon/Nmon-3.png"></p>
<p> <strong>注：</strong>因为我用的个人免费版WPS（10.1），没有包含宏，需要安装宏插件(VBA for WPS)，Excel是自带宏插件的，如果宏不能运行，需要做以下操作：<br>工具 -&gt; 宏 -&gt; 安全性 -&gt; 中，然后再打开文件并允许运行宏。</p>
<ol start="3">
<li><strong>下载VBA for WPS</strong></li>
</ol>
<p>地址：<a href="https://pan.baidu.com/s/1QzW4ebQxYQtxgVfkTmxVJw，下载VBA7.0.1590_For" target="_blank" rel="noopener">https://pan.baidu.com/s/1QzW4ebQxYQtxgVfkTmxVJw，下载VBA7.0.1590_For</a> WPS(中文).exe后，先退出WPS，再直接安装就行，再次打开nmon analyser，启用宏。</p>
<ol start="4">
<li><strong>使用nmon analyser生成图表</strong></li>
</ol>
<p>成功打开nmon analyser后，点击Analyze nmon data按钮，选择nmon数据文件，会再次提示另存为，选择地址保存即可。 </p>
<h5 id="二、在服务器生成html图表"><a href="#二、在服务器生成html图表" class="headerlink" title="二、在服务器生成html图表"></a>二、在服务器生成html图表</h5><ol>
<li>下载生成htnl图表工具：</li>
</ol>
<p><a href="http://nmon.sourceforge.net/pmwiki.php?n=Site.Nmonchart" target="_blank" rel="noopener">http://nmon.sourceforge.net/pmwiki.php?n=Site.Nmonchart</a></p>
<ol start="2">
<li><p>解压文件，并进入目录下</p>
</li>
<li><p>修改nmonchart权限</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">nmonchart /home/lxb/data/npudev-bigshow-txygz4-179_200325_1819.nmon  /home/lxb/data/npudev-bigshow-txygz4-179_200325_1819.html</span><br></pre></td></tr></table></figure></div>
</li>
</ol>
<p>第一次使用会报错：<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">-bash: ./nmonchart: /usr/bin/ksh: bad interpreter: No such file or directory</span><br></pre></td></tr></table></figure></div></p>
<p>解决方案：<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">yum install ksh</span><br></pre></td></tr></table></figure></div></p>
<ol start="4">
<li>将html打开，查看数据。</li>
</ol>
]]></content>
      <categories>
        <category>测试</category>
      </categories>
      <tags>
        <tag>测试</tag>
      </tags>
  </entry>
  <entry>
    <title>JMeter修改ServerAgent的默认端口号</title>
    <url>/2020/03/23/JMeter%E4%BF%AE%E6%94%B9ServerAgent%E7%9A%84%E9%BB%98%E8%AE%A4%E7%AB%AF%E5%8F%A3%E5%8F%B7/</url>
    <content><![CDATA[<p>Linux服务器中修改ServerAgent的默认端口号！<br><a id="more"></a><br>在Linux服务器中，ServerAgent默认启动4444端口，可能会遇到端口占用的情况，需要对端口进行修改，记录一下修改方式！<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入ServerAgent目录中，直接运行命令</span></span><br><span class="line">java -jar ./CMDRunner.jar --tool PerfMonAgent --udp-port 端口号 --tcp-port 端口号</span><br><span class="line"><span class="comment"># 修改启动文件</span></span><br><span class="line"><span class="comment"># 修改startAgent.sh文件如下内容</span></span><br><span class="line"><span class="comment"># java -jar $(dirname $0)/CMDRunner.jar --tool PerfMonAgent "$@"</span></span><br><span class="line">java -jar ./CMDRunner.jar --tool PerfMonAgent --udp-port 端口号 --tcp-port 端口号</span><br><span class="line"><span class="comment"># 后台运行命令</span></span><br><span class="line">nohup sh startAgent.sh &amp;</span><br></pre></td></tr></table></figure></div></p>
<p>验证服务外部是否可以访问<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="POWERSHELL"><figure class="iseeu highlight /powershell"><table><tr><td class="code"><pre><span class="line">telent host port</span><br></pre></td></tr></table></figure></div></p>
]]></content>
      <categories>
        <category>测试</category>
      </categories>
      <tags>
        <tag>测试</tag>
      </tags>
  </entry>
  <entry>
    <title>JMeter界面设置为简体中文</title>
    <url>/2020/03/22/JMeter%E7%95%8C%E9%9D%A2%E8%AE%BE%E7%BD%AE%E4%B8%BA%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87/</url>
    <content><![CDATA[<p>JMeter默认提供了英文界面，但也提供了中文，需要手动选择，若不修改配置文件，每次都需要手动选择中文，这里记录一下怎样配置永久中文。<br><a id="more"></a></p>
<h4 id="一、临时中文"><a href="#一、临时中文" class="headerlink" title="一、临时中文"></a>一、临时中文</h4><p>本次有效，关闭再打开或重启后，会恢复英文，需要再次选择！<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">Options --&gt; Choose Language --&gt; Chinses(Simplified)</span><br></pre></td></tr></table></figure></div></p>
<h4 id="二、永久中文"><a href="#二、永久中文" class="headerlink" title="二、永久中文"></a>二、永久中文</h4><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">打开JMeter目录，进去bin目录下，打开jmeter.properties文件</span><br><span class="line">修改文件第三十七行，将最前面#去掉，并修改如下：</span><br><span class="line">language=zh_CN</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>测试</category>
      </categories>
      <tags>
        <tag>测试</tag>
      </tags>
  </entry>
  <entry>
    <title>nohup命令（设置后台进程）详解</title>
    <url>/2020/03/23/nohup%E5%91%BD%E4%BB%A4%EF%BC%88%E8%AE%BE%E7%BD%AE%E5%90%8E%E5%8F%B0%E8%BF%9B%E7%A8%8B%EF%BC%89%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<p>记录Linux中常用nohup来设置后台进程！<br><a id="more"></a></p>
<h4 id="一、Linux-下使用-nohup"><a href="#一、Linux-下使用-nohup" class="headerlink" title="一、Linux 下使用 nohup"></a>一、Linux 下使用 nohup</h4><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>Tool</category>
      </categories>
      <tags>
        <tag>Tool</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue学习笔记一</title>
    <url>/2020/04/12/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80/</url>
    <content><![CDATA[<p>Vue最简单的基础程序。<br><a id="more"></a></p>
<h4 id="一、Vue-js介绍"><a href="#一、Vue-js介绍" class="headerlink" title="一、Vue.js介绍"></a>一、Vue.js介绍</h4><p>Vue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的渐进式框架。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。</p>
<h4 id="二、简单使用"><a href="#二、简单使用" class="headerlink" title="二、简单使用"></a>二、简单使用</h4><p>新建一个html，引入Vue。</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span><br><span class="line">&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;!-- 生产环境版本，优化了尺寸和速度 --&gt;</span><br><span class="line">&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></div>
<h4 id="三、简单例子"><a href="#三、简单例子" class="headerlink" title="三、简单例子"></a>三、简单例子</h4><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">  &#123;&#123; message &#125;&#125;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">var app = new Vue(&#123;</span><br><span class="line">  el: &apos;#app&apos;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    message: &apos;Hello Vue!&apos;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>
<ol>
<li>第一步，new Vue</li>
<li>el对应需要绑定元素的id</li>
<li>data内键需与上面定义的对应，值自己定义。</li>
</ol>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows Terminal 配置oh-my-posh主题</title>
    <url>/2020/04/01/Windows%20Terminal%E9%85%8D%E7%BD%AEoh-my-posh%E4%B8%BB%E9%A2%98/</url>
    <content><![CDATA[<p>为Windows Terminal配置oh-my-posh主题，记录一下配置过程方便后续操作！<br><a id="more"></a></p>
]]></content>
      <categories>
        <category>Tool</category>
      </categories>
      <tags>
        <tag>Tool</tag>
      </tags>
  </entry>
  <entry>
    <title>Tornado学习笔记二</title>
    <url>/2020/04/13/Tornado%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8C/</url>
    <content><![CDATA[<p>记录一下Tornado框架的学习过程！<br><a id="more"></a></p>
<h4 id="一、模板"><a href="#一、模板" class="headerlink" title="一、模板"></a>一、模板</h4><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># poemmaker.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os.path</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> tornado.httpserver</span><br><span class="line"><span class="keyword">import</span> tornado.ioloop</span><br><span class="line"><span class="keyword">import</span> tornado.options</span><br><span class="line"><span class="keyword">import</span> tornado.web</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> tornado.options <span class="keyword">import</span> define, options</span><br><span class="line">define(<span class="string">"port"</span>, default=<span class="number">8000</span>, help=<span class="string">"run on the given port"</span>, type=int)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexHandler</span><span class="params">(tornado.web.RequestHandler)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.render(<span class="string">'index.html'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PoemPageHandler</span><span class="params">(tornado.web.RequestHandler)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self)</span>:</span></span><br><span class="line">        noun1 = self.get_argument(<span class="string">'noun1'</span>)</span><br><span class="line">        noun2 = self.get_argument(<span class="string">'noun2'</span>)</span><br><span class="line">        verb = self.get_argument(<span class="string">'verb'</span>)</span><br><span class="line">        noun3 = self.get_argument(<span class="string">'noun3'</span>)</span><br><span class="line">        self.render(<span class="string">'poem.html'</span>, roads=noun1, wood=noun2, made=verb,</span><br><span class="line">                difference=noun3)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    tornado.options.parse_command_line()</span><br><span class="line">    app = tornado.web.Application(</span><br><span class="line">        handlers=[(<span class="string">r'/'</span>, IndexHandler), (<span class="string">r'/poem'</span>, PoemPageHandler)],</span><br><span class="line">        template_path=os.path.join(os.path.dirname(__file__), <span class="string">"templates"</span>)</span><br><span class="line">    )</span><br><span class="line">    http_server = tornado.httpserver.HTTPServer(app)</span><br><span class="line">    http_server.listen(options.port)</span><br><span class="line">    tornado.ioloop.IOLoop.instance().start()</span><br></pre></td></tr></table></figure></div>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;<span class="name">title</span>&gt;</span>Poem Maker Pro<span class="tag">&lt;/<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Enter terms below.<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">action</span>=<span class="string">"/poem"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Plural noun<span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"noun1"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Singular noun<span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"noun2"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Verb (past tense)<span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"verb"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Noun<span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"noun3"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;<span class="name">title</span>&gt;</span>Poem Maker Pro<span class="tag">&lt;/<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Your poem<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Two &#123;&#123;roads&#125;&#125; diverged in a &#123;&#123;wood&#125;&#125;, and I—<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">I took the one less travelled by,<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">And that has &#123;&#123;made&#125;&#125; all the &#123;&#123;difference&#125;&#125;.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
<h4 id="二、渲染模板"><a href="#二、渲染模板" class="headerlink" title="二、渲染模板"></a>二、渲染模板</h4><ol>
<li>向Application对象的<strong>init</strong>方法传递了一个template_path参数。<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line">template_path=os.path.join(os.path.dirname(__file__), <span class="string">"templates"</span>)</span><br></pre></td></tr></table></figure></div>
</li>
</ol>
<p>告诉Python在你Tornado应用文件同目录下的templates文件夹中寻找模板文件。</p>
<ol start="2">
<li>template_path参数告诉Tornado在哪里寻找模板文件。</li>
<li>模板是一个允许你嵌入Python代码片段的HTML文件。</li>
<li><p>使用RequestHandler类的render方法来告诉Tornado读入模板文件，插入其中的模版代码，并返回结果给浏览器。</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line">self.render(<span class="string">'index.html'</span>)</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>告诉Tornado在templates文件夹下找到一个名为index.html的文件，读取其中的内容，并且发送给浏览器。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue学习笔记二</title>
    <url>/2020/04/16/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8C/</url>
    <content><![CDATA[<p>Vue挂载点、模板和实例。<br><a id="more"></a><br>模板展示方式一：</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">// 挂载点 el对应的</span><br><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">//模板：在挂载点内部内容都叫模板</span><br><span class="line">  &#123;&#123; message &#125;&#125;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">var app = new Vue(&#123;</span><br><span class="line">  el: &apos;#app&apos;, </span><br><span class="line">  data: &#123;</span><br><span class="line">    message: &apos;Hello Vue!&apos;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>
<p>模板展示方式二：<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">//模板：在挂载点内部内容都叫模板</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">var app = new Vue(&#123;</span><br><span class="line">  el: &apos;#app&apos;, </span><br><span class="line">  template: &apos;&lt;h1&gt;&#123;&#123;message&#125;&#125;&lt;/h1&gt;&apos;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    message: &apos;Hello Vue!&apos;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div></p>
<p>数据绑定：</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 使用v-model完成数据绑定 --&gt;</span><br><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; v-model=&quot;name&quot; placeholder=&quot;你的名字&quot;&gt;</span><br><span class="line">    &lt;div&gt;你好，&#123;&#123; name &#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">var app = new Vue(&#123;</span><br><span class="line">  el: &apos;#app&apos;, </span><br><span class="line">  data: &#123;</span><br><span class="line">    name: &apos;Hello Vue!&apos;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>
<p>生命周期：</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>Python读取文件时报错</title>
    <url>/2020/04/21/Python%E8%AF%BB%E5%8F%96%E6%96%87%E4%BB%B6%E6%97%B6%E6%8A%A5%E9%94%99/</url>
    <content><![CDATA[<p>开发过程中遇到一个问题，记录一下！<br><a id="more"></a></p>
<h4 id="读取文件报错"><a href="#读取文件报错" class="headerlink" title="读取文件报错"></a>读取文件报错</h4><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line">UnicodeDecodeError: <span class="string">'gbk'</span> codec can<span class="string">'t decode byte 0x80 in position 205: illegal multibyte sequence</span></span><br></pre></td></tr></table></figure></div>
<h6 id="原因："><a href="#原因：" class="headerlink" title="原因："></a>原因：</h6><p>编码问题</p>
<h6 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h6><ol>
<li><p>读取时加入编码</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line">FILE_OBJECT= open(<span class="string">'order.log'</span>,<span class="string">'r'</span>, encoding=<span class="string">'UTF-8'</span>)</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>直接读字节</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line">FILE_OBJECT= open(<span class="string">'order.log'</span>,<span class="string">'rb'</span>)</span><br></pre></td></tr></table></figure></div></li>
</ol>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Tornado学习笔记三</title>
    <url>/2020/04/23/Tornado%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%89/</url>
    <content><![CDATA[<a id="more"></a>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Charles手机抓包教程</title>
    <url>/2020/04/24/Charles%E6%89%8B%E6%9C%BA%E6%8A%93%E5%8C%85%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<p>手机测试需要抓包看接口参数是否正确，记录一下抓包流程！<br><a id="more"></a></p>
<h4 id="一、charles的使用"><a href="#一、charles的使用" class="headerlink" title="一、charles的使用"></a>一、charles的使用</h4><h6 id="1-1-charles的说明"><a href="#1-1-charles的说明" class="headerlink" title="1.1  charles的说明"></a>1.1  charles的说明</h6><p>  Charles其实是一款代理服务器，通过过将自己设置成系统（电脑或者浏览器）的网络访问代理服务器，然后截取请求和请求结果达到分析抓包的目的。<br>  该软件是用Java写的，能够在Windows，Mac，Linux上使用。安装Charles的时候要先装好Java环境。</p>
<h6 id="1-2-安装包的下载"><a href="#1-2-安装包的下载" class="headerlink" title="1.2 安装包的下载"></a>1.2 安装包的下载</h6><p>  进入官网下载地址：<a href="http://www.charlesproxy.com/" target="_blank" rel="noopener">http://www.charlesproxy.com/</a> ，点击链接下载30天免费试用版本。<br>  PS: Charles 是收费软件，可以免费试用 30 天。试用期过后，未付费的用户仍然可以继续使用，但是每次使用时间不能超过 30 分钟，并且启动时将会有 10 秒种的延时。因此，该付费方案对广大用户还是相当友好的，即使你长期不付费，也能使用完整的软件功能。只是当你需要长时间进行封包调试时，会因为 Charles 强制关闭而遇到影响。</p>
<h6 id="1-3-Charles中配置代理端口号"><a href="#1-3-Charles中配置代理端口号" class="headerlink" title="1.3 Charles中配置代理端口号"></a>1.3 Charles中配置代理端口号</h6><p>1.3.1 选择Proxy–&gt;打开Proxy Settings<br><img src="/image/Charles/Charles-2.png"></p>
<p>1.3.2 Port默认为8888，可以修改为自己需要的值<br><img src="/image/Charles/Charles-3.png"></p>
<h6 id="1-4-查看电脑IP"><a href="#1-4-查看电脑IP" class="headerlink" title="1.4 查看电脑IP"></a>1.4 查看电脑IP</h6><p><img src="/image/Charles/Charles-1.png"></p>
<h6 id="1-5-手机端的wifi代理设置"><a href="#1-5-手机端的wifi代理设置" class="headerlink" title="1.5 手机端的wifi代理设置"></a>1.5 手机端的wifi代理设置</h6><p>  进入手机设置–&gt;Wi-Fi–&gt;选择和电脑相同的wifi–&gt;HTTP代理–&gt;选择手动–&gt;填入上面查询的ip，和Charles中设置的端口号<br><img src="/image/Charles/Charles-2.jpg"></p>
<h6 id="1-6-手机端与Charles连接"><a href="#1-6-手机端与Charles连接" class="headerlink" title="1.6 手机端与Charles连接"></a>1.6 手机端与Charles连接</h6><p>  设置完成后，退出设置，手机端与Charles应弹出连接提示弹窗，选择Allow<br><img src="/image/Charles/Charles-5.png"></p>
<h6 id="1-7-验证是否成功"><a href="#1-7-验证是否成功" class="headerlink" title="1.7 验证是否成功"></a>1.7 验证是否成功</h6><p>  打开浏览器，访问需要抓包的网站，若Charles中出现该网址证明代理设置成功，若未出现，需按照步骤查看原因。</p>
]]></content>
      <categories>
        <category>测试</category>
      </categories>
      <tags>
        <tag>测试</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux中du命令详解</title>
    <url>/2020/04/30/Linux%E4%B8%ADdu%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<p>记录下工作中在Linux系统中使用的du命令。<br><a id="more"></a></p>
<h4 id="du详解"><a href="#du详解" class="headerlink" title="du详解"></a>du详解</h4><p>  du : 显示每个文件和目录的磁盘使用空间<br>命令参数：<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 显示目录中文件的大小，单位：KB </span></span><br><span class="line">-a 或 -all</span><br><span class="line"><span class="comment"># 显示目录中文件的大小，单位：字节byte</span></span><br><span class="line">-b 或 -bytes</span><br><span class="line"><span class="comment"># 除了显示个别目录或文件的大小外，同时也显示所有目录或文件的总和，单位：KB</span></span><br><span class="line">-c 或 --total</span><br><span class="line"><span class="comment"># 显示目录中文件的大小，单位：KB</span></span><br><span class="line">-k 或 --kilobytes</span><br><span class="line"><span class="comment"># 显示目录中文件的大小，单位：MB</span></span><br><span class="line">-m 或 --megabytes</span><br><span class="line"><span class="comment"># 仅显示总计，只列出最后加总的值，单位：KB。</span></span><br><span class="line">-s 或 --summarize</span><br><span class="line"><span class="comment"># K，M，G为单位，提高信息的可读性</span></span><br><span class="line">-h</span><br><span class="line"><span class="comment"># 开始处理时的文件系统为准，若遇上其它不同的文件系统目录则略过</span></span><br><span class="line">-x 或 --one-file-system</span><br><span class="line"><span class="comment"># 显示选项中所指定符号链接的源文件大小</span></span><br><span class="line">-L&lt;符号链接&gt; 或 --dereference&lt;符号链接&gt;</span><br><span class="line"><span class="comment"># 显示个别目录的大小时，并不含其子目录的大小</span></span><br><span class="line">-S 或 --separate-dirs</span><br><span class="line"><span class="comment"># 在&lt;文件&gt;指定目录或文件 </span></span><br><span class="line">-X&lt;文件&gt; 或 --exclude-from=&lt;文件&gt;</span><br><span class="line"><span class="comment"># 略过指定的目录或文件</span></span><br><span class="line">--exclude=&lt;目录或文件&gt;</span><br><span class="line"><span class="comment"># 显示指定符号链接的源文件大小</span></span><br><span class="line">-D 或 --dereference-args</span><br><span class="line"><span class="comment"># 与-h参数相同，但是K，M，G是以1000为换算单位</span></span><br><span class="line">-H 或 --si</span><br><span class="line"><span class="comment"># 重复计算硬件链接的文件</span></span><br><span class="line">-l 或 --count-links</span><br></pre></td></tr></table></figure></div></p>
<h6 id="显示目录中文件的大小，单位：KB"><a href="#显示目录中文件的大小，单位：KB" class="headerlink" title="显示目录中文件的大小，单位：KB"></a>显示目录中文件的大小，单位：KB</h6><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -a 或 -all</span></span><br><span class="line">root@DESKTOP-8AR33HE:~<span class="comment"># du -a</span></span><br><span class="line">4       ./.bash_history</span><br><span class="line">4       ./.bashrc</span><br><span class="line">0       ./.profile</span><br><span class="line">4       ./.ssh/known_hosts</span><br><span class="line">4       ./.ssh</span><br><span class="line">12      .</span><br></pre></td></tr></table></figure></div>
<h6 id="显示目录中文件的大小，单位：字节byte"><a href="#显示目录中文件的大小，单位：字节byte" class="headerlink" title="显示目录中文件的大小，单位：字节byte"></a>显示目录中文件的大小，单位：字节byte</h6><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -b 或 -bytes</span></span><br><span class="line">root@DESKTOP-8AR33HE:~<span class="comment"># du -b</span></span><br><span class="line">5424    ./.ssh</span><br><span class="line">13589   .</span><br></pre></td></tr></table></figure></div>
<h6 id="除了显示个别目录或文件的大小外，同时也显示所有目录或文件的总和，单位：KB"><a href="#除了显示个别目录或文件的大小外，同时也显示所有目录或文件的总和，单位：KB" class="headerlink" title="除了显示个别目录或文件的大小外，同时也显示所有目录或文件的总和，单位：KB"></a>除了显示个别目录或文件的大小外，同时也显示所有目录或文件的总和，单位：KB</h6><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -c 或 --total</span></span><br><span class="line">root@DESKTOP-8AR33HE:~<span class="comment"># du -c</span></span><br><span class="line">4       ./.ssh</span><br><span class="line">12      .</span><br><span class="line">12      total</span><br></pre></td></tr></table></figure></div>
<h6 id="显示目录中文件的大小，单位：KB-1"><a href="#显示目录中文件的大小，单位：KB-1" class="headerlink" title="显示目录中文件的大小，单位：KB"></a>显示目录中文件的大小，单位：KB</h6><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -k 或 --kilobytes</span></span><br><span class="line">root@DESKTOP-8AR33HE:~<span class="comment"># du -k</span></span><br><span class="line">4       ./.ssh</span><br><span class="line">12      .</span><br></pre></td></tr></table></figure></div>
<h6 id="显示目录中文件的大小，单位：MB"><a href="#显示目录中文件的大小，单位：MB" class="headerlink" title="显示目录中文件的大小，单位：MB"></a>显示目录中文件的大小，单位：MB</h6><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -m 或 --megabytes</span></span><br><span class="line">root@DESKTOP-8AR33HE:~<span class="comment"># du -m</span></span><br><span class="line">1       ./.ssh</span><br><span class="line">1       .</span><br></pre></td></tr></table></figure></div>
<h6 id="仅显示总计，只列出最后加总的值，单位：KB。"><a href="#仅显示总计，只列出最后加总的值，单位：KB。" class="headerlink" title="仅显示总计，只列出最后加总的值，单位：KB。"></a>仅显示总计，只列出最后加总的值，单位：KB。</h6><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -s 或 --summarize</span></span><br><span class="line">root@DESKTOP-8AR33HE:~<span class="comment"># du -s</span></span><br><span class="line">12      .</span><br></pre></td></tr></table></figure></div>
<h6 id="K，M，G为单位，提高信息的可读性"><a href="#K，M，G为单位，提高信息的可读性" class="headerlink" title="K，M，G为单位，提高信息的可读性"></a>K，M，G为单位，提高信息的可读性</h6><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -h 或 --human-readable</span></span><br><span class="line">root@DESKTOP-8AR33HE:~<span class="comment"># du -h</span></span><br><span class="line">4.0K    ./.ssh</span><br><span class="line">12K     .</span><br></pre></td></tr></table></figure></div>
<h6 id="开始处理时的文件系统为准，若遇上其它不同的文件系统目录则略过"><a href="#开始处理时的文件系统为准，若遇上其它不同的文件系统目录则略过" class="headerlink" title="开始处理时的文件系统为准，若遇上其它不同的文件系统目录则略过"></a>开始处理时的文件系统为准，若遇上其它不同的文件系统目录则略过</h6><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -x 或 --one-file-system</span></span><br><span class="line">root@DESKTOP-8AR33HE:~<span class="comment"># du -x</span></span><br><span class="line">4       ./.ssh</span><br><span class="line">12      .</span><br><span class="line">root@DESKTOP-8AR33HE:~<span class="comment"># du --one-file-system</span></span><br><span class="line">4       ./.ssh</span><br><span class="line">12      .</span><br></pre></td></tr></table></figure></div>
<h6 id="显示个别目录的大小时，并不含其子目录的大小"><a href="#显示个别目录的大小时，并不含其子目录的大小" class="headerlink" title="显示个别目录的大小时，并不含其子目录的大小"></a>显示个别目录的大小时，并不含其子目录的大小</h6><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -S 或 --separate-dirs</span></span><br><span class="line">root@DESKTOP-8AR33HE:~<span class="comment"># du -S</span></span><br><span class="line">4       ./.ssh</span><br><span class="line">8       .</span><br><span class="line">root@DESKTOP-8AR33HE:~<span class="comment"># du --separate-dirs</span></span><br><span class="line">4       ./.ssh</span><br><span class="line">8       .</span><br></pre></td></tr></table></figure></div>
<h6 id="在-lt-文件-gt-指定目录或文件"><a href="#在-lt-文件-gt-指定目录或文件" class="headerlink" title="在&lt;文件&gt;指定目录或文件"></a>在&lt;文件&gt;指定目录或文件</h6><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -X &lt;文件&gt; 或 --exclude-from=&lt;文件&gt;</span></span><br><span class="line">root@DESKTOP-8AR33HE:~<span class="comment"># du -X 1.txt</span></span><br><span class="line">4       ./.ssh</span><br><span class="line">16      .</span><br><span class="line">root@DESKTOP-8AR33HE:~<span class="comment"># du --exclude-from=1.txt</span></span><br><span class="line">4       ./.ssh</span><br><span class="line">16      .</span><br></pre></td></tr></table></figure></div>
<h6 id="查看文件大小和文件内文件大小"><a href="#查看文件大小和文件内文件大小" class="headerlink" title="查看文件大小和文件内文件大小"></a>查看文件大小和文件内文件大小</h6><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">root@DESKTOP-8AR33HE:~<span class="comment"># du -sh /bin/</span></span><br><span class="line">15M     /bin/</span><br><span class="line">root@DESKTOP-8AR33HE:~<span class="comment"># du -sh /bin/*</span></span><br><span class="line">1.1M    /bin/bash</span><br><span class="line">700K    /bin/btrfs</span><br><span class="line">368K    /bin/btrfs-debug-tree</span><br><span class="line">364K    /bin/btrfs-find-root</span><br><span class="line">388K    /bin/btrfs-image</span><br><span class="line">368K    /bin/btrfs-map-logical</span><br><span class="line">364K    /bin/btrfs-select-super</span><br><span class="line">364K    /bin/btrfs-zero-log</span><br></pre></td></tr></table></figure></div>
<h6 id="Linux-查找占用空间最大的文件与目录"><a href="#Linux-查找占用空间最大的文件与目录" class="headerlink" title="Linux 查找占用空间最大的文件与目录"></a>Linux 查找占用空间最大的文件与目录</h6><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># du -h --max-depth=1</span></span><br><span class="line">root@DESKTOP-8AR33HE:~<span class="comment"># cd /bin/</span></span><br><span class="line">root@DESKTOP-8AR33HE:/bin<span class="comment"># du -h --max-depth=1</span></span><br><span class="line">15M     .</span><br></pre></td></tr></table></figure></div>
<h6 id="df：显示磁盘分区上可以使用的磁盘空间"><a href="#df：显示磁盘分区上可以使用的磁盘空间" class="headerlink" title="df：显示磁盘分区上可以使用的磁盘空间"></a>df：显示磁盘分区上可以使用的磁盘空间</h6><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看全部文件系统，单位默认KB</span></span><br><span class="line"><span class="comment"># -a</span></span><br><span class="line"></span><br><span class="line">root@DESKTOP-8AR33HE:/<span class="comment"># df -a</span></span><br><span class="line">Filesystem     1K-blocks     Used Available Use% Mounted on</span><br><span class="line">rootfs          83887100 76061200   7825900  91% /</span><br><span class="line">none            83887100 76061200   7825900  91% /dev</span><br><span class="line">sysfs                  0        0         0    - /sys</span><br><span class="line">proc                   0        0         0    - /proc</span><br><span class="line">devpts                 0        0         0    - /dev/pts</span><br><span class="line">none            83887100 76061200   7825900  91% /run</span><br><span class="line">none            83887100 76061200   7825900  91% /run/lock</span><br><span class="line">none            83887100 76061200   7825900  91% /run/shm</span><br><span class="line">none            83887100 76061200   7825900  91% /run/user</span><br><span class="line">binfmt_misc            0        0         0    - /proc/sys/fs/binfmt_misc</span><br><span class="line">cgroup          83887100 76061200   7825900  91% /sys/fs/cgroup</span><br><span class="line">cgroup                 0        0         0    - /sys/fs/cgroup/devices</span><br><span class="line">C:\             83887100 76061200   7825900  91% /mnt/c</span><br><span class="line">D:\            165732676 70237472  95495204  43% /mnt/d</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用-h选项以KB、MB、GB的单位来显示，可读性高</span></span><br><span class="line"><span class="comment"># -h</span></span><br><span class="line"></span><br><span class="line">root@DESKTOP-8AR33HE:/<span class="comment"># df -h</span></span><br><span class="line">Filesystem      Size  Used Avail Use% Mounted on</span><br><span class="line">rootfs           81G   73G  7.5G  91% /</span><br><span class="line">none             81G   73G  7.5G  91% /dev</span><br><span class="line">none             81G   73G  7.5G  91% /run</span><br><span class="line">none             81G   73G  7.5G  91% /run/lock</span><br><span class="line">none             81G   73G  7.5G  91% /run/shm</span><br><span class="line">none             81G   73G  7.5G  91% /run/user</span><br><span class="line">cgroup           81G   73G  7.5G  91% /sys/fs/cgroup</span><br><span class="line">C:\              81G   73G  7.5G  91% /mnt/c</span><br><span class="line">D:\             159G   67G   92G  43% /mnt/d</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>Tool</category>
      </categories>
      <tags>
        <tag>Tool</tag>
      </tags>
  </entry>
  <entry>
    <title>Charles手机抓包教程二</title>
    <url>/2020/05/01/Charles%E6%89%8B%E6%9C%BA%E6%8A%93%E5%8C%85%E6%95%99%E7%A8%8B%E4%BA%8C/</url>
    <content><![CDATA[<p>很多时候因为链接是https的，导致抓包内容是加密的无法获取，记录一下怎么抓取https。<br><a id="more"></a></p>
<h4 id="1-手机连接到Charles"><a href="#1-手机连接到Charles" class="headerlink" title="1. 手机连接到Charles"></a>1. 手机连接到Charles</h4><p><a href="https://bjlxb.github.io/2020/04/24/Charles%E6%89%8B%E6%9C%BA%E6%8A%93%E5%8C%85%E6%95%99%E7%A8%8B/">Charles手机抓包教程</a></p>
<h4 id="2-安装证书"><a href="#2-安装证书" class="headerlink" title="2. 安装证书"></a>2. 安装证书</h4><ol>
<li><p>电脑端安装证书<br><img src="/image/Charles/Charles-6.png"></p>
</li>
<li><p>手机端安装证书<br><img src="/image/Charles/Charles-7.png"><br><img src="/image/Charles/Charles-8.png"></p>
</li>
</ol>
<ul>
<li><p>安卓系统：</p>
<ol>
<li><p>按照提示，首先连接到Charles</p>
</li>
<li><p>在浏览器输入网址：chls.pro/ssl</p>
</li>
<li><p>下载证书</p>
</li>
<li><p>安装证书</p>
</li>
<li><p>理论上安装完成后可以直接使用。</p>
</li>
</ol>
</li>
<li><p>苹果系统：</p>
<ol>
<li><p>按照提示，首先连接到Charles</p>
</li>
<li><p>在Safari中输入网址：chls.pro/ssl</p>
</li>
<li><p>会弹出下载配置描述文件，问是否允许，选择允许。<br> <img src="/image/Charles/Charles-9.jpeg"></p>
</li>
<li><p>设置-通用-描述文件-配置描述文件-Charles ProxyCA-安装（需输入开屏密码）-会出现警告，忽略继续点击安装，<br> <img src="/image/Charles/Charles-10.jpeg"><br> <img src="/image/Charles/Charles-11.jpeg"></p>
</li>
<li><p>打开设置–》通用–》描述文件，可以看到刚刚安装的描述文件</p>
</li>
<li><p>信任新安装的证书</p>
<p> 设置-通用-关于本机-证书信任设置-Charles…证书开启信任</p>
<p> <img src="/image/Charles/Charles-20.jpeg"></p>
<p> <img src="/image/Charles/Charles-21.jpeg"></p>
<p> <img src="/image/Charles/Charles-22.jpeg"></p>
</li>
<li><p>打开一个HTTPS的网站，看是否可以抓包成功。</p>
</li>
</ol>
</li>
</ul>
]]></content>
      <categories>
        <category>测试</category>
      </categories>
      <tags>
        <tag>测试</tag>
      </tags>
  </entry>
  <entry>
    <title>Charles手机抓包教程三</title>
    <url>/2020/05/06/Charles%E6%89%8B%E6%9C%BA%E6%8A%93%E5%8C%85%E6%95%99%E7%A8%8B%E4%B8%89/</url>
    <content><![CDATA[<p>由于默认Charles会抓取手机端和电脑端所有的网络连接，筛选需要的连接比较麻烦，需要对需要的连接进行过滤操作，只显示需要网址的连接。<br><a id="more"></a></p>
<h4 id="将-Charles-设置成系统代理"><a href="#将-Charles-设置成系统代理" class="headerlink" title="将 Charles 设置成系统代理"></a>将 Charles 设置成系统代理</h4><p>Charles是通过将自己设置成代理服务器来完成封包截取的，所以使用 Charles 的第一步是将其设置成系统的代理服务器。<br>菜单中的 “Proxy” -&gt; “Windows Proxy” 来将 Charles 设置成系统代理。<br><img src="/image/Charles/Charles-19.png"></p>
<h4 id="过滤网络请求"><a href="#过滤网络请求" class="headerlink" title="过滤网络请求"></a>过滤网络请求</h4><p>方法一：<br>  主界面左下角的 Filter 栏中输入需要过滤出来的关键字。<br>  例如我们的服务器的地址是：<a href="https://www.baidu.com" target="_blank" rel="noopener">https://www.baidu.com</a> , 那么只需要在 Filter 栏中输入baidu即可。<br><img src="/image/Charles/Charles-17.png"><br><img src="/image/Charles/Charles-18.png"></p>
<p>方法二：<br>  菜单栏选择 “Proxy”-&gt;”Recording Settings”，弹出窗口中选择 Include，再点击“Add”，在弹出的窗口中输入需要监控的协议，主机地址，端口号等信息，来添加一个过滤条件。<br><img src="/image/Charles/Charles-13.png"><br><img src="/image/Charles/Charles-14.png"><br><img src="/image/Charles/Charles-15.png"><br><img src="/image/Charles/Charles-16.png"></p>
]]></content>
      <categories>
        <category>测试</category>
      </categories>
      <tags>
        <tag>测试</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux中ps命令</title>
    <url>/2020/05/08/Linux%E4%B8%ADps%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p>Linux系统中经常对进程进行监测和控制，ps命令就是最基本进程查看命令！<br><a id="more"></a><br>ps可以确定有哪些进程正在运行、进程的运行状态、进程是否结束、进程是不是僵尸进程、进程占用了多少资源。<br>ps是显示瞬间进程的状态，并不动态连续。<br>top命令可以对进程进行实时监控。</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">参数：</span><br><span class="line">-A ：所有的进程均显示出来，与 -e 具有同样的效用；</span><br><span class="line">-a ： 显示现行终端机下的所有进程，包括其他用户的进程；</span><br><span class="line">-u ：以用户为主的进程状态 ；</span><br><span class="line">x ：通常与 a 这个参数一起使用，可列出较完整信息。</span><br><span class="line"></span><br><span class="line">输出格式规划：</span><br><span class="line">l ：较长、较详细的将该 PID 的的信息列出；</span><br><span class="line">j ：工作的格式 (<span class="built_in">jobs</span> format)</span><br><span class="line">-f ：做一个更为完整的输出。</span><br></pre></td></tr></table></figure></div>
<p>常用命令展示：</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">ps  -ef</span><br><span class="line"><span class="comment"># 列出目前所有的正在内存当中的程序</span></span><br><span class="line">ps  -aux</span><br><span class="line">ps  -u root</span><br><span class="line"><span class="comment"># 将目前属于您自己这次登入的 PID 与相关信息列示出来</span></span><br><span class="line">ps -l</span><br></pre></td></tr></table></figure></div>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">ps -l</span><br><span class="line">各相关信息的意义为：</span><br><span class="line"><span class="comment"># F 代表这个程序的旗标 (flag)， 4 代表使用者为 superuser；</span></span><br><span class="line"><span class="comment"># S 代表这个程序的状态 (STAT)；</span></span><br><span class="line"><span class="comment"># UID 代表执行者身份</span></span><br><span class="line"><span class="comment"># PID 进程的ID号！底下的 PPID 则父进程的ID；</span></span><br><span class="line"><span class="comment"># C CPU 使用的资源百分比</span></span><br><span class="line"><span class="comment"># PRI指进程的执行优先权(Priority的简写)，其值越小越早被执行；</span></span><br><span class="line"><span class="comment"># NI 这个进程的nice值，其表示进程可被执行的优先级的修正数值。</span></span><br><span class="line"><span class="comment"># ADDR 这个是内核函数，指出该程序在内存的那个部分。如果是个执行的程序，一般就是『 - 』</span></span><br><span class="line"><span class="comment"># SZ 使用掉的内存大小；</span></span><br><span class="line"><span class="comment"># WCHAN 目前这个程序是否正在运作当中，若为 - 表示正在运作；</span></span><br><span class="line"><span class="comment"># TTY 登入者的终端机位置啰；</span></span><br><span class="line"><span class="comment"># TIME 使用掉的 CPU 时间。</span></span><br><span class="line"><span class="comment"># CMD 所下达的指令名称</span></span><br></pre></td></tr></table></figure></div>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">ps aux</span><br><span class="line"><span class="comment"># USER：该进程属于那个使用者账号的？</span></span><br><span class="line"><span class="comment"># PID ：该进程的进程ID号。</span></span><br><span class="line"><span class="comment"># %CPU：该进程使用掉的 CPU 资源百分比；</span></span><br><span class="line"><span class="comment"># %MEM：该进程所占用的物理内存百分比；</span></span><br><span class="line"><span class="comment"># VSZ ：该进程使用掉的虚拟内存量 (Kbytes)</span></span><br><span class="line"><span class="comment"># RSS ：该进程占用的固定的内存量 (Kbytes)</span></span><br><span class="line"><span class="comment"># TTY ：该进程是在那个终端机上面运作，若与终端机无关，则显示 ?，另外， tty1-tty6 是本机上面的登入者程序，若为 pts/0 等等的，则表示为由网络连接进主机的程序。</span></span><br><span class="line"><span class="comment"># STAT：该程序目前的状态，主要的状态有：</span></span><br><span class="line"><span class="comment"># R ：该程序目前正在运作，或者是可被运作；</span></span><br><span class="line"><span class="comment"># S ：该程序目前正在睡眠当中 (可说是 idle 状态啦！)，但可被某些讯号(signal) 唤醒。</span></span><br><span class="line"><span class="comment"># T ：该程序目前正在侦测或者是停止了；</span></span><br><span class="line"><span class="comment"># Z ：该程序应该已经终止，但是其父程序却无法正常的终止他，造成 zombie (疆尸) 程序的状态</span></span><br><span class="line"><span class="comment"># START：该进程被触发启动的时间；</span></span><br><span class="line"><span class="comment"># TIME ：该进程实际使用 CPU 运作的时间。</span></span><br><span class="line"><span class="comment"># COMMAND：该程序的实际指令为什么</span></span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>Tool</category>
      </categories>
      <tags>
        <tag>Tool</tag>
      </tags>
  </entry>
  <entry>
    <title>VIM中清空所有内容</title>
    <url>/2020/05/11/VIM%E4%B8%AD%E6%B8%85%E7%A9%BA%E6%89%80%E6%9C%89%E5%86%85%E5%AE%B9/</url>
    <content><![CDATA[<p>在Linux服务器中操作文件需要使用vim进行操作，记录一下vim中清空所有数据的命令。<br><a id="more"></a></p>
<h4 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h4><p>在扩展模式下，输入如下内容：<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">:%d</span><br></pre></td></tr></table></figure></div></p>
<p>解释：</p>
<ul>
<li>% 是匹配所有行</li>
<li>d 是删除的意思</li>
</ul>
<h4 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h4><p>在命令模式下，进行如下操作：</p>
<ol>
<li>执行gg跳至文件首行。</li>
<li>再执行dG，清空所有内容。</li>
</ol>
]]></content>
      <categories>
        <category>Tool</category>
      </categories>
      <tags>
        <tag>Tool</tag>
      </tags>
  </entry>
  <entry>
    <title>jmeter通过jtl格式文件生成html报告</title>
    <url>/2020/05/22/jmeter%E9%80%9A%E8%BF%87jtl%E6%A0%BC%E5%BC%8F%E6%96%87%E4%BB%B6%E7%94%9F%E6%88%90html%E6%8A%A5%E5%91%8A/</url>
    <content><![CDATA[<p>有时在使用jmeter时，会出现未生成html报告的情况，需要通过jtl文件生成html报告。<br><a id="more"></a><br>通过命令生成html格式报告<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">jmeter -g jtl文件 -o 生成html文件夹</span><br><span class="line"># 注：html文件夹必须是存在的，不然会报错！</span><br></pre></td></tr></table></figure></div></p>
]]></content>
      <categories>
        <category>测试</category>
      </categories>
      <tags>
        <tag>测试</tag>
      </tags>
  </entry>
  <entry>
    <title>Python中格式化json数据并写入文件</title>
    <url>/2020/05/24/Python%E4%B8%AD%E6%A0%BC%E5%BC%8F%E5%8C%96json%E6%95%B0%E6%8D%AE%E5%B9%B6%E5%86%99%E5%85%A5%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<p>python在写入json文件时，最好对json文件进行格式化，方便阅读。<br><a id="more"></a></p>
<p>在使用json.dump()时设置缩进</p>
<ul>
<li><p>indent: 缩进（一般填4，缩进4格）</p>
</li>
<li><p>sort_keys: 是否排序（默认False–不排序）</p>
</li>
</ul>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">json.dump(file_info, fp, indent=<span class="number">4</span>, sort_keys=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>VIM退出上下选择</title>
    <url>/2020/06/03/VIM%E9%80%80%E5%87%BA%E4%B8%8A%E4%B8%8B%E9%80%89%E6%8B%A9/</url>
    <content><![CDATA[<p>VIM命令模式中想查看多条历史记录方式<br><a id="more"></a></p>
<h4 id="显示历史命令"><a href="#显示历史命令" class="headerlink" title="显示历史命令"></a>显示历史命令</h4><p>通过如下命令显示历史命令，键盘上下可以进行选择，回车键确认选中。<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">q:</span><br></pre></td></tr></table></figure></div></p>
]]></content>
      <categories>
        <category>Tool</category>
      </categories>
      <tags>
        <tag>Tool</tag>
      </tags>
  </entry>
  <entry>
    <title>Tornado学习笔记一</title>
    <url>/2020/04/05/Tornado%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80/</url>
    <content><![CDATA[<p>记录一下Tornado框架的学习过程！<br><a id="more"></a></p>
<h4 id="一、-Tornado介绍"><a href="#一、-Tornado介绍" class="headerlink" title="一、 Tornado介绍"></a>一、 Tornado介绍</h4><p>Tornado是使用Python编写的一个强大的、可扩展的Web服务器。<br>Tornado就是我们在 FriendFeed 的 Web 服务器及其常用工具的开源版本 。Tornado 和主流 Web 服务器框架（包括大多数 Python的框架）有着明显的区别：它是非阻塞式服务器，而且速度相当快。得利于其 非阻塞的方式和对epoll的运用，Tornado 每秒可以处理数以千计的连接，因此 Tornado 是实时 Web 服务的一个 理想框架。我们开发这个 Web 服务器的主要目的就是为了处理 FriendFeed 的实时功能 ——在 FriendFeed 的应用里每一个活动用户都会保持着一个服务器连接。（关于如何扩容 服务器，以处理数以千计的客户端的连接的问题，请参阅The C10K problem）</p>
<h4 id="二、Tornado环境部署"><a href="#二、Tornado环境部署" class="headerlink" title="二、Tornado环境部署"></a>二、Tornado环境部署</h4><p>首先需要安装python相关环境，然后从PyPI获取（使用easy_install或pip安装），或者从Github上下载源码编译安装。<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用pip进行安装</span></span><br><span class="line">pip install tornado</span><br><span class="line"><span class="comment"># 下载源码进行安装</span></span><br><span class="line"><span class="comment"># 1.解压缩源码</span></span><br><span class="line"><span class="comment"># 2.进入解压后的页面</span></span><br><span class="line">python setup.py build</span><br><span class="line">sudo python setup.py install</span><br></pre></td></tr></table></figure></div></p>
<h4 id="三、Tornado简单例子"><a href="#三、Tornado简单例子" class="headerlink" title="三、Tornado简单例子"></a>三、Tornado简单例子</h4><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># hello.py</span></span><br><span class="line"><span class="keyword">import</span> tornado.httpserver</span><br><span class="line"><span class="keyword">import</span> tornado.ioloop</span><br><span class="line"><span class="keyword">import</span> tornado.options</span><br><span class="line"><span class="keyword">import</span> tornado.web</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> tornado.options <span class="keyword">import</span> define, options</span><br><span class="line">define(<span class="string">"port"</span>, default=<span class="number">8000</span>, help=<span class="string">"run on the given port"</span>, type=int)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexHandler</span><span class="params">(tornado.web.RequestHandler)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self)</span>:</span></span><br><span class="line">        greeting = self.get_argument(<span class="string">'greeting'</span>, <span class="string">'Hello'</span>)</span><br><span class="line">        self.write(greeting + <span class="string">', friendly user!'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    tornado.options.parse_command_line()</span><br><span class="line">    app = tornado.web.Application(handlers=[(<span class="string">r"/"</span>, IndexHandler)])</span><br><span class="line">    http_server = tornado.httpserver.HTTPServer(app)</span><br><span class="line">    http_server.listen(options.port)</span><br><span class="line">    tornado.ioloop.IOLoop.instance().start()</span><br></pre></td></tr></table></figure></div>
<p>启动程序命令：<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line">python hello.py --port=<span class="number">8000</span></span><br></pre></td></tr></table></figure></div></p>
<p>浏览器直接访问或使用curl进行访问：<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl http://localhost:8000/</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 响应</span></span><br><span class="line">Hello, friendly user!</span><br><span class="line"><span class="meta">$</span><span class="bash"> curl http://localhost:8000/?greeting=Salutations</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 响应</span></span><br><span class="line">Salutations, friendly user!</span><br></pre></td></tr></table></figure></div></p>
<h5 id="例子解析："><a href="#例子解析：" class="headerlink" title="例子解析："></a>例子解析：</h5><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> tornado.options <span class="keyword">import</span> define, options</span><br><span class="line">define(<span class="string">"port"</span>, default=<span class="number">8000</span>, help=<span class="string">"run on the given port"</span>, type=int)</span><br></pre></td></tr></table></figure></div>
<ol>
<li>tornado.options模块从命令行中读取设置，使用这个模块指定我们的应用监听HTTP请求的端口。</li>
<li>如果一个与define语句中同名的设置在命令行中被给出，那么它将成为全局options的一个属性。</li>
<li>用户如果运行程序时使用了–help选项，程序将打印出所有你定义的选项以及你在define函数的help参数中指定的文本。如果用户没有为这个选项指定值，则使用default的值进行代替。</li>
<li>define函数使用type参数进行基本的参数类型验证，当不合适的类型被给出时抛出一个异常。</li>
<li><p>如例子所示，允许一个整数的port参数作为options.port来访问程序。如果用户没有指定值，则默认为8000。</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexHandler</span><span class="params">(tornado.web.RequestHandler)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self)</span>:</span></span><br><span class="line">        greeting = self.get_argument(<span class="string">'greeting'</span>, <span class="string">'Hello'</span>)</span><br><span class="line">        self.write(greeting + <span class="string">', friendly user!'</span>)</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>Tornado的请求处理函数类</p>
</li>
<li>Tornado将这个类实例化，并调用与HTTP请求方法所对应的方法。</li>
<li>因为只定义了一个get方法，这个处理函数将对HTTP的GET请求作出响应。<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line">greeting = self.get_argument(<span class="string">'greeting'</span>, <span class="string">'Hello'</span>)</span><br></pre></td></tr></table></figure></div>
</li>
</ol>
<p>get_argument从一个请求字符串中取得参数greeting的值。<br>如果参数没有出现在请求中，Tornado将使用get_argument的第二个参数作为默认值。<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line">self.write(greeting + <span class="string">', friendly user!'</span>)</span><br></pre></td></tr></table></figure></div></p>
<p>write是一个字符串作为函数的参数，HTTP响应中返回该字符串。<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    tornado.options.parse_command_line()</span><br><span class="line">    app = tornado.web.Application(handlers=[(<span class="string">r"/"</span>, IndexHandler)])</span><br></pre></td></tr></table></figure></div></p>
<ol>
<li>使用Tornado的options模块来解析命令行。</li>
<li>创建一个Tornado的Application类的实例。</li>
<li>传递给Application类<strong>init</strong>方法的最重要的参数是handlers。</li>
<li><p>handlers告诉Tornado应该用哪个类来响应请求。</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line">http_server = tornado.httpserver.HTTPServer(app)</span><br><span class="line">http_server.listen(options.port)</span><br><span class="line">tornado.ioloop.IOLoop.instance().start()</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>Application对象被创建后将其传递给Tornado的HTTPServer对象。</p>
</li>
<li>使用命令行指定的端口进行监听（通过options对象取出）。</li>
<li>程序接收HTTP请求后，创建一个Tornado的IOLoop的实例。 </li>
</ol>
<h6 id="handlers解析"><a href="#handlers解析" class="headerlink" title="handlers解析"></a>handlers解析</h6><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line">app = tornado.web.Application(handlers=[(<span class="string">r"/"</span>, IndexHandler)])</span><br></pre></td></tr></table></figure></div>
<ol>
<li>handlers值得我们更加深入的研究。</li>
<li>由元组组成的列表，每个元组的第一个元素是一个用于匹配的正则表达式，第二个元素是一个RequestHanlder的子类。<h6 id="正则表达式指定路径"><a href="#正则表达式指定路径" class="headerlink" title="正则表达式指定路径"></a>正则表达式指定路径</h6></li>
<li>Tornado在元组中使用正则表达式来匹配HTTP请求的路径。</li>
<li>这个路径是URL中主机名后面的部分，不包括查询字符串和碎片。</li>
<li>Tornado把这些正则表达式看作已经包含了行开始和结束锚点，即字符串”/“被看作为”^/$”。</li>
<li>一个正则表达式包含一个捕获分组（正则表达式中的部分被括号括起来），匹配的内容将作为相应HTTP请求的参数传到RequestHandler对象中。</li>
</ol>
<h4 id="四、GET和POST带参请求例子"><a href="#四、GET和POST带参请求例子" class="headerlink" title="四、GET和POST带参请求例子"></a>四、GET和POST带参请求例子</h4><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># string_service.py</span></span><br><span class="line"><span class="keyword">import</span> textwrap</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> tornado.httpserver</span><br><span class="line"><span class="keyword">import</span> tornado.ioloop</span><br><span class="line"><span class="keyword">import</span> tornado.options</span><br><span class="line"><span class="keyword">import</span> tornado.web</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> tornado.options <span class="keyword">import</span> define, options</span><br><span class="line">define(<span class="string">"port"</span>, default=<span class="number">8000</span>, help=<span class="string">"run on the given port"</span>, type=int)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ReverseHandler</span><span class="params">(tornado.web.RequestHandler)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, input)</span>:</span></span><br><span class="line">        self.write(input[::<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WrapHandler</span><span class="params">(tornado.web.RequestHandler)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self)</span>:</span></span><br><span class="line">        text = self.get_argument(<span class="string">'text'</span>)</span><br><span class="line">        width = self.get_argument(<span class="string">'width'</span>, <span class="number">40</span>)</span><br><span class="line">        self.write(textwrap.fill(text, int(width)))</span><br><span class="line">        </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    tornado.options.parse_command_line()</span><br><span class="line">    app = tornado.web.Application(</span><br><span class="line">        handlers=[</span><br><span class="line">            (<span class="string">r"/reverse/(\w+)"</span>, ReverseHandler),</span><br><span class="line">            (<span class="string">r"/wrap"</span>, WrapHandler)</span><br><span class="line">        ]</span><br><span class="line">    )</span><br><span class="line">    http_server = tornado.httpserver.HTTPServer(app)</span><br><span class="line">    http_server.listen(options.port)</span><br><span class="line">    tornado.ioloop.IOLoop.instance().start()</span><br></pre></td></tr></table></figure></div>
<p>命令行运行：<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="code"><pre><span class="line">python string_service.py --port=8000</span><br></pre></td></tr></table></figure></div></p>
<p>请求链接和返回值：<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> GET请求</span></span><br><span class="line">curl http://localhost:8000/reverse/stressed</span><br><span class="line"><span class="meta">#</span><span class="bash"> 响应</span></span><br><span class="line">desserts</span><br><span class="line">curl http://localhost:8000/reverse/slipup</span><br><span class="line"><span class="meta">#</span><span class="bash"> 响应</span></span><br><span class="line">pupils</span><br><span class="line"><span class="meta">#</span><span class="bash"> POST请求</span></span><br><span class="line">http://localhost:8000/wrap -d text=Lorem+ipsum+dolor+sit+amet,+consectetuer+adipiscing+elit.</span><br><span class="line"><span class="meta">#</span><span class="bash"> 响应</span></span><br><span class="line">Lorem ipsum dolor sit amet, consectetuer</span><br><span class="line">adipiscing elit.</span><br></pre></td></tr></table></figure></div></p>
<h6 id="代码讲解"><a href="#代码讲解" class="headerlink" title="代码讲解"></a>代码讲解</h6><p>Application类在”handlers”参数中实例化了两个RequestHandler子类对象。<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line">app = tornado.web.Application(handlers=[</span><br><span class="line">    (<span class="string">r"/reverse/(\w+)"</span>, ReverseHandler),</span><br><span class="line">    (<span class="string">r"/wrap"</span>, WrapHandler)</span><br><span class="line">])</span><br></pre></td></tr></table></figure></div></p>
<ol>
<li>使用正则表达式匹配以字符串/reverse/开始并紧跟着一个或多个字母的路径。</li>
<li><p>Tornado保存匹配括号中表达式的字符串，将其作为参数传递给RequestHandler的子类中。</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ReverseHandler</span><span class="params">(tornado.web.RequestHandler)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, input)</span>:</span></span><br><span class="line">        self.write(input[::<span class="number">-1</span>])</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>get方法有一个额外的参数input，这个参数将包含正则表达式匹配的第一个括号里的字符串。</p>
</li>
<li><p>如果正则表达式中有一系列额外的括号，匹配的字符串将被按照在正则表达式中出现的顺序作为额外的参数传递进来。</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WrapHandler</span><span class="params">(tornado.web.RequestHandler)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self)</span>:</span></span><br><span class="line">        text = self.get_argument(<span class="string">'text'</span>)</span><br><span class="line">        width = self.get_argument(<span class="string">'width'</span>, <span class="number">40</span>)</span><br><span class="line">        self.write(textwrap.fill(text, int(width)))</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>WrapHandler类定义了一个post方法，该类可以接收HTTP的POST方法的请求。</p>
</li>
<li>使用RequestHandler对象的get_argument方法来捕获POST请求传递的参数。（Tornado可以解析URLencoded和multipart结构的POST请求）。</li>
<li>从POST中获得了文本和宽度的参数，可以使用Python内建的textwrap模块来指定宽度装饰文本，并将结果字符串写回到HTTP响应中。</li>
</ol>
<h4 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h4><p>使用RequestHandler类的set_status()方法显式地设置HTTP状态码。<br>Tornado会自动地设置HTTP状态码。下面是一个常用情况的纲要：</p>
<hr>
<p>404 Not Found<br>Tornado会在HTTP请求的路径无法匹配任何RequestHandler类相对应的模式时返回404（Not Found）响应码。</p>
<p>400 Bad Request<br>如果你调用了一个没有默认值的get_argument函数，并且没有发现给定名称的参数，Tornado将自动返回一个400（Bad Request）响应码。</p>
<p>405 Method Not Allowed<br>如果传入的请求使用了RequestHandler中没有定义的HTTP方法（比如，一个POST请求，但是处理函数中只有定义了get方法），Tornado将返回一个405（Methos Not Allowed）响应码。</p>
<p>500 Internal Server Error<br>当程序遇到任何不能让其退出的错误时，Tornado将返回500（Internal Server Error）响应码。你代码中任何没有捕获的异常也会导致500响应码。</p>
<p>200 OK<br>如果响应成功，并且没有其他返回码被设置，Tornado将默认返回一个200（OK）响应码。</p>
<hr>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tornado.httpserver</span><br><span class="line"><span class="keyword">import</span> tornado.ioloop</span><br><span class="line"><span class="keyword">import</span> tornado.options</span><br><span class="line"><span class="keyword">import</span> tornado.web</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> tornado.options <span class="keyword">import</span> define, options</span><br><span class="line">define(<span class="string">"port"</span>, default=<span class="number">8000</span>, help=<span class="string">"run on the given port"</span>, type=int)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexHandler</span><span class="params">(tornado.web.RequestHandler)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self)</span>:</span></span><br><span class="line">        greeting = self.get_argument(<span class="string">'greeting'</span>, <span class="string">'Hello'</span>)</span><br><span class="line">        self.write(greeting + <span class="string">', friendly user!'</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">write_error</span><span class="params">(self, status_code, **kwargs)</span>:</span></span><br><span class="line">        self.write(<span class="string">"Gosh darnit, user! You caused a %d error."</span> % status_code)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    tornado.options.parse_command_line()</span><br><span class="line">    app = tornado.web.Application(handlers=[(<span class="string">r"/"</span>, IndexHandler)])</span><br><span class="line">    http_server = tornado.httpserver.HTTPServer(app)</span><br><span class="line">    http_server.listen(options.port)</span><br><span class="line">    tornado.ioloop.IOLoop.instance().start()</span><br></pre></td></tr></table></figure></div>
<ol>
<li>Tornado将默认向客户端发送一个包含状态码和错误信息的简短片段。</li>
<li>重写write_error方法在你的RequestHandler类中。</li>
</ol>
<p>错误请求示例：<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="code"><pre><span class="line">curl -d foo=bar http://localhost:8000/</span><br><span class="line"><span class="meta">#</span><span class="bash"> 响应</span></span><br><span class="line">Gosh darnit, user! You caused a 405 error.</span><br></pre></td></tr></table></figure></div></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue学习笔记三</title>
    <url>/2020/06/08/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%89/</url>
    <content><![CDATA[<a id="more"></a>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>GIT分支切换</title>
    <url>/2020/06/10/GIT%E5%88%86%E6%94%AF%E5%88%87%E6%8D%A2/</url>
    <content><![CDATA[<p>工作中经常使用的git命令。<br><a id="more"></a><br>下载代码<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="code"><pre><span class="line">git clone 远程地址</span><br></pre></td></tr></table></figure></div></p>
<p>下载指定分支代码<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="code"><pre><span class="line">git clone -b 分支名称 远程地址</span><br></pre></td></tr></table></figure></div></p>
<p>查看状态<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure></div></p>
<p>拉取线上代码<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="code"><pre><span class="line">git pull</span><br></pre></td></tr></table></figure></div></p>
<p>切换分支<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="code"><pre><span class="line">git checkout 分支</span><br></pre></td></tr></table></figure></div></p>
<p>查看分支<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看本地分支</span></span><br><span class="line">git branch</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看所有分支</span></span><br><span class="line">git branch -a</span><br></pre></td></tr></table></figure></div></p>
<p>将所有文件提交到待提交状态<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure></div></p>
<p>提交到git跟踪状态<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="code"><pre><span class="line">git commit -m ""</span><br></pre></td></tr></table></figure></div></p>
<p>查看提交到远程什么位置<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure></div></p>
<p>推送到远程master分支<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure></div></p>
<p>创建并切换到新分支<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="code"><pre><span class="line">git checkout -b dev</span><br></pre></td></tr></table></figure></div></p>
<p>推送到远程分支<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="code"><pre><span class="line">git push origin 分支名称</span><br></pre></td></tr></table></figure></div></p>
<p>切换到master分支<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="code"><pre><span class="line">git checkout master</span><br></pre></td></tr></table></figure></div></p>
<p>合并分支<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="code"><pre><span class="line">git merge 分支名称</span><br></pre></td></tr></table></figure></div></p>
<p>删除分支<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 本地分支删除</span></span><br><span class="line">git branch -D 分支名称</span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除远程分支</span></span><br><span class="line">git push origin :分支名称</span><br></pre></td></tr></table></figure></div></p>
<p>回退上一个版本<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="code"><pre><span class="line">git reset --hard head^</span><br></pre></td></tr></table></figure></div></p>
<p>查看git日志<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="code"><pre><span class="line">git log</span><br></pre></td></tr></table></figure></div></p>
<p>查看之前提交记录<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="code"><pre><span class="line">git reflog</span><br></pre></td></tr></table></figure></div></p>
<p>回滚到之前提交内容<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="code"><pre><span class="line">git reset --hard HRAD@&#123;&#125;</span><br><span class="line">或者</span><br><span class="line">git reset --hard 最前面7位字母数字</span><br></pre></td></tr></table></figure></div></p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>GIT忽略指定文件或文件夹</title>
    <url>/2020/06/22/GIT%E5%BF%BD%E7%95%A5%E6%8C%87%E5%AE%9A%E6%96%87%E4%BB%B6%E6%88%96%E6%96%87%E4%BB%B6%E5%A4%B9/</url>
    <content><![CDATA[<p>平时工作都使用Git托管代码，代码提交难免会提交一些无用文件或文件夹，记录一下如何过滤掉不需要的文件或文件夹！<br><a id="more"></a><br>在项目的根目录当中创建.gitignore文件。<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div></p>
<p><a href="https://github.com/github/gitignore" target="_blank" rel="noopener">https://github.com/github/gitignore</a><br>github提供了一个通用的.gitignore库，如果懒得自己设置，可以直接在这个库里找找有没有你想要的忽略文件。</p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript判断类型</title>
    <url>/2020/06/27/JavaScript%E5%88%A4%E6%96%AD%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<p>JavaScript中需要使用类型判断，记录一下！<br><a id="more"></a></p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>Python判断类型</title>
    <url>/2020/06/24/Python%E5%88%A4%E6%96%AD%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<p>Python中经常需要用到类型判断<br><a id="more"></a><br>对比较常用的类型进行判断<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line"># 判断数组list</span><br><span class="line">isinstance(res2,list)</span><br><span class="line"># 判断字典tuple</span><br><span class="line">isinstance(res2,tuple)</span><br><span class="line"># 判断数字int</span><br><span class="line">isinstance(res2,int)</span><br><span class="line"># 判断字符串str</span><br><span class="line">isinstance(res2,str)</span><br></pre></td></tr></table></figure></div></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Jmeter随机选取指定字符串</title>
    <url>/2020/07/07/Jmeter%E9%9A%8F%E6%9C%BA%E9%80%89%E5%8F%96%E6%8C%87%E5%AE%9A%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    <content><![CDATA[<p>jmeter做压测用到的随机读取指定字符串的方法！<br><a id="more"></a></p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">$&#123;__CSVRead(/home/liuxinbo/test/listpage/gender.txt,$&#123;__Random(0,2,)&#125;)&#125;</span><br><span class="line">随机获取[0, 2]中一个，第三个可以填变量名，用来后面使用！</span><br><span class="line">$&#123;__Random(0,2,)</span><br><span class="line">读取文件</span><br><span class="line">$&#123;__CSVRead(文件路径，元素)&#125;</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>测试</category>
      </categories>
      <tags>
        <tag>测试</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac使用brew管理不同版本的node</title>
    <url>/2020/07/13/Mac%E4%BD%BF%E7%94%A8brew%E7%AE%A1%E7%90%86%E4%B8%8D%E5%90%8C%E7%89%88%E6%9C%AC%E7%9A%84node/</url>
    <content><![CDATA[<p>在使用hexo做博客时，出现nodejs版本过高，无法同步到github的情况，需要切换nodejs版本，记录下mac下切换过程！<br><a id="more"></a></p>
<h4 id="1-查看当前可用版本"><a href="#1-查看当前可用版本" class="headerlink" title="1. 查看当前可用版本"></a>1. 查看当前可用版本</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">brew search node</span><br></pre></td></tr></table></figure>
<p>后面打勾的表示已安装node版本。<br><img src="/image/Node/Node-1.png"></p>
<h4 id="2-安装指定版本"><a href="#2-安装指定版本" class="headerlink" title="2. 安装指定版本"></a>2. 安装指定版本</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">brew install node@12</span><br><span class="line"># 若要安装12.x最新版本</span><br><span class="line">brew install node12-lts</span><br></pre></td></tr></table></figure>
<h4 id="3-切换到指定版本"><a href="#3-切换到指定版本" class="headerlink" title="3. 切换到指定版本"></a>3. 切换到指定版本</h4><p>取消当前版本<br><figure class="highlight"><table><tr><td class="code"><pre><span class="line">brew unlink node</span><br></pre></td></tr></table></figure></p>
<p>切换到指定版本<br><figure class="highlight"><table><tr><td class="code"><pre><span class="line">brew link node@12</span><br></pre></td></tr></table></figure></p>
<p>一行命令完成上面内容<br><figure class="highlight"><table><tr><td class="code"><pre><span class="line">brew unlink node &amp;&amp; brew link --force node@12</span><br></pre></td></tr></table></figure></p>
<h4 id="4-查看当前版本"><a href="#4-查看当前版本" class="headerlink" title="4. 查看当前版本"></a>4. 查看当前版本</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Tool</category>
      </categories>
      <tags>
        <tag>Tool</tag>
      </tags>
  </entry>
  <entry>
    <title>黑苹果开启hidpi</title>
    <url>/2020/07/19/%E9%BB%91%E8%8B%B9%E6%9E%9C%E5%BC%80%E5%90%AFhidpi/</url>
    <content><![CDATA[<p>黑苹果默认不开启hidpi，需要手动开启hidpi，记录一下如何开启hidpi。<br><a id="more"></a><br>一. 运行如下代码，开启hidpi<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">sh -c &quot;$(curl -fsSL https://html.sqlsec.com/hidpi.sh)&quot;</span><br></pre></td></tr></table></figure></div></p>
<ol>
<li>输入root帐号密码</li>
<li>选择2，开启HIDPI（同时注入EDID）</li>
<li>因为我的黑苹果是笔记本，所以选择3，MacBook Pro.</li>
<li>选择分辨率，2的效果比较好，1902X1080显示屏（使用1424X802分辨率，修复休眠唤醒后的屏幕缩小问题）</li>
<li>重启电脑，首次可能出现开机LOGO变得巨大问题，之后不会出现了。</li>
</ol>
]]></content>
      <categories>
        <category>MAC</category>
      </categories>
      <tags>
        <tag>MAC</tag>
      </tags>
  </entry>
  <entry>
    <title>Chrome开启扩展程序按钮</title>
    <url>/2020/08/01/Chrome%E5%BC%80%E5%90%AF%E6%89%A9%E5%B1%95%E7%A8%8B%E5%BA%8F%E6%8C%89%E9%92%AE/</url>
    <content><![CDATA[<p>谷歌浏览器每次安装扩展都需要进设置选择，配置在工具栏显示扩展程序按钮。<br><a id="more"></a></p>
<ol>
<li>打开谷歌浏览器。</li>
<li>地址栏中输入chrome://flags 然后按Enter。打开高级配置页面。</li>
<li>在“ 搜索 ”框中键入Extensions Toolbar Menu。</li>
<li>点击Defauit 右侧的箭头，在下拉菜单中选择 Enabied (已启用)。<br><img src="/image/Other/Extensions_Toolbar_Menu.png"></li>
</ol>
]]></content>
      <categories>
        <category>Tool</category>
      </categories>
      <tags>
        <tag>Tool</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS安装7-Zip</title>
    <url>/2020/08/05/CentOS%E5%AE%89%E8%A3%857-Zip/</url>
    <content><![CDATA[<p>平时都使用zip和unzip进行打包和解包，当文件过大是会出现报错的情况，后来使用7-Zip成功解包，记录下7zip使用步骤。<br><a id="more"></a></p>
<h4 id="CentOS安装7-Zip，使用yum安装"><a href="#CentOS安装7-Zip，使用yum安装" class="headerlink" title="CentOS安装7-Zip，使用yum安装"></a>CentOS安装7-Zip，使用yum安装</h4><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">yum install -y p7zip</span><br></pre></td></tr></table></figure></div>
<h4 id="7-Zip使用"><a href="#7-Zip使用" class="headerlink" title="7-Zip使用"></a>7-Zip使用</h4><ol>
<li><p>命令简介</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">7z &lt;命令行&gt; [&lt;选项&gt;...] &lt;基本档案名称&gt; [&lt;参数变量&gt;...]</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>打包命令</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">7z a 压缩包名.格式 文件夹</span><br><span class="line"># 例：</span><br><span class="line"># 增加test文件夹下的所有的文件和子文件夹到test.zip中，test.zip中的文件名包含test\前缀</span><br><span class="line">7z a test.zip test\</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>解包命令</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line"># 解压到当前目录</span><br><span class="line">7z x 压缩包</span><br><span class="line"># 例：</span><br><span class="line"># 从test.zip解压所有文件到当前文件夹</span><br><span class="line">7z x test.zip</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>删除文件</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line"># 删除压缩包中已bak结尾的文件</span><br><span class="line">7z d 压缩包 *.bak</span><br><span class="line"># 例：</span><br><span class="line"># 从test.zip中删除所有的bak文件</span><br><span class="line">7z d test.zip *.bak</span><br></pre></td></tr></table></figure></div>
</li>
</ol>
]]></content>
      <categories>
        <category>Tool</category>
      </categories>
      <tags>
        <tag>Tool</tag>
      </tags>
  </entry>
  <entry>
    <title>Python3.8中tornado报错NotImplementedError</title>
    <url>/2020/08/13/Python3-8%E4%B8%ADtornado%E6%8A%A5%E9%94%99NotImplementedError/</url>
    <content><![CDATA[<p>在Python3.8环境运行Tornado，记录一下报错原因和解决方案！<br><a id="more"></a></p>
<h4 id="一-报错信息"><a href="#一-报错信息" class="headerlink" title="一. 报错信息"></a>一. 报错信息</h4><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">".\index.py"</span>, line <span class="number">325</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    app.listen(port)</span><br><span class="line">  File <span class="string">"C:\Program Files\Python38\lib\site-packages\tornado\web.py"</span>, line <span class="number">2112</span>, <span class="keyword">in</span> listen</span><br><span class="line">    server.listen(port, address)</span><br><span class="line">  File <span class="string">"C:\Program Files\Python38\lib\site-packages\tornado\tcpserver.py"</span>, line <span class="number">152</span>, <span class="keyword">in</span> listen</span><br><span class="line">    self.add_sockets(sockets)</span><br><span class="line">  File <span class="string">"C:\Program Files\Python38\lib\site-packages\tornado\tcpserver.py"</span>, line <span class="number">165</span>, <span class="keyword">in</span> add_sockets</span><br><span class="line">    self._handlers[sock.fileno()] = add_accept_handler(</span><br><span class="line">  File <span class="string">"C:\Program Files\Python38\lib\site-packages\tornado\netutil.py"</span>, line <span class="number">279</span>, <span class="keyword">in</span> add_accept_handler</span><br><span class="line">    io_loop.add_handler(sock, accept_handler, IOLoop.READ)</span><br><span class="line">  File <span class="string">"C:\Program Files\Python38\lib\site-packages\tornado\platform\asyncio.py"</span>, line <span class="number">99</span>, <span class="keyword">in</span> add_handler</span><br><span class="line">    self.asyncio_loop.add_reader(fd, self._handle_events, fd, IOLoop.READ)</span><br><span class="line">  File <span class="string">"C:\Program Files\Python38\lib\asyncio\events.py"</span>, line <span class="number">501</span>, <span class="keyword">in</span> add_reader</span><br><span class="line">    <span class="keyword">raise</span> NotImplementedError</span><br><span class="line">NotImplementedError</span><br></pre></td></tr></table></figure></div>
<h4 id="二-报错原因："><a href="#二-报错原因：" class="headerlink" title="二. 报错原因："></a>二. 报错原因：</h4><p>  python3.8的asyncio 在 Windows 上默认使用 ProactorEventLoop 造成的，而不是之前的 SelectorEventLoop。jupyter 依赖 tornado，而 tornado 在 Window 上需要使用 SelectorEventLoop，所以报错。<br>详细信息请查看官方文档：<a href="https://www.tornadoweb.org/en/stable/index.html#installation" target="_blank" rel="noopener">官方文档</a></p>
<h4 id="三-解决方案："><a href="#三-解决方案：" class="headerlink" title="三. 解决方案："></a>三. 解决方案：</h4><p>在Windows下进行单独处理<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># windows 系统下 tornado 使用 使用 SelectorEventLoop</span></span><br><span class="line"><span class="keyword">import</span> platform</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> platform.system() == <span class="string">"Windows"</span>:</span><br><span class="line">    <span class="keyword">import</span> asyncio</span><br><span class="line">    asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())</span><br></pre></td></tr></table></figure></div></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql查询随机排序</title>
    <url>/2020/08/15/Mysql%E6%9F%A5%E8%AF%A2%E9%9A%8F%E6%9C%BA%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<p>查询Mysql数据库数据，有时需要随机出前十个，记录一下随机排序的方法。<br><a id="more"></a></p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">SELECT * FROM 表 ORDER BY RAND()</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>DB</category>
      </categories>
      <tags>
        <tag>DB</tag>
      </tags>
  </entry>
  <entry>
    <title>Mbps和MB/s换算</title>
    <url>/2020/08/18/Mbps%E5%92%8CMB-s%E6%8D%A2%E7%AE%97/</url>
    <content><![CDATA[<p>平时经常会使用到的两个概念，记录一下区别和换算方式。<br><a id="more"></a><br>Mbps即“传输速率”，也叫“带宽”。网线中经常说的几兆宽带，这里的“几兆的宽带”就是指多少Mbps。</p>
<p>8Mbps理论下载速度是1MB/s，但实际使用时8M的宽带往往达不到1MB/s的下载速度，但能在800KB/s以上。</p>
]]></content>
      <categories>
        <category>Tool</category>
      </categories>
      <tags>
        <tag>Tool</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP请求中几种常见的Content-Type类型</title>
    <url>/2020/08/20/HTTP%E8%AF%B7%E6%B1%82%E4%B8%AD%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E7%9A%84Content-Type%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<p>记录一下请求头中Content-Type常见的取值<br><a id="more"></a><br>POST请求的数据主体放在body中，服务端根据请求头中的Content-Type字段来获取body的编码方式，进而对数据进行解析。</p>
<h4 id="application-x-www-form-urlencoded"><a href="#application-x-www-form-urlencoded" class="headerlink" title="application/x-www-form-urlencoded"></a>application/x-www-form-urlencoded</h4><p>最常见的 POST 提交数据的方式，原生Form表单，如果不设置 enctype 属性，默认为application/x-www-form-urlencoded 。</p>
<p>Content-Type被指定为 application/x-www-form-urlencoded，表单数据会转换为键值对并按照 key1=val1&amp;key2=val2 的方式进行编码，key 和 val 会进行 URL 转码。大部分服务端语言都对这种方式有很好的支持。若使用AJAX 提交数据，也可使用这种方式。例如 jQuery，Content-Type 默认值都是”application/x-www-form-urlencoded;charset=utf-8”。</p>
<h4 id="multipart-form-data"><a href="#multipart-form-data" class="headerlink" title="multipart/form-data"></a>multipart/form-data</h4><p>另一个常见的 POST 数据提交的方式， Form 表单的 enctype 设置为multipart/form-data，它会将表单的数据处理为一条消息，以标签为单元，用分隔符（这就是boundary的作用）分开，类似我们上面Content-Type中的例子。　由于这种方式将数据有很多部分，它既可以上传键值对，也可以上传文件，甚至多个文件。当上传的字段是文件时，会有Content-Type来说明文件类型；Content-disposition，用来说明字段的一些信息。每部分都是以 –boundary 开始，紧接着是内容描述信息，然后是回车，最后是字段具体内容（字段、文本或二进制等）。如果传输的是文件，还要包含文件名和文件类型信息。消息主体最后以 –boundary– 标示结束。</p>
<h4 id="application-json"><a href="#application-json" class="headerlink" title="application/json"></a>application/json</h4><p>Content-Type: application/json 作为响应头比较常见。实际上，现在越来越多的人把它作为请求头，用来告诉服务端消息主体是序列化后的 JSON 字符串，其中一个好处就是JSON 格式支持比键值对复杂得多的结构化数据。由于 JSON 规范的流行，除了低版本 IE 之外的各大浏览器都原生支持JSON.stringify，服务端语言也都有处理 JSON 的函数，使用起来没有困难。Google 的 AngularJS 中的 Ajax 功能，默认就是提交 JSON 字符串。</p>
]]></content>
      <categories>
        <category>测试</category>
      </categories>
      <tags>
        <tag>测试</tag>
      </tags>
  </entry>
  <entry>
    <title>官网下载Java连接Mysql的jar包</title>
    <url>/2020/08/24/%E5%AE%98%E7%BD%91%E4%B8%8B%E8%BD%BDJava%E8%BF%9E%E6%8E%A5Mysql%E7%9A%84jar%E5%8C%85/</url>
    <content><![CDATA[<p>记录如何在mysql官网下载Java连接Mysql的jar包<br><a id="more"></a></p>
<ol>
<li>官网地址：<a href="https://dev.mysql.com/downloads/" target="_blank" rel="noopener">https://dev.mysql.com/downloads/</a><br><img src="/image/DB/mysql_jar_1.png"></li>
<li>平台选择<br><img src="/image/DB/mysql_jar_2.png"></li>
<li>点击下载<br><img src="/image/DB/mysql_jar_3.png"></li>
<li>选择不登录进行下载<br><img src="/image/DB/mysql_jar_4.png"></li>
<li>打开压缩包解压jar包<br><img src="/image/DB/mysql_jar_5.png"></li>
</ol>
]]></content>
      <categories>
        <category>DB</category>
      </categories>
      <tags>
        <tag>DB</tag>
      </tags>
  </entry>
  <entry>
    <title>js中RegExp对象</title>
    <url>/2020/08/27/js%E4%B8%ADRegExp%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<p>js中经常使用到正则表达式，记录下RegExp对象的使用。<br><a id="more"></a></p>
<h4 id="新建正则表达式"><a href="#新建正则表达式" class="headerlink" title="新建正则表达式"></a>新建正则表达式</h4><p>一 使用字面量<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/xyz/</span>;</span><br></pre></td></tr></table></figure></div></p>
<p>二 使用RegExp构造函数<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> regex = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'xyz'</span>);</span><br></pre></td></tr></table></figure></div></p>
<p>两种写法是等价的，都新建了一个内容为xyz的正则表达式对象。<br>区别为：<br>第一种方法在引擎编译代码时，会新建正则表达式，第二种方法在运行时新建正则表达式，所以前者的效率较高。<br>由于前者比较便利和直观，所以在实际应用中都采用字面量来定义正则表达式。</p>
<p>RegExp构造函数还可以接受第二个参数，表示修饰符。<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> regex = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'xyz'</span>, <span class="string">'i'</span>);</span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/xyz/i</span>;</span><br></pre></td></tr></table></figure></div></p>
<h4 id="实例属性"><a href="#实例属性" class="headerlink" title="实例属性"></a>实例属性</h4><p>正则对象的实例属性分成两类。</p>
<p>一、修饰符相关<br>  用于了解设置了什么修饰符。</p>
<ul>
<li>RegExp.prototype.ignoreCase：返回一个布尔值，表示是否设置了i修饰符。</li>
<li>RegExp.prototype.global：返回一个布尔值，表示是否设置了g修饰符。</li>
<li>RegExp.prototype.multiline：返回一个布尔值，表示是否设置了m修饰符。</li>
<li>RegExp.prototype.flags：返回一个字符串，包含了已经设置的所有修饰符，按字母排序。<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 四个属性都是只读的</span></span><br><span class="line"><span class="keyword">var</span> r = <span class="regexp">/abc/igm</span>;</span><br><span class="line"></span><br><span class="line">r.ignoreCase </span><br><span class="line"><span class="comment">// true</span></span><br><span class="line">r.global </span><br><span class="line"><span class="comment">// true</span></span><br><span class="line">r.multiline </span><br><span class="line"><span class="comment">// true</span></span><br><span class="line">r.flags </span><br><span class="line"><span class="comment">// 'gim'</span></span><br></pre></td></tr></table></figure></div>
</li>
</ul>
<p>二、与修饰符无关属性</p>
<ul>
<li>RegExp.prototype.lastIndex：返回一个整数，表示下一次开始搜索的位置。该属性可读写，但是只在进行连续搜索时有意义，详细介绍请看后文。</li>
<li>RegExp.prototype.source：返回正则表达式的字符串形式（不包括反斜杠），该属性只读。<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> r = <span class="regexp">/abc/igm</span>;</span><br><span class="line"></span><br><span class="line">r.lastIndex </span><br><span class="line"><span class="comment">// 0</span></span><br><span class="line">r.source </span><br><span class="line"><span class="comment">// "abc"</span></span><br></pre></td></tr></table></figure></div>
</li>
</ul>
<h4 id="实例方法"><a href="#实例方法" class="headerlink" title="实例方法"></a>实例方法</h4><ol>
<li>RegExp.prototype.test()<br> 正则实例对象的test方法返回一个布尔值，表示当前模式是否能匹配参数字符串。<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 验证参数字符串之中是否包含cat，结果返回true。</span></span><br><span class="line"></span><br><span class="line">/cat/.test(<span class="string">'cats and dogs'</span>) </span><br><span class="line"><span class="comment">// true</span></span><br></pre></td></tr></table></figure></div>
</li>
</ol>
<p>如果正则表达式带有g修饰符，则每一次test方法都从上一次结束的位置开始向后匹配。<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> r = <span class="regexp">/b/g</span>;</span><br><span class="line"><span class="keyword">var</span> s = <span class="string">'abcabc'</span>;</span><br><span class="line"></span><br><span class="line">r.lastIndex </span><br><span class="line"><span class="comment">// 0</span></span><br><span class="line">r.test(s) </span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">r.lastIndex </span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line">r.test(s) </span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">r.lastIndex </span><br><span class="line"><span class="comment">// 5</span></span><br><span class="line">r.test(s) </span><br><span class="line"><span class="comment">// false</span></span><br></pre></td></tr></table></figure></div></p>
<p>上述代码中正则表达式使用了g修饰符，表示是全局搜索，会出现多个结果。<br>三次使用test方法，<strong>每次开始搜索的位置都是上一次匹配的下一个位置</strong>。</p>
<p>使用带有g修饰符，可以通过正则对象的lastIndex属性指定开始搜索的位置。<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> r = <span class="regexp">/b/g</span>;</span><br><span class="line"><span class="keyword">var</span> s = <span class="string">'abcabc'</span>;</span><br><span class="line"></span><br><span class="line">r.lastIndex = <span class="number">5</span>;</span><br><span class="line">r.test(s) </span><br><span class="line"><span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">r.lastIndex </span><br><span class="line"><span class="comment">// 0</span></span><br><span class="line">r.test(s)</span><br><span class="line"><span class="comment">// true</span></span><br></pre></td></tr></table></figure></div></p>
<p>上述代码指定从字符串的第六个位置开始搜索，这个位置为空，所以返回false。<br>同时，lastIndex属性重置为0，所以第二次执行r.test(s)会返回true。</p>
<p>注：带有g修饰符时，正则表达式内部会记住上一次的lastIndex属性，如果这时更换所要匹配的字符串，会出现难以察觉的错误。<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> r = <span class="regexp">/bb/g</span>;</span><br><span class="line">r.test(<span class="string">'bb'</span>) </span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">r.lastIndex</span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line">r.test(<span class="string">'-bb-'</span>) </span><br><span class="line"><span class="comment">// false</span></span><br></pre></td></tr></table></figure></div></p>
<p>上述代码，由于正则表达式r是从上一次的lastIndex位置开始匹配，导致第二次执行test方法时出现预期之外的结果。</p>
<p>lastIndex属性只对同一个正则表达式有效<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="regexp">/a/g</span>.test(<span class="string">'babaa'</span>)) count++;</span><br></pre></td></tr></table></figure></div></p>
<p>上述代码会无限循环，因为while循环的每次匹配条件都是一个新的正则表达式，导致lastIndex属性总是等于0。</p>
<p>如果正则模式是一个空字符串，则匹配所有字符串。<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">''</span>).test(<span class="string">'abc'</span>)</span><br><span class="line"><span class="comment">// true</span></span><br></pre></td></tr></table></figure></div></p>
<p>消除字符串首尾空格</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'  #id div.class  '</span>;</span><br><span class="line"></span><br><span class="line">str.replace(<span class="regexp">/^\s+|\s+$/g</span>, <span class="string">''</span>)</span><br><span class="line"><span class="comment">// "#id div.class"</span></span><br></pre></td></tr></table></figure></div>
<p><img src="/image/"></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>Tornado中使用cookie</title>
    <url>/2020/09/02/Tornado%E4%B8%AD%E4%BD%BF%E7%94%A8cookie/</url>
    <content><![CDATA[<p>记录下Tornado中cookie的使用<br><a id="more"></a></p>
<h2 id="一、普通cookie"><a href="#一、普通cookie" class="headerlink" title="一、普通cookie"></a>一、普通cookie</h2><h4 id="1-创建cookie"><a href="#1-创建cookie" class="headerlink" title="1. 创建cookie"></a>1. 创建cookie</h4><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line">self.set_cookie(name, value, domain=<span class="literal">None</span>,expires=<span class="literal">None</span>, path=<span class="string">"/"</span>, expires_days=<span class="literal">None</span>, **kwargs)</span><br></pre></td></tr></table></figure></div>
<p>参数详解：</p>
<table>
<thead>
<tr>
<th style="text-align:left">参数名</th>
<th style="text-align:left">意义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">name</td>
<td style="text-align:left">创建cookie的名称</td>
</tr>
<tr>
<td style="text-align:left">value</td>
<td style="text-align:left">创建cookie的值</td>
</tr>
<tr>
<td style="text-align:left">domain</td>
<td style="text-align:left">提交cookie时匹配的域名</td>
</tr>
<tr>
<td style="text-align:left">path</td>
<td style="text-align:left">提交cookie时匹配的路径</td>
</tr>
<tr>
<td style="text-align:left">expires</td>
<td style="text-align:left">cookie的有效期,可以是时间戳整数,时间元组,datetime类型.为UTC时间</td>
</tr>
<tr>
<td style="text-align:left">expires_days</td>
<td style="text-align:left">cookie的有效期天数.优先级低于expires</td>
</tr>
</tbody>
</table>
<p>案例：<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PCookieHandler</span><span class="params">(RequestHandler)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.set_cookie(<span class="string">"name"</span>, <span class="string">"kainhuck"</span>)</span><br><span class="line">        self.write(<span class="string">"ok"</span>)</span><br></pre></td></tr></table></figure></div></p>
<h4 id="2-原理"><a href="#2-原理" class="headerlink" title="2. 原理"></a>2. 原理</h4><p>设置cookie的原理实际上是通过设置headers中的Set-Cookie来实现的。<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line">self.set_header(<span class="string">"Set-Cookie"</span>, <span class="string">"name=kainhuck; Path=/"</span>)</span><br></pre></td></tr></table></figure></div></p>
<h4 id="3-获取cookie"><a href="#3-获取cookie" class="headerlink" title="3. 获取cookie"></a>3. 获取cookie</h4><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line">self.get_cookie(name, default=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure></div>
<p>参数解释：</p>
<table>
<thead>
<tr>
<th style="text-align:left">参数</th>
<th style="text-align:left">意义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">name</td>
<td style="text-align:left">要获取的cookie的名称</td>
</tr>
<tr>
<td style="text-align:left">default</td>
<td style="text-align:left">如果要获取的cookie值不存在,则返回default的值</td>
</tr>
</tbody>
</table>
<p>示例：<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GetComCookie</span><span class="params">(RequestHandler)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self)</span>:</span></span><br><span class="line">        cookie = self.get_cookie(<span class="string">"name"</span>, <span class="string">"NULL"</span>)</span><br><span class="line">        print(<span class="string">"cookie:"</span>,cookie)</span><br><span class="line">        self.write(<span class="string">"ok"</span>)</span><br></pre></td></tr></table></figure></div></p>
<h4 id="4-清除cookie"><a href="#4-清除cookie" class="headerlink" title="4. 清除cookie"></a>4. 清除cookie</h4><p>共有两种方案<br><strong>方法一：</strong></p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line">self.clear_cookie(name, path=<span class="string">"/"</span>, domain=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure></div>
<p>删除名为name,并同时匹配domain和path的cookie<br><strong>方法二：</strong></p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line">self.clear_all_cookies(path=<span class="string">"/"</span>, domain=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure></div>
<p>删除同时匹配path和domain的所有cookie<br>示例：</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClearPCookieHandler</span><span class="params">(RequestHandler)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="comment"># 清除一个cookie</span></span><br><span class="line">        <span class="comment"># self.clear_cookie("hello")</span></span><br><span class="line">        <span class="comment"># 清除所有cookie</span></span><br><span class="line">        self.clear_all_cookies()</span><br><span class="line">        self.write(<span class="string">"ok"</span>)</span><br></pre></td></tr></table></figure></div>
<h2 id="二、安全cookie"><a href="#二、安全cookie" class="headerlink" title="二、安全cookie"></a>二、安全cookie</h2><p>tornado提供了一种对cookie进行简易加密方式来防止Cookie被恶意篡改</p>
<h4 id="1-设置安全cookie"><a href="#1-设置安全cookie" class="headerlink" title="1.设置安全cookie"></a>1.设置安全cookie</h4><p>设置安全cookie需要一个进行混淆加密的秘钥<br>例：生成秘钥的方法<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line">key = base64.b64encode(uuid.uuid4().bytes + uuid.uuid4().bytes)</span><br><span class="line"><span class="comment"># zmxgH4FZrSHWgtRtbjMnWSP7U8E+P/0Llu5ihRmWbGM4=</span></span><br></pre></td></tr></table></figure></div></p>
<p>在tornado.web.Application里添加cookie_secret<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="string">"cookie_secret"</span>: <span class="string">"zadJa2GJTOu5wGL62RngnVrUxVoQ80H2u6qjAfQ4rv4="</span></span><br></pre></td></tr></table></figure></div></p>
<p>例：<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SCookieHandler</span><span class="params">(RequestHandler)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">        self.set_secure_cookie(<span class="string">"wery"</span>, <span class="string">"good"</span>)</span><br><span class="line">        self.write(<span class="string">"ok"</span>)</span><br></pre></td></tr></table></figure></div></p>
<p>存储样子：<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">2|1:0|10:1548248269|5:very|8:Z29vZA==|c611b726829b3ba268e7e01da446a9daed7262b505e29ec34fdf239cef2fcfc8</span><br></pre></td></tr></table></figure></div></p>
<p>说明：</p>
<ul>
<li>以竖线分割, 冒号前面表示后面有几位</li>
<li>安全cookie的版本,默认使用版本2</li>
<li>默认为0</li>
<li>时间戳</li>
<li>cookie名</li>
<li>base64编码的cookie值</li>
<li>签名值,不带长度说明</li>
</ul>
<h4 id="2-获取安全cookie"><a href="#2-获取安全cookie" class="headerlink" title="2.获取安全cookie"></a>2.获取安全cookie</h4><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line">self.get_secure_cookie(name, value=<span class="literal">None</span>, max_age_days=<span class="number">31</span>, min_version=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure></div>
<p>说明一: 如果cookie存在且验证通过,返回cookie值,否则返回None</p>
<p>说明二: max_age_days不同于expires_days,expires_days设置浏览器中的cookie的有效时间.而max_age_days是过滤安全cookie的时间戳</p>
<p>例：<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GetSCookieHandler</span><span class="params">(RequestHandler)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">        scookie = self.get_secure_cookie(<span class="string">"very"</span>)</span><br><span class="line">        print(<span class="string">"scookie ="</span>, scookie)</span><br><span class="line">        self.write(<span class="string">"ok"</span>)</span><br></pre></td></tr></table></figure></div></p>
<p>注：<br>安全cookie其实并不安全,只是增加了破解cookie的难度,不要使用cookie存储敏感数据。</p>
]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux中top命令详解</title>
    <url>/2020/09/03/Linux%E4%B8%ADtop%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<p>top命令是Linux下常用的性能分析工具，能够实时显示系统中各个进程的资源占用状况，类似于Windows的任务管理器。<br><a id="more"></a><br>top可以动态显示系统当前的进程和其他状况,通过用户按键来不断刷新当前状态。如果在前台执行该命令,它将独占前台,直到用户终止该程序为止。top命令提供了实时的对系统处理器的状态监视。它将显示系统中CPU最“敏感”的任务列表。该命令可以按CPU使用。内存使用和执行时间对任务进行排序，而且该命令的很多特性都可以通过交互式命令或者在个人定制文件中进行设定。</p>
<h4 id="参数含义"><a href="#参数含义" class="headerlink" title="参数含义"></a>参数含义</h4><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="code"><pre><span class="line">top - 10:13:34 up 136 days, 13:04,  2 users,  load average: 0.37, 0.48, 0.35</span><br><span class="line">Tasks: 174 total,   1 running, 173 sleeping,   0 stopped,   0 zombie</span><br><span class="line"><span class="meta">%</span><span class="bash">Cpu(s): 10.3 us,  1.2 sy,  0.0 ni, 88.3 id,  0.1 wa,  0.0 hi,  0.1 si,  0.0 st</span></span><br><span class="line">KiB Mem : 65809520 total,   429196 free, 43646696 used, 21733628 buff/cache</span><br><span class="line">KiB Swap:        0 total,        0 free,        0 used. 21564656 avail Mem </span><br><span class="line"></span><br><span class="line">  PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND                </span><br><span class="line"> 2649 root      20   0 4868656 2.585g   8108 S  74.8  4.1   6661:23 tensorflow_mode        </span><br><span class="line">12875 root      20   0 1393632 989432  13688 S  14.0  1.5   9:39.73 python3.6              </span><br><span class="line">12877 root      20   0 1394548 990492  13688 S   8.6  1.5   9:51.05 python3.6              </span><br><span class="line"> 2578 root      20   0 1079852  16460    848 S   3.3  0.0 350:59.98 docker-proxy           </span><br><span class="line">12889 root      20   0 1392496 988172  13624 S   2.0  1.5   5:01.62 python3.6              </span><br><span class="line">    9 root      20   0       0      0      0 S   0.3  0.0 109:11.55 rcu_sched              </span><br><span class="line">  451 nobody    20   0   37884   4764    876 S   0.3  0.0  46:01.01 nginx                  </span><br><span class="line"> 1076 root      20   0 1045020  24348   6900 S   0.3  0.0 424:33.88 filebeat               </span><br><span class="line"> 1845 root      20   0 11.313g 0.011t   1384 S   0.3 17.3 453:44.92 npuc_bin               </span><br><span class="line">20988 root      20   0 30.079g 0.014t   1912 S   0.3 23.3   4:45.66 ranker_bin             </span><br><span class="line">    1 root      20   0   43460   3372   1976 S   0.0  0.0  42:00.70 systemd                </span><br><span class="line">    2 root      20   0       0      0      0 S   0.0  0.0   0:06.25 kthreadd               </span><br><span class="line">    3 root      20   0       0      0      0 S   0.0  0.0   2:15.63 ksoftirqd/0</span><br></pre></td></tr></table></figure></div>
<p>统计信息区前五行是系统整体的统计信息。<br>第一行是任务队列信息，同 uptime 命令的执行结果。其内容如下：<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">10:13:34   当前时间</span><br><span class="line">136 days, 13:04    系统运行时间，格式为时:分</span><br><span class="line">2 users    当前登录用户数</span><br><span class="line">load average: 0.37, 0.48, 0.35   系统负载，即任务队列的平均长度。三个数值分别为 1分钟、5分钟、15分钟前到现在的平均值。</span><br></pre></td></tr></table></figure></div></p>
<p>第二行和第三行为进程和CPU信息。<br>当有多个CPU时，这些内容可能会超过两行。<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">total 进程总数</span><br><span class="line">running 正在运行的进程数</span><br><span class="line">sleeping 睡眠的进程数</span><br><span class="line">stopped 停止的进程数</span><br><span class="line">zombie 僵尸进程数</span><br><span class="line">Cpu(s): </span><br><span class="line">10.3 us 用户空间占用CPU百分比</span><br><span class="line">1.2 sy 内核空间占用CPU百分比</span><br><span class="line">0.0 ni 用户进程空间内改变过优先级的进程占用CPU百分比</span><br><span class="line">88.3 id 空闲CPU百分比</span><br><span class="line">0.1 wa 等待输入输出的CPU时间百分比</span><br><span class="line">0.0 hi 硬件CPU中断占用百分比</span><br><span class="line">0.1 si 软中断占用百分比</span><br><span class="line">0.0 st 虚拟机占用百分比</span><br></pre></td></tr></table></figure></div></p>
<p>最后两行为内存信息。<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">Mem:</span><br><span class="line">65809520 total    物理内存总量</span><br><span class="line">429196 free    空闲内存总量</span><br><span class="line">43646696 used    使用的物理内存总量</span><br><span class="line">21733628 buff/cache    用作内核缓存的内存量</span><br><span class="line">Swap: </span><br><span class="line">0 total    交换区总量</span><br><span class="line">0 used    使用的交换区总量</span><br><span class="line">0 free    空闲交换区总量</span><br><span class="line">21564656 avail Mem     缓冲的交换区总量,内存中的内容被换出到交换区，而后又被换入到内存，但使用过的交换区尚未被覆盖，该数值即为这些内容已存在于内存中的交换区的大小,相应的内存再次被换出时可不必再对交换区写入。</span><br></pre></td></tr></table></figure></div></p>
<p>进程信息区统计信息区域的下方显示了各个进程的详细信息。<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">序号  列名    含义</span><br><span class="line">a    PID     进程id</span><br><span class="line">b    PPID    父进程id</span><br><span class="line">c    RUSER   Real user name</span><br><span class="line">d    UID     进程所有者的用户id</span><br><span class="line">e    USER    进程所有者的用户名</span><br><span class="line">f    GROUP   进程所有者的组名</span><br><span class="line">g    TTY     启动进程的终端名。不是从终端启动的进程则显示为 ?</span><br><span class="line">h    PR      优先级</span><br><span class="line">i    NI      nice值。负值表示高优先级，正值表示低优先级</span><br><span class="line">j    P       最后使用的CPU，仅在多CPU环境下有意义</span><br><span class="line">k    %CPU    上次更新到现在的CPU时间占用百分比</span><br><span class="line">l    TIME    进程使用的CPU时间总计，单位秒</span><br><span class="line">m    TIME+   进程使用的CPU时间总计，单位1/100秒</span><br><span class="line">n    %MEM    进程使用的物理内存百分比</span><br><span class="line">o    VIRT    进程使用的虚拟内存总量，单位kb。VIRT=SWAP+RES</span><br><span class="line">p    SWAP    进程使用的虚拟内存中，被换出的大小，单位kb。</span><br><span class="line">q    RES     进程使用的、未被换出的物理内存大小，单位kb。RES=CODE+DATA</span><br><span class="line">r    CODE    可执行代码占用的物理内存大小，单位kb</span><br><span class="line">s    DATA    可执行代码以外的部分(数据段+栈)占用的物理内存大小，单位kb</span><br><span class="line">t    SHR     共享内存大小，单位kb</span><br><span class="line">u    nFLT    页面错误次数</span><br><span class="line">v    nDRT    最后一次写入到现在，被修改过的页面数。</span><br><span class="line">w    S       进程状态(D=不可中断的睡眠状态,R=运行,S=睡眠,T=跟踪/停止,Z=僵尸进程)</span><br><span class="line">x    COMMAND 命令名/命令行</span><br><span class="line">y    WCHAN   若该进程在睡眠，则显示睡眠中的系统函数名</span><br><span class="line">z    Flags   任务标志，参考 sched.h</span><br></pre></td></tr></table></figure></div></p>
<p>默认情况下仅显示比较重要的 PID、USER、PR、NI、VIRT、RES、SHR、S、%CPU、%MEM、TIME+、COMMAND 列。</p>
<h4 id="命令使用"><a href="#命令使用" class="headerlink" title="命令使用"></a>命令使用</h4><p>top使用格式:<br>top [-] [d] [p] [q] [c] [C] [S] [s] [n]</p>
<p>参数说明:<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">d 指定每两次屏幕信息刷新之间的时间间隔。当然用户可以使用s交互命令来改变之。 </span><br><span class="line">p 通过指定监控进程ID来仅仅监控某个进程的状态。 </span><br><span class="line">q 该选项将使top没有任何延迟的进行刷新。如果调用程序有超级用户权限，那么top将以尽可能高的优先级运行。 </span><br><span class="line">S 指定累计模式 </span><br><span class="line">s 使top命令在安全模式中运行。这将去除交互命令所带来的潜在危险。 </span><br><span class="line">i 使top不显示任何闲置或者僵死进程。 </span><br><span class="line">c 显示整个命令行而不只是显示命令名</span><br></pre></td></tr></table></figure></div></p>
<p>其他实用命令:<br>下面介绍在top命令执行过程中可以使用的一些交互命令。如果在命令行选项中使用了s选项，则可能其中一些命令会被屏蔽掉。<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">Ctrl+L 擦除并且重写屏幕。 </span><br><span class="line">h或者? 显示帮助画面，给出一些简短的命令总结说明。 </span><br><span class="line">k       终止一个进程。系统将提示用户输入需要终止的进程PID，以及需要发送给该进程什么样的信号。一般的终止进程可以使用15信号；如果不能正常结束那就使用信号9强制结束该进程。默认值是信号15。在安全模式中此命令被屏蔽。 </span><br><span class="line">i 忽略闲置和僵死进程。这是一个开关式命令。 </span><br><span class="line">q 退出程序。 </span><br><span class="line">r 重新安排一个进程的优先级别。系统提示用户输入需要改变的进程PID以及需要设置的进程优先级值。输入一个正值将使优先级降低，反之则可以使该进程拥有更高的优先权。默认值是10。 </span><br><span class="line">S 切换到累计模式。 </span><br><span class="line">s 改变两次刷新之间的延迟时间。系统将提示用户输入新的时间，单位为s。如果有小数，就换算成m s。输入0值则系统将不断刷新，默认值是5 s。需要注意的是如果设置太小的时间，很可能会引起不断刷新，从而根本来不及看清显示的情况，而且系统负载也会大大增加。 </span><br><span class="line">f或者F 从当前显示中添加或者删除项目。 </span><br><span class="line">o或者O 改变显示项目的顺序。 </span><br><span class="line">l 切换显示平均负载和启动时间信息。 </span><br><span class="line">m 切换显示内存信息。 </span><br><span class="line">t 切换显示进程和CPU状态信息。 </span><br><span class="line">c 切换显示命令名称和完整命令行。 </span><br><span class="line">M 根据驻留内存大小进行排序。 </span><br><span class="line">P 根据CPU使用百分比大小进行排序。 </span><br><span class="line">T 根据时间/累计时间进行排序。 </span><br><span class="line">W 将当前设置写入~/.toprc文件中。这是写top配置文件的推荐方法。</span><br></pre></td></tr></table></figure></div></p>
<p>附常用操作:<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">top   //每隔5秒显式所有进程的资源占用情况</span><br><span class="line">top -d 2  //每隔2秒显式所有进程的资源占用情况</span><br><span class="line">top -c  //每隔5秒显式进程的资源占用情况，并显示进程的命令行参数(默认只有进程名)</span><br><span class="line">top -p 12345 -p 6789//每隔5秒显示pid是12345和pid是6789的两个进程的资源占用情况</span><br><span class="line">top -d 2 -c -p 123456 //每隔2秒显示pid是12345的进程的资源使用情况，并显式该进程启动的命令行参数</span><br></pre></td></tr></table></figure></div></p>
]]></content>
      <categories>
        <category>Tool</category>
      </categories>
      <tags>
        <tag>Tool</tag>
      </tags>
  </entry>
  <entry>
    <title>PowerShell提示无法加载文件</title>
    <url>/2020/09/05/PowerShell%E6%8F%90%E7%A4%BA%E6%97%A0%E6%B3%95%E5%8A%A0%E8%BD%BD%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<p>记录下PowerShell提示无法加载文件的解决方案！<br><a id="more"></a></p>
<ol>
<li><p>以管理员身份运行PowerShell</p>
</li>
<li><p>执行：get-ExecutionPolicy，回复Restricted，表示状态是禁止的</p>
</li>
<li><p>执行：set-ExecutionPolicy RemoteSigned即可</p>
</li>
</ol>
<p>注：<br>  以管理员的身份运行PowerShell，而不是cmd窗口！</p>
]]></content>
      <categories>
        <category>Tool</category>
      </categories>
      <tags>
        <tag>Tool</tag>
      </tags>
  </entry>
  <entry>
    <title>Python中datetime格式化</title>
    <url>/2020/09/08/Python%E4%B8%ADdatetime%E6%A0%BC%E5%BC%8F%E5%8C%96/</url>
    <content><![CDATA[<p>记录一下Python中datetime的使用。<br><a id="more"></a><br><strong>获取当前时间</strong><br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取今天的字符串</span></span><br><span class="line">today = time.strftime(<span class="string">"%Y-%m-%d"</span>,time.localtime(time.time()))</span><br><span class="line">print(today)</span><br></pre></td></tr></table></figure></div></p>
<p><strong>当前日期时间</strong><br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> datetime.datetime.now()</span><br><span class="line"><span class="comment"># 2020-09-08 23:20:21.202000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 格式化时间</span></span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> datetime.datetime.now().strftime(<span class="string">"%Y-%m-%d %H:%M:%S"</span>)</span><br><span class="line"><span class="comment"># 2020-09-08 23:20:21</span></span><br></pre></td></tr></table></figure></div></p>
<p><strong>多加一天</strong><br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (datetime.datetime.now()+datetime.timedelta(days=<span class="number">1</span>)).strftime(<span class="string">"%Y-%m-%d %H:%M:%S"</span>)</span><br><span class="line"><span class="comment"># 2020-09-11 23:16:27</span></span><br></pre></td></tr></table></figure></div></p>
<p><strong>减少一天</strong><br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (datetime.datetime.now()+datetime.timedelta(days=<span class="number">-1</span>)).strftime(<span class="string">"%Y-%m-%d %H:%M:%S"</span>)</span><br><span class="line"><span class="comment"># 2020-09-09 23:17:07</span></span><br></pre></td></tr></table></figure></div></p>
<p><strong>减一小时</strong></p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (datetime.datetime.now()+datetime.timedelta(hours=<span class="number">-1</span>)).strftime(<span class="string">"%Y-%m-%d %H:%M:%S"</span>)</span><br><span class="line"><span class="comment"># 2020-09-10 22:18:56</span></span><br></pre></td></tr></table></figure></div>
<p><strong>减五分钟</strong></p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (datetime.datetime.now()+datetime.timedelta(minutes=<span class="number">-5</span>)).strftime(<span class="string">"%Y-%m-%d %H:%M:%S"</span>)</span><br><span class="line"><span class="comment"># 2020-09-10 23:13:23</span></span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript中this使用</title>
    <url>/2020/09/16/JavaScript%E4%B8%ADthis%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>学习下JavaScript中this关键词<br><a id="more"></a><br>this 是 JavaScript 语言的一个关键字。</p>
<h4 id="this的问题"><a href="#this的问题" class="headerlink" title="this的问题"></a>this的问题</h4><p>虽然obj.foo和foo指向同一个函数，但是执行结果可能不一样。<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  foo: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> foo = obj.foo;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写法一</span></span><br><span class="line">obj.foo()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写法二</span></span><br><span class="line">foo()</span><br></pre></td></tr></table></figure></div></p>
<p>如下例子，bj.foo和foo虽然指向同一函数，但是执行结果不同。<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  foo: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="keyword">this</span>.bar) &#125;,</span><br><span class="line">  bar: <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> foo = obj.foo;</span><br><span class="line"><span class="keyword">var</span> bar = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">obj.foo() <span class="comment">// 1</span></span><br><span class="line">foo() <span class="comment">// 2</span></span><br></pre></td></tr></table></figure></div></p>
<p>  这种差异的原因，就在于函数体内部使用了this关键字。很多教科书会告诉你，this指的是函数运行时所在的环境。对于obj.foo()来说，foo运行在obj环境，所以this指向obj；对于foo()来说，foo运行在全局环境，所以this指向全局环境。所以，两者的运行结果不一样。</p>
<hr>
<h4 id="内存数据结构"><a href="#内存数据结构" class="headerlink" title="内存数据结构"></a>内存数据结构</h4><p>JavaScript 语言之所以有this的设计，跟内存里面的数据结构有关系。<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">foo</span>:  <span class="number">5</span> &#125;;</span><br></pre></td></tr></table></figure></div></p>
<p>上面的代码将一个对象赋值给变量obj。JavaScript 引擎会先在内存里面，生成一个对象{ foo: 5 }，然后把这个对象的内存地址赋值给变量obj。</p>
<p><a href="http://www.ruanyifeng.com/blog/2018/06/javascript-this.html" target="_blank" rel="noopener"> 阮一峰博客JavaScript 的 this 原理</a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux中du命令详解</title>
    <url>/2020/09/27/Linux%E4%B8%ADdu%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<p>当磁盘空间不足或想看磁盘占用空间，使用du命令显示文件或目录所占用的磁盘空间。<br><a id="more"></a><br>命令参数：</p>
<p>-a   #显示目录中文件的大小  单位 KB 。<br>-b  #显示目录中文件的大小，以字节byte为单位。<br>-c  #显示目录中文件的大小，同时也显示总和；单位KB。<br>-k 、 -m  、#显示目录中文件的大小，-k 单位KB，-m 单位MB.<br>-s  #仅显示目录的总值，单位KB。<br>-h  #以K  M  G为单位显示，提高可读性~（最常用的一个~也可能只用这一个就满足需求了）<br>-x  #以一开始处理时的文件系统为准，若遇上其它不同的文件系统目录则略过。<br>-L   #显示选项中所指定符号链接的源文件大小。<br>-S   #显示个别目录的大小时，并不含其子目录的大小。<br>-X   #在&lt;文件&gt;指定目录或文件。<br>–exclude=&lt;目录或文件&gt;    #略过指定的目录或文件。<br>-D   #显示指定符号链接的源文件大小。<br>-H或–si  #与-h参数相同，但是K，M，G是以1000为换算单位。   </p>
<hr>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1、显示当前目录及子目录每个文件占用的块数量       </span></span><br><span class="line">du</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、显示当前目录占用的块数量         </span></span><br><span class="line">du -s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3、查看当前目录占用空间啊大小（空间大小= 块数量 * 块大小）      </span></span><br><span class="line">du  -sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4、查看当前目录各个文件占用空间大小     </span></span><br><span class="line">du -sh *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5、通过字节（k）单位显示当前目录各个文件大小   </span></span><br><span class="line">du -shk *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6、通过兆（Mb）单位显示当前目录各个文件大小   </span></span><br><span class="line">du -shm *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 7、通过Gb（G）单位显示当前目录各个文件大小   </span></span><br><span class="line">du -shg *</span><br><span class="line"><span class="comment"># 8、查找占用空间最大的文件与目录</span></span><br><span class="line">du -h --max-depth=1</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>Tool</category>
      </categories>
      <tags>
        <tag>Tool</tag>
      </tags>
  </entry>
  <entry>
    <title>npm使用淘宝源</title>
    <url>/2020/10/06/npm%E4%BD%BF%E7%94%A8%E6%B7%98%E5%AE%9D%E6%BA%90/</url>
    <content><![CDATA[<p>记录一下如何临时使用淘宝源<br><a id="more"></a></p>
<p>暂时使用：<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">npm --registry https://registry.npm.taobao.org i express</span><br></pre></td></tr></table></figure></div></p>
<p>永久使用：<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">npm conf <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure></div></p>
<p>安装检测用cnpm -v就可以检测到安装路径等。</p>
<p>通过cnpm使用：<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">npm i -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure></div></p>
<p>实例使用（npm一律改为cnpm即可） ：<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">cnpm i express</span><br></pre></td></tr></table></figure></div></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux中防火墙端口白名单</title>
    <url>/2020/10/14/Linux%E4%B8%AD%E9%98%B2%E7%81%AB%E5%A2%99%E7%AB%AF%E5%8F%A3%E7%99%BD%E5%90%8D%E5%8D%95/</url>
    <content><![CDATA[<p>服务器一般会开启防火墙，当服务器启动了某些特定端口，需要外部访问时需要将端口加入到白名单中。<br><a id="more"></a></p>
<h6 id="CentOS防火墙"><a href="#CentOS防火墙" class="headerlink" title="CentOS防火墙"></a>CentOS防火墙</h6><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置开机启用防火墙</span></span><br><span class="line">systemctl <span class="built_in">enable</span> firewalld.service</span><br><span class="line"><span class="comment"># 设置开机禁用防火墙</span></span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld.service</span><br><span class="line"><span class="comment"># 启动防火墙</span></span><br><span class="line">systemctl start firewalld</span><br><span class="line"><span class="comment"># 关闭防火墙</span></span><br><span class="line">systemctl stop firewalld</span><br><span class="line"><span class="comment"># 检查防火墙状态</span></span><br><span class="line">systemctl status firewalld </span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看防火墙状态</span></span><br><span class="line">firewall-cmd --state</span><br><span class="line"><span class="comment"># 查看开放的端口</span></span><br><span class="line">firewall-cmd --list-ports</span><br><span class="line"><span class="comment"># 查询所有</span></span><br><span class="line">firewall-cmd --list-all</span><br><span class="line"><span class="comment"># 添加白名单</span></span><br><span class="line">firewall-cmd --add-port=端口号/tcp --zone=public --permanent</span><br><span class="line"><span class="comment"># 命令含义：</span></span><br><span class="line">  <span class="comment"># –zone #作用域</span></span><br><span class="line">  <span class="comment"># –add-port=9200/tcp  #添加端口，格式为：端口/通讯协议</span></span><br><span class="line">  <span class="comment"># –permanent #永久生效，没有此参数重启后失效</span></span><br><span class="line">  <span class="comment"># 注意：添加端口后，必须用命令firewall-cmd --reload重新加载一遍才会生效</span></span><br><span class="line"><span class="comment"># 重新加载配置</span></span><br><span class="line">firewall-cmd --reload</span><br><span class="line"><span class="comment"># 关闭防火墙端口</span></span><br><span class="line">firewall-cmd --zone=public --remove-port=9200/tcp --permanent</span><br></pre></td></tr></table></figure></div>
<h6 id="Ubuntu防火墙"><a href="#Ubuntu防火墙" class="headerlink" title="Ubuntu防火墙"></a>Ubuntu防火墙</h6><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1.查看防火墙当前状态</span></span><br><span class="line">sudo ufw status</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.开启防火墙</span></span><br><span class="line">sudo ufw <span class="built_in">enable</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.关闭防火墙</span></span><br><span class="line">sudo ufw <span class="built_in">disable</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.查看防火墙版本</span></span><br><span class="line">sudo ufw version</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.默认允许外部访问本机</span></span><br><span class="line">sudo ufw default allow</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6.默认拒绝外部访问主机</span></span><br><span class="line">sudo ufw default deny</span><br><span class="line"></span><br><span class="line"><span class="comment"># 7.允许外部访问53端口</span></span><br><span class="line">sudo ufw allow 53</span><br><span class="line"></span><br><span class="line"><span class="comment"># 8.拒绝外部访问53端口</span></span><br><span class="line">sudo ufw deny 53</span><br><span class="line"></span><br><span class="line"><span class="comment"># 9.允许某个IP地址访问本机所有端口</span></span><br><span class="line">sudo ufw allow from 192.168.0.1</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>Tool</category>
      </categories>
      <tags>
        <tag>Tool</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL获取时间戳</title>
    <url>/2020/10/23/MySQL%E8%8E%B7%E5%8F%96%E6%97%B6%E9%97%B4%E6%88%B3/</url>
    <content><![CDATA[<p>有时在使用查询sql时会使用到时间戳，这里记录下where语句使用时间戳。<br><a id="more"></a><br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">unix_timestamp(now())</span><br></pre></td></tr></table></figure></div></p>
]]></content>
      <categories>
        <category>Tool</category>
      </categories>
      <tags>
        <tag>Tool</tag>
      </tags>
  </entry>
  <entry>
    <title>vi/vim常用命令</title>
    <url>/2019/10/04/vi-vim%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p>记录一些vi/vim常用命令。<br><a id="more"></a></p>
<h2 id="vi-vim-的使用"><a href="#vi-vim-的使用" class="headerlink" title="vi/vim 的使用"></a>vi/vim 的使用</h2><p>基本上 vi/vim 共分为三种模式，分别是<strong>命令模式（Command mode）</strong>，<strong>输入模式（Insert mode）</strong>和<strong>底线命令模式（Last line mode）</strong>。 这三种模式的作用分别是：</p>
<p><strong>命令模式：</strong></p>
<p>用户刚刚启动 vi/vim，便进入了命令模式。</p>
<p>此状态下敲击键盘动作会被Vim识别为命令，而非输入字符。比如我们此时按下i，并不会输入一个字符，i被当作了一个命令。</p>
<p>以下是常用的几个命令：</p>
<ul>
<li>i 切换到输入模式，以输入字符。</li>
<li>x 删除当前光标所在处的字符。</li>
<li>: 切换到底线命令模式，以在最底一行输入命令。</li>
</ul>
<p>若想要编辑文本：启动Vim，进入了命令模式，按下i，切换到输入模式。</p>
<p>命令模式只有一些最基本的命令，因此仍要依靠底线命令模式输入更多命令。</p>
<p><strong>输入模式</strong></p>
<p>在命令模式下按下i就进入了输入模式。</p>
<p>在输入模式中，可以使用以下按键：</p>
<ul>
<li><strong>字符按键以及Shift组合</strong>，输入字符</li>
<li><strong>ENTER</strong>，回车键，换行</li>
<li><strong>BACK SPACE</strong>，退格键，删除光标前一个字符</li>
<li><strong>DEL</strong>，删除键，删除光标后一个字符</li>
<li><strong>方向键</strong>，在文本中移动光标</li>
<li><strong>HOME/END</strong>，移动光标到行首/行尾</li>
<li><strong>Page Up/Page Down</strong>，上/下翻页</li>
<li><strong>Insert</strong>，切换光标为输入/替换模式，光标将变成竖线/下划线</li>
<li><strong>ESC</strong>，退出输入模式，切换到命令模式</li>
</ul>
<p><strong>底线命令模式</strong></p>
<p>在命令模式下按下:（英文冒号）就进入了底线命令模式。</p>
<p>底线命令模式可以输入单个或多个字符的命令，可用的命令非常多。</p>
<p>在底线命令模式中，基本的命令有（已经省略了冒号）：</p>
<ul>
<li>q 退出程序</li>
<li>w 保存文件</li>
</ul>
<p>按ESC键可随时退出底线命令模式。</p>
<h2 id="vi-vim-按键说明"><a href="#vi-vim-按键说明" class="headerlink" title="vi/vim 按键说明"></a>vi/vim 按键说明</h2><p>除了上面简易范例的 i, [Esc], :wq 之外，其实 vim 还有非常多的按键可以使用。</p>
<h4 id="第一部份：命令模式可用的按钮说明，光标移动、复制贴上、搜寻取代等"><a href="#第一部份：命令模式可用的按钮说明，光标移动、复制贴上、搜寻取代等" class="headerlink" title="第一部份：命令模式可用的按钮说明，光标移动、复制贴上、搜寻取代等"></a>第一部份：命令模式可用的按钮说明，光标移动、复制贴上、搜寻取代等</h4><table>
<thead>
<tr>
<th style="text-align:left">移动光标的方法</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">h 或 向左箭头键(←)</td>
<td>光标向左移动一个字符</td>
</tr>
<tr>
<td style="text-align:left">j 或 向下箭头键(↓)</td>
<td>光标向下移动一个字符</td>
</tr>
<tr>
<td style="text-align:left">k 或 向上箭头键(↑)</td>
<td>光标向上移动一个字符</td>
</tr>
<tr>
<td style="text-align:left">l 或 向右箭头键(→)</td>
<td>光标向右移动一个字符</td>
</tr>
<tr>
<td style="text-align:left">如果你将右手放在键盘上的话，你会发现 hjkl 是排列在一起的，因此可以使用这四个按钮来移动光标。 如果想要进行多次移动的话，例如向下移动 30 行，可以使用 “30j” 或 “30↓” 的组合按键， 亦即加上想要进行的次数(数字)后，按下动作即可！</td>
<td></td>
</tr>
<tr>
<td style="text-align:left">[Ctrl] + [f]</td>
<td>屏幕『向下』移动一页，相当于 [Page Down]按键 (常用)</td>
</tr>
<tr>
<td style="text-align:left">[Ctrl] + [b]</td>
<td>屏幕『向上』移动一页，相当于 [Page Up] 按键 (常用)</td>
</tr>
<tr>
<td style="text-align:left">[Ctrl] + [d]</td>
<td>屏幕『向下』移动半页</td>
</tr>
<tr>
<td style="text-align:left">[Ctrl] + [u]</td>
<td>屏幕『向上』移动半页</td>
</tr>
<tr>
<td style="text-align:left">+</td>
<td>光标移动到非空格符的下一列</td>
</tr>
<tr>
<td style="text-align:left">-</td>
<td>光标移动到非空格符的上一列</td>
</tr>
<tr>
<td style="text-align:left">n</td>
<td>那个 n 表示『数字』，例如 20 。按下数字后再按空格键，光标会向右移动这一行的 n 个字符。例如 20 则光标会向后面移动 20 个字符距离。</td>
</tr>
<tr>
<td style="text-align:left">0 或功能键[Home]</td>
<td>这是数字『 0 』：移动到这一行的最前面字符处 (常用)</td>
</tr>
<tr>
<td style="text-align:left">$ 或功能键[End]</td>
<td>移动到这一行的最后面字符处(常用)</td>
</tr>
<tr>
<td style="text-align:left">H</td>
<td>光标移动到这个屏幕的最上方那一行的第一个字符</td>
</tr>
<tr>
<td style="text-align:left">M</td>
<td>光标移动到这个屏幕的中央那一行的第一个字符</td>
</tr>
<tr>
<td style="text-align:left">L</td>
<td>光标移动到这个屏幕的最下方那一行的第一个字符</td>
</tr>
<tr>
<td style="text-align:left">G</td>
<td>移动到这个档案的最后一行(常用)</td>
</tr>
<tr>
<td style="text-align:left">nG</td>
<td>n 为数字。移动到这个档案的第 n 行。例如 20G 则会移动到这个档案的第 20 行(可配合 :set nu)</td>
</tr>
<tr>
<td style="text-align:left">gg</td>
<td>移动到这个档案的第一行，相当于 1G 啊！ (常用)</td>
</tr>
<tr>
<td style="text-align:left">n</td>
<td>n 为数字。光标向下移动 n 行(常用)</td>
</tr>
<tr>
<td style="text-align:left">搜寻与取代</td>
<td></td>
</tr>
<tr>
<td style="text-align:left">/word</td>
<td>向光标之下寻找一个名称为 word 的字符串。例如要在档案内搜寻 vbird 这个字符串，就输入 /vbird 即可！ (常用)</td>
</tr>
<tr>
<td style="text-align:left">?word</td>
<td>向光标之上寻找一个字符串名称为 word 的字符串。</td>
</tr>
<tr>
<td style="text-align:left">n</td>
<td>这个 n 是英文按键。代表重复前一个搜寻的动作。举例来说， 如果刚刚我们执行 /vbird 去向下搜寻 vbird 这个字符串，则按下 n 后，会向下继续搜寻下一个名称为 vbird 的字符串。如果是执行 ?vbird 的话，那么按下 n 则会向上继续搜寻名称为 vbird 的字符串！</td>
</tr>
<tr>
<td style="text-align:left">N</td>
<td>这个 N 是英文按键。与 n 刚好相反，为『反向』进行前一个搜寻动作。 例如 /vbird 后，按下 N 则表示『向上』搜寻 vbird 。</td>
</tr>
<tr>
<td style="text-align:left">使用 /word 配合 n 及 N 是非常有帮助的！可以让你重复的找到一些你搜寻的关键词！</td>
<td></td>
</tr>
<tr>
<td style="text-align:left">:n1,n2s/word1/word2/g</td>
<td>n1 与 n2 为数字。在第 n1 与 n2 行之间寻找 word1 这个字符串，并将该字符串取代为 word2 ！举例来说，在 100 到 200 行之间搜寻 vbird 并取代为 VBIRD 则： 『:100,200s/vbird/VBIRD/g』。(常用)</td>
</tr>
<tr>
<td style="text-align:left">:1,$s/word1/word2/g</td>
<td>从第一行到最后一行寻找 word1 字符串，并将该字符串取代为 word2 ！(常用)</td>
</tr>
<tr>
<td style="text-align:left">:1,$s/word1/word2/gc</td>
<td>从第一行到最后一行寻找 word1 字符串，并将该字符串取代为 word2 ！且在取代前显示提示字符给用户确认 (confirm) 是否需要取代！(常用)</td>
</tr>
<tr>
<td style="text-align:left">删除、复制与贴上</td>
<td></td>
</tr>
<tr>
<td style="text-align:left">x, X</td>
<td>在一行字当中，x 为向后删除一个字符 (相当于 [del] 按键)， X 为向前删除一个字符(相当于 [backspace] 亦即是退格键) (常用)</td>
</tr>
<tr>
<td style="text-align:left">nx</td>
<td>n 为数字，连续向后删除 n 个字符。举例来说，我要连续删除 10 个字符， 『10x』。</td>
</tr>
<tr>
<td style="text-align:left">dd</td>
<td>删除游标所在的那一整行(常用)</td>
</tr>
<tr>
<td style="text-align:left">ndd</td>
<td>n 为数字。删除光标所在的向下 n 行，例如 20dd 则是删除 20 行 (常用)</td>
</tr>
<tr>
<td style="text-align:left">d1G</td>
<td>删除光标所在到第一行的所有数据</td>
</tr>
<tr>
<td style="text-align:left">dG</td>
<td>删除光标所在到最后一行的所有数据</td>
</tr>
<tr>
<td style="text-align:left">d$</td>
<td>删除游标所在处，到该行的最后一个字符</td>
</tr>
<tr>
<td style="text-align:left">d0</td>
<td>那个是数字的 0 ，删除游标所在处，到该行的最前面一个字符</td>
</tr>
<tr>
<td style="text-align:left">yy</td>
<td>复制游标所在的那一行(常用)</td>
</tr>
<tr>
<td style="text-align:left">nyy</td>
<td>n 为数字。复制光标所在的向下 n 列，例如 20yy 则是复制 20 列(常用)</td>
</tr>
<tr>
<td style="text-align:left">y1G</td>
<td>复制游标所在列到第一列的所有数据</td>
</tr>
<tr>
<td style="text-align:left">yG</td>
<td>复制游标所在列到最后一列的所有数据</td>
</tr>
<tr>
<td style="text-align:left">y0</td>
<td>复制光标所在的那个字符到该行行首的所有数据</td>
</tr>
<tr>
<td style="text-align:left">y$</td>
<td>复制光标所在的那个字符到该行行尾的所有数据</td>
</tr>
<tr>
<td style="text-align:left">p, P</td>
<td>p 为将已复制的数据在光标下一行贴上，P 则为贴在游标上一行！ 举例来说，我目前光标在第 20 行，且已经复制了 10 行数据。则按下 p 后， 那 10 行数据会贴在原本的 20 行之后，亦即由 21 行开始贴。但如果是按下 P 呢？ 那么原本的第 20 行会被推到变成 30 行。 (常用)</td>
</tr>
<tr>
<td style="text-align:left">J</td>
<td>将光标所在列与下一列的数据结合成同一列</td>
</tr>
<tr>
<td style="text-align:left">c</td>
<td>重复删除多个数据，例如向下删除 10 行，[ 10cj ]</td>
</tr>
<tr>
<td style="text-align:left">u</td>
<td>复原前一个动作。(常用)</td>
</tr>
<tr>
<td style="text-align:left">[Ctrl]+r</td>
<td>重做上一个动作。(常用)</td>
</tr>
<tr>
<td style="text-align:left">这个 u 与 [Ctrl]+r 是很常用的指令！一个是复原，另一个则是重做一次～ 利用这两个功能按键，你的编辑，嘿嘿！很快乐的啦！</td>
<td></td>
</tr>
<tr>
<td style="text-align:left">.</td>
<td>不要怀疑！这就是小数点！意思是重复前一个动作的意思。 如果你想要重复删除、重复贴上等等动作，按下小数点『.』就好了！ (常用)</td>
</tr>
</tbody>
</table>
<h4 id="第二部份：命令模式切换到输入模式的可用的按钮说明"><a href="#第二部份：命令模式切换到输入模式的可用的按钮说明" class="headerlink" title="第二部份：命令模式切换到输入模式的可用的按钮说明"></a>第二部份：命令模式切换到输入模式的可用的按钮说明</h4><table>
<thead>
<tr>
<th style="text-align:left">进入输入或取代的编辑模式</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">i, I</td>
<td>进入输入模式(Insert mode)： i 为『从目前光标所在处输入』， I 为『在目前所在行的第一个非空格符处开始输入』。 (常用)</td>
</tr>
<tr>
<td style="text-align:left">a, A</td>
<td>进入输入模式(Insert mode)： a 为『从目前光标所在的下一个字符处开始输入』， A 为『从光标所在行的最后一个字符处开始输入』。(常用)</td>
</tr>
<tr>
<td style="text-align:left">o, O</td>
<td>进入输入模式(Insert mode)： 这是英文字母 o 的大小写。o 为『在目前光标所在的下一行处输入新的一行』； O 为在目前光标所在处的上一行输入新的一行！(常用)</td>
</tr>
<tr>
<td style="text-align:left">r, R</td>
<td>进入取代模式(Replace mode)： r 只会取代光标所在的那一个字符一次；R会一直取代光标所在的文字，直到按下 ESC 为止；(常用)</td>
</tr>
<tr>
<td style="text-align:left">上面这些按键中，在 vi 画面的左下角处会出现『–INSERT–』或『–REPLACE–』的字样。 由名称就知道该动作了吧！！特别注意的是，我们上面也提过了，你想要在档案里面输入字符时， 一定要在左下角处看到 INSERT 或 REPLACE 才能输入喔！</td>
<td></td>
</tr>
<tr>
<td style="text-align:left">[Esc]</td>
<td>退出编辑模式，回到命令模式中(常用)</td>
</tr>
</tbody>
</table>
<h4 id="第三部份：命令模式切换到底线命令模式的可用的按钮说明"><a href="#第三部份：命令模式切换到底线命令模式的可用的按钮说明" class="headerlink" title="第三部份：命令模式切换到底线命令模式的可用的按钮说明"></a>第三部份：命令模式切换到底线命令模式的可用的按钮说明</h4><table>
<thead>
<tr>
<th style="text-align:left">底线命令模式的储存、离开等指令</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">:w</td>
<td>将编辑的数据写入硬盘档案中(常用)</td>
</tr>
<tr>
<td style="text-align:left">:w!</td>
<td>若文件属性为『只读』时，强制写入该档案。不过，到底能不能写入， 还是跟你对该档案的档案权限有关啊！</td>
</tr>
<tr>
<td style="text-align:left">:q</td>
<td>离开 vi (常用)</td>
</tr>
<tr>
<td style="text-align:left">:q!</td>
<td>若曾修改过档案，又不想储存，使用 ! 为强制离开不储存档案。</td>
</tr>
<tr>
<td style="text-align:left">注意一下啊，那个惊叹号 (!) 在 vi 当中，常常具有『强制』的意思～</td>
<td></td>
</tr>
<tr>
<td style="text-align:left">:wq</td>
<td>储存后离开，若为 :wq! 则为强制储存后离开 (常用)</td>
</tr>
<tr>
<td style="text-align:left">ZZ</td>
<td>这是大写的 Z 喔！若档案没有更动，则不储存离开，若档案已经被更动过，则储存后离开！</td>
</tr>
<tr>
<td style="text-align:left">:w [filename]</td>
<td>将编辑的数据储存成另一个档案（类似另存新档）</td>
</tr>
<tr>
<td style="text-align:left">:r [filename]</td>
<td>在编辑的数据中，读入另一个档案的数据。亦即将 『filename』 这个档案内容加到游标所在行后面</td>
</tr>
<tr>
<td style="text-align:left">:n1,n2 w [filename]</td>
<td>将 n1 到 n2 的内容储存成 filename 这个档案。</td>
</tr>
<tr>
<td style="text-align:left">:! command</td>
<td>暂时离开 vi 到指令列模式下执行 command 的显示结果！例如 『:! ls /home』即可在 vi 当中察看 /home 底下以 ls 输出的档案信息！</td>
</tr>
<tr>
<td style="text-align:left">vim 环境的变更</td>
<td></td>
</tr>
<tr>
<td style="text-align:left">:set nu</td>
<td>显示行号，设定之后，会在每一行的前缀显示该行的行号</td>
</tr>
<tr>
<td style="text-align:left">:set nonu</td>
<td>与 set nu 相反，为取消行号！</td>
</tr>
</tbody>
</table>
<p>特别注意，在 vi/vim 中，数字是很有意义的！数字通常代表重复做几次的意思！ 也有可能是代表去到第几个什么什么的意思。</p>
<p>举例来说，要删除 50 行，则是用 『50dd』 对吧！ 数字加在动作之前，如我要向下移动 20 行呢？那就是『20j』或者是『20↓』即可。</p>
]]></content>
      <categories>
        <category>Tool</category>
      </categories>
      <tags>
        <tag>Tool</tag>
      </tags>
  </entry>
  <entry>
    <title>django-ckeditor后台富文本编辑器</title>
    <url>/2019/03/04/django-ckeditor%E5%90%8E%E5%8F%B0%E5%AF%8C%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/</url>
    <content><![CDATA[<p>Django很多富文本已经很久没有维护了，django-ckeditor使用方便，配置简单，还支持图片上传。具体说明可见<a href="https://pypi.org/project/django-ckeditor/" target="_blank" rel="noopener">pypi</a><br><a id="more"></a></p>
<h2 id="一、简单使用django-ckeditor"><a href="#一、简单使用django-ckeditor" class="headerlink" title="一、简单使用django-ckeditor"></a>一、简单使用django-ckeditor</h2><h5 id="1）安装django-ckeditor"><a href="#1）安装django-ckeditor" class="headerlink" title="1）安装django-ckeditor"></a>1）安装django-ckeditor</h5><p>使用pip安装，现在最新版本是5.6.1：</p>
<pre><code>pip install django-ckeditor
</code></pre><h5 id="2）注册应用"><a href="#2）注册应用" class="headerlink" title="2）注册应用"></a>2）注册应用</h5><p>在django项目中，找到settings.py文件中的INSTALLED_APPS加入’ckeditor’：</p>
<pre><code>INSTALLED_APPS = [
&apos;ckeditor&apos;,
]
</code></pre><h5 id="3）修改模型"><a href="#3）修改模型" class="headerlink" title="3）修改模型"></a>3）修改模型</h5><p>在模型文件models.py中修改字段为富文本编辑：</p>
<pre><code>from django.db import models


class Activity(models.Model):
    activity_name = models.CharField(max_length=20, verbose_name=&quot;活动名称&quot;)
    activity_simple_depict = models.CharField(max_length=50, verbose_name=&quot;简单描述&quot;)
    activity_depict = models.TextField(verbose_name=&quot;活动描述&quot;)
</code></pre><p>将活动描述更改为富文本：</p>
<pre><code>from django.db import models
from ckeditor.fields import RichTextField

class Activity(models.Model):
    activity_name = models.CharField(max_length=20, verbose_name=&quot;活动名称&quot;)
    activity_simple_depict = models.CharField(max_length=50, verbose_name=&quot;简单描述&quot;)
    activity_depict = RichTextField(&apos;活动描述&apos;)
</code></pre><p><img src="https://i.imgur.com/I7miQIC.jpg" alt></p>
<p>需要简体中文，设置settings.py的LANGUAGE_CODE = ‘zh-hans’。</p>
<p>注：zh-hans都是小写。</p>
<p>若写为zh-Hans，会显示为繁体。</p>
<p>另外，此时无法从本地上传图片，只能使用网络图片。可添加上传图片功能。</p>
]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux中df命令详解</title>
    <url>/2020/10/13/Linux%E4%B8%ADdf%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<p>Linux中df命令用来检查linux服务器的文件系统的磁盘空间占用情况。<br><a id="more"></a></p>
<h6 id="命令格式："><a href="#命令格式：" class="headerlink" title="命令格式："></a>命令格式：</h6><p>df [选项] [文件]</p>
<h6 id="命令参数："><a href="#命令参数：" class="headerlink" title="命令参数："></a>命令参数：</h6><p>-a    全部文件系统列表<br>-h    方便阅读方式显示<br>-H 等于“-h”    但是计算式，1K=1000，而不是1K=1024<br>-i    显示inode信息<br>-k    区块为1024字节<br>-l    只显示本地文件系统<br>-m    区块为1048576字节<br>–no-sync    忽略 sync 命令<br>-P    输出格式为POSIX<br>–sync    在取得磁盘信息前，先执行sync命令<br>-T    文件系统类型<br>–block-size=&lt;区块大小&gt;    指定区块大小<br>-t&lt;文件系统类型&gt;    只显示选定文件系统的磁盘信息<br>-x&lt;文件系统类型&gt;    不显示选定文件系统的磁盘信息<br>–help    显示帮助信息<br>–version    显示版本信息</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>详解</th>
</tr>
</thead>
<tbody>
<tr>
<td>-h</td>
<td>根据目前磁盘空间和使用情况 以更易读的方式显示</td>
</tr>
<tr>
<td>-H</td>
<td>和上面的-h参数相同,不过在根式化的时候,采用1000而不是1024进行容量转换</td>
</tr>
<tr>
<td>-k</td>
<td>以单位显示磁盘的使用情况</td>
</tr>
<tr>
<td>-l</td>
<td>显示本地的分区的磁盘空间使用率,如果服务器nfs了远程服务器的磁盘,那么在df上加上-l后系统显示的是过滤nsf驱动器后的结果</td>
</tr>
<tr>
<td>-i</td>
<td>显示inode的使用情况。linux 采用了类似指针的方式管理磁盘空间影射.这也是一个比较关键应用</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>Tool</category>
      </categories>
      <tags>
        <tag>Tool</tag>
      </tags>
  </entry>
  <entry>
    <title>sql基础1</title>
    <url>/2019/10/05/sql%E5%9F%BA%E7%A1%801/</url>
    <content><![CDATA[<p>SQL相关的基础知识</p>
<a id="more"></a>
<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>数据类型如下：</p>
<h5 id="1-整数类型"><a href="#1-整数类型" class="headerlink" title="1) 整数类型"></a>1) 整数类型</h5><p>包括 TINYINT、SMALLINT、MEDIUMINT、INT、BIGINT，浮点数类型 FLOAT 和 DOUBLE，定点数类型 DECIMAL。</p>
<h5 id="2-日期-时间类型"><a href="#2-日期-时间类型" class="headerlink" title="2) 日期/时间类型"></a>2) 日期/时间类型</h5><p>包括 YEAR、TIME、DATE、DATETIME 和 TIMESTAMP。</p>
<h5 id="3-字符串类型"><a href="#3-字符串类型" class="headerlink" title="3) 字符串类型"></a>3) 字符串类型</h5><p>包括 CHAR、VARCHAR、BINARY、VARBINARY、BLOB、TEXT、ENUM 和 SET 等。</p>
<h5 id="4-二进制类型"><a href="#4-二进制类型" class="headerlink" title="4) 二进制类型"></a>4) 二进制类型</h5><p>包括 BIT、BINARY、VARBINARY、TINYBLOB、BLOB、MEDIUMBLOB 和 LONGBLOB。</p>
<hr>
<h3 id="整数类型"><a href="#整数类型" class="headerlink" title="整数类型"></a>整数类型</h3><p>MySQL 主要提供的整数类型有 <strong>TINYINT</strong>、<strong>SMALLINT</strong>、<strong>MEDIUMINT</strong>、<strong>INT</strong>、<strong>BIGINT</strong>，其属性字段可以添加 AUTO_INCREMENT 自增约束条件。</p>
<table>
<thead>
<tr>
<th>类型名称</th>
<th>说明</th>
<th>存储需求</th>
</tr>
</thead>
<tbody>
<tr>
<td>TINYINT</td>
<td>很小的整数</td>
<td>1个字节</td>
</tr>
<tr>
<td>SMALLINT</td>
<td>小的整数</td>
<td>2个宇节</td>
</tr>
<tr>
<td>MEDIUMINT</td>
<td>中等大小的整数</td>
<td>3个字节</td>
</tr>
<tr>
<td>INT (INTEGHR)</td>
<td>普通大小的整数</td>
<td>4个字节</td>
</tr>
<tr>
<td>BIGINT</td>
<td>大整数</td>
<td>8个字节</td>
</tr>
</tbody>
</table>
<p>不同类型的整数存储所需的字节数不相同，占用字节数最小的是 TINYINT 类型，占用字节最大的是 BIGINT 类型，占用的字节越多的类型所能表示的数值范围越大。</p>
<p>数据类型的取值范围：</p>
<table>
<thead>
<tr>
<th>类型名称</th>
<th>说明</th>
<th>存储需求</th>
</tr>
</thead>
<tbody>
<tr>
<td>TINYINT</td>
<td>-128〜127</td>
<td>0 〜255</td>
</tr>
<tr>
<td>SMALLINT</td>
<td>-32768〜32767</td>
<td>0〜65535</td>
</tr>
<tr>
<td>MEDIUMINT</td>
<td>-8388608〜8388607</td>
<td>0〜16777215</td>
</tr>
<tr>
<td>INT (INTEGER)</td>
<td>-2147483648〜2147483647</td>
<td>0〜4294967295</td>
</tr>
<tr>
<td>BIGINT</td>
<td>-9223372036854775808〜9223372036854775807</td>
<td>0〜18446744073709551615</td>
</tr>
</tbody>
</table>
<blockquote>
<p>不同的整数类型有不同的取值范围，并且需要不同的存储空间，因此应根据实际需要选择最合适的类型，这样有利于提高查询的效率和节省存储空间。</p>
</blockquote>
<hr>
<h3 id="小数类型"><a href="#小数类型" class="headerlink" title="小数类型"></a>小数类型</h3><p>浮点数和定点数来表示小数</p>
<p>浮点类型有两种，分别是单精度浮点数（<strong>FLOAT</strong>）和双精度浮点数（<strong>DOUBLE</strong>）。</p>
<p>定点类型只有一种，就是 <strong>DECIMAL</strong>。</p>
<p>浮点类型和定点类型都可以用<code>(M, D)</code>来表示，其中<code>M</code>称为精度，表示总共的位数；<code>D</code>称为标度，表示小数的位数。<br>浮点数类型的取值范围为 M（1～255）和 D（1～30，且不能大于 M-2），分别表示显示宽度和小数位数。<br>M 和 D 在 FLOAT 和DOUBLE 中是可选的，FLOAT 和 DOUBLE 类型将被保存为硬件所支持的最大精度。<br>DECIMAL 的默认 D 值为 0、M 值为 10。</p>
<table>
<thead>
<tr>
<th>类型名称</th>
<th>说明</th>
<th>存储需求</th>
</tr>
</thead>
<tbody>
<tr>
<td>FLOAT</td>
<td>单精度浮点数</td>
<td>4 个字节</td>
</tr>
<tr>
<td>DOUBLE</td>
<td>双精度浮点数</td>
<td>8 个字节</td>
</tr>
<tr>
<td>DECIMAL (M, D)，DEC</td>
<td>压缩的“严格”定点数</td>
<td>M+2 个字节</td>
</tr>
</tbody>
</table>
<p>DECIMAL 类型不同于 FLOAT 和 DOUBLE。<br>DOUBLE 实际上是以字符串的形式存放的，DECIMAL 可能的最大取值范围与 DOUBLE 相同，但是有效的取值范围由 M 和 D 决定。<br>如果改变 M 而固定 D，则取值范围将随 M 的变大而变大。<br>DECIMAL 的存储空间并不是固定的，而由精度值 M 决定，占用 M+2 个字节。</p>
<p>FLOAT 类型的取值范围如下：</p>
<ul>
<li>有符号的取值范围：-3.402823466E+38～-1.175494351E-38。</li>
<li>无符号的取值范围：0 和 -1.175494351E-38～-3.402823466E+38。</li>
</ul>
<p>DOUBLE 类型的取值范围如下：</p>
<ul>
<li>有符号的取值范围：-1.7976931348623157E+308～-2.2250738585072014E-308。</li>
<li>无符号的取值范围：0 和 -2.2250738585072014E-308～-1.7976931348623157E+308。</li>
</ul>
<blockquote>
<p>不论是定点还是浮点类型，如果指定的精度超出精度范围，则会四舍五入进行处理。</p>
</blockquote>
<p>FLOAT 和 DOUBLE 在不指定精度时，默认会按照实际的精度（由计算机硬件和操作系统决定），DECIMAL 如果不指定精度，默认为（10，0）。</p>
<p>浮点数相对于定点数的优点是在长度一定的情况下，浮点数能够表示更大的范围；缺点是会引起精度问题。</p>
<blockquote>
<p>在 MySQL 中，定点数以字符串形式存储，在对精度要求比较高的时候（如货币、科学数据），使用 DECIMAL 的类型比较好，另外两个浮点数进行减法和比较运算时也容易出问题，所以在使用浮点数时需要注意，并尽量避免做浮点数比较。</p>
</blockquote>
<hr>
<h3 id="日期和时间类型"><a href="#日期和时间类型" class="headerlink" title="日期和时间类型"></a>日期和时间类型</h3><p>日期的数据类型：<strong>YEAR</strong>、<strong>TIME</strong>、<strong>DATE</strong>、<strong>DTAETIME</strong>、<strong>TIMESTAMP</strong>。</p>
<p>每一个类型都有合法的取值范围，当指定确定不合法的值时，系统将“零”值插入数据库中。</p>
<p>日期与时间类型:</p>
<table>
<thead>
<tr>
<th>类型名称</th>
<th>日期格式</th>
<th>日期范围</th>
<th>存储需求</th>
</tr>
</thead>
<tbody>
<tr>
<td>YEAR</td>
<td>YYYY</td>
<td>1901 ~ 2155</td>
<td>1 个字节</td>
</tr>
<tr>
<td>TIME</td>
<td>HH:MM:SS</td>
<td>-838:59:59 ~ 838:59:59</td>
<td>3 个字节</td>
</tr>
<tr>
<td>DATE</td>
<td>YYYY-MM-DD</td>
<td>1000-01-01 ~ 9999-12-3</td>
<td>3 个字节</td>
</tr>
<tr>
<td>DATETIME</td>
<td>YYYY-MM-DD HH:MM:SS</td>
<td>1000-01-01 00:00:00 ~ 9999-12-31 23:59:59</td>
<td>8 个字节</td>
</tr>
<tr>
<td>TIMESTAMP</td>
<td>YYYY-MM-DD HH:MM:SS</td>
<td>1980-01-01 00:00:01 UTC ~ 2040-01-19 03:14:07 UTC</td>
<td>4 个字节</td>
</tr>
</tbody>
</table>
<h5 id="YEAR-类型"><a href="#YEAR-类型" class="headerlink" title="YEAR 类型"></a>YEAR 类型</h5><p>YEAR 类型是一个单字节类型，用于表示年，在存储时只需要 1 个字节。</p>
<ul>
<li>以 4 位字符串或者 4 位数字格式表示的 YEAR，范围为 ‘1901’～’2155’。输入格式为 ‘YYYY’ 或者 YYYY，例如，输入 ‘2019’ 或 2019，插入数据库的值均为 2019。</li>
<li>以 2 位字符串格式表示的 YEAR，范围为 ‘00’ 到 ‘99’。’00’～’69’ 和 ‘70’～’99’ 范围的值分别被转换为 2000～2069 和 1970～1999 范围的 YEAR 值。’0’ 与 ‘00’ 的作用相同。插入超过取值范围的值将被转换为 2000。</li>
<li>以 2 位数字表示的 YEAR，范围为 1～99。1～99 和 70～99 范围的值分别被转换为 2001～2069 和 1970～1999 范围的 YEAR 值。注意，在这里 0 值将被转换为 0000，而不是 2000。</li>
</ul>
<blockquote>
<p>两位整数范围与两位字符串范围稍有不同。<br>例如，插入 3000 年，读者可能会使用数字格式的 0 表示 YEAR，实际上，插入数据库的值为 0000，而不是所希望的 3000。<br>只有使用字符串格式的 ‘0’ 或 ‘00’，才可以被正确解释为 3000，非法 YEAR值将被转换为 0000。</p>
</blockquote>
<h5 id="TIME-类型"><a href="#TIME-类型" class="headerlink" title="TIME 类型"></a>TIME 类型</h5><p>TIME 类型用于只需要时间信息的值，在存储时需要 3 个字节。<br>格式为 HH:MM:SS。HH 表示小时，MM 表示分钟，SS 表示秒。</p>
<p>TIME 类型的取值范围为 -838：59：59～838：59：59，小时部分如此大的原因是 TIME 类型不仅可以用于表示一天的时间（必须小于 24 小时），还可能是某个事件过去的时间或两个事件之间的时间间隔（可大于 24 小时，或者甚至为负）。</p>
<p>指定 TIME 值:</p>
<ul>
<li>‘D HH：MM：SS’ 格式的字符串。还可以使用这些“非严格”的语法：’HH：MM：SS’、’HH：MM’、’D HH’ 或 ‘SS’。这里的 D 表示日，可以取 0～34 之间的值。在插入数据库时，D 被转换为小时保存，格式为 “D*24+HH”。</li>
<li>‘HHMMSS’ 格式、没有间隔符的字符串或者 HHMMSS 格式的数值，假定是有意义的时间。例如，’101112’ 被理解为’10：11：12’，但是 ‘106112’ 是不合法的（它有一个没有意义的分钟部分），在存储时将变为 00：00：00。</li>
</ul>
<blockquote>
<p>TIME 列分配简写值时应注意：<br>没有冒号，MySQL 解释值时，假定最右边的两位表示秒。<br>‘1112’ 和 1112 表示00：11：12（即 11 分 12 秒）。<br>使用冒号则肯定被看作当天的时间。<br>‘11：12’ 表示 11：12：00，而不是 00：11：12。</p>
</blockquote>
<h5 id="DATE-类型"><a href="#DATE-类型" class="headerlink" title="DATE 类型"></a>DATE 类型</h5><p>DATE 类型用于仅需要日期值时，没有时间部分，在存储时需要 3 个字节。<br>日期格式为 ‘YYYY-MM-DD’，其中 YYYY 表示年，MM 表示月，DD 表示日。</p>
<p>在给 DATE 类型的字段赋值时，可以使用字符串类型或者数字类型的数据插入，只要符合 DATE 的日期格式即可。</p>
<ul>
<li>以 ‘YYYY-MM-DD’ 或者 ‘YYYYMMDD’ 字符中格式表示的日期，取值范围为 ‘1000-01-01’～’9999-12-3’。例如，输入 ‘2019-10-05’ 或者 ‘20191005’，插入数据库的日期为2019-10-05。</li>
<li>以 ‘YY-MM-DD’ 或者 ‘YYMMDD’ 字符串格式表示日期，在这里YY表示两位的年值。MySQL 解释两位年值的规则：’00～69’ 范围的年值转换为 ‘2000~2069’，’70~99’ 范围的年值转换为 ‘1970～1999’。例如，输入 ‘15-12-31’，插入数据库的日期为 2015-12-31；输入 ‘991231’，插入数据库的日期为 1999-12-31。</li>
<li>以 YYMMDD 数字格式表示的日期，与前面相似，00~69 范围的年值转换为 2000～2069，80～99 范围的年值转换为 1980～1999。例如，输入 151231，插入数据库的日期为 2015-12-31，输入 991231，插入数据库的日期为 1999-12-31。</li>
<li>使用 CURRENT_DATE 或者 NOW()，插入当前系统日期。</li>
</ul>
<blockquote>
<p>MySQL 允许“不严格”语法：任何标点符号都可以用作日期部分之间的间隔符。<br>例如，’98-11-31’、’98.11.31’、’98/11/31’和‘98@11@31’ 是等价的，这些值也可以正确地插入数据库。</p>
</blockquote>
<h5 id="DATETIME-类型"><a href="#DATETIME-类型" class="headerlink" title="DATETIME 类型"></a>DATETIME 类型</h5><p>DATETIME 类型用于需要同时包含日期和时间信息的值，在存储时需要 8 个字节。<br>日期格式为 ‘YYYY-MM-DD HH：MM：SS’，其中 YYYY 表示年，MM 表示月，DD 表示日，HH 表示小时，MM 表示分钟，SS 表示秒。</p>
<p>在给 DATETIME 类型的字段赋值时，可以使用字符串类型或者数字类型的数据插入，只要符合 DATETIME 的日期格式即可。</p>
<ul>
<li>以 ‘YYYY-MM-DD HH：MM：SS’ 或者 ‘YYYYMMDDHHMMSS’ 字符串格式表示的日期，取值范围为 ‘1000-01-01 00：00：00’～’9999-12-3 23：59：59’。例如，输入 ‘2014-12-31 05：05：05’ 或者 ‘20141231050505’，插入数据库的 DATETIME 值都为 2014-12-31 05：05：05。</li>
<li>以 ‘YY-MM-DD HH：MM：SS’ 或者 ‘YYMMDDHHMMSS’ 字符串格式表示的日期，在这里 YY 表示两位的年值。与前面相同，’00～79’ 范围的年值转换为 ‘2000～2079’，’80～99’ 范围的年值转换为 ‘1980～1999’。例如，输入 ‘14-12-31 05：05：05’，插入数据库的 DATETIME 为 2014-12-31 05：05：05；输入 141231050505，插入数据库的 DATETIME 为 2014-12-31 05：05：05。</li>
<li>以 YYYYMMDDHHMMSS 或者 YYMMDDHHMMSS 数字格式表示的日期和时间。例如，输入 20141231050505，插入数据库的 DATETIME 为 2014-12-31 05：05：05；输入 140505050505，插入数据库的 DATETIME 为 2014-12-31 05：05：05。</li>
</ul>
<blockquote>
<p>MySQL 允许“不严格”语法：任何标点符号都可用作日期部分或时间部分之间的间隔符。<br>例如，’98-12-31 11：30：45’、’98.12.31 11+30+35’、’98/12/31 11<em>30</em>45’ 和 ‘98@12@31 11^30^45’ 是等价的，这些值都可以正确地插入数据库。</p>
</blockquote>
<h5 id="TIMESTAMP-类型"><a href="#TIMESTAMP-类型" class="headerlink" title="TIMESTAMP 类型"></a>TIMESTAMP 类型</h5><p>TIMESTAMP 的显示格式与 DATETIME 相同，显示宽度固定在 19 个字符，日期格式为 YYYY-MM-DD HH：MM：SS，在存储时需要 4 个字节。<br>但是 TIMESTAMP 列的取值范围小于 DATETIME 的取值范围，为 ‘1970-01-01 00：00：01’UTC～’2038-01-19 03：14：07’UTC。<br>在插入数据时，要保证在合法的取值范围内。</p>
<blockquote>
<p>协调世界时（英：Coordinated Universal Time，法：Temps Universel Coordonné）又称为世界统一时间、世界标准时间、国际协调时间。<br>英文（CUT）和法文（TUC）的缩写不同，作为妥协，简称 UTC。</p>
</blockquote>
<p>TIMESTAMP 与 DATETIME 除了存储字节和支持的范围不同外，还有一个最大的区别是：</p>
<ul>
<li>DATETIME 在存储日期数据时，按实际输入的格式存储，即输入什么就存储什么，与时区无关；</li>
<li>而 TIMESTAMP 值的存储是以 UTC（世界标准时间）格式保存的，存储时对当前时区进行转换，检索时再转换回当前时区。即查询时，根据当前时区的不同，显示的时间值是不同的。</li>
</ul>
<blockquote>
<p>如果为一个 DATETIME 或 TIMESTAMP 对象分配一个 DATE 值，结果值的时间部分被设置为 ‘00：00：00’，因此 DATE 值未包含时间信息。<br>如果为一个 DATE 对象分配一个 DATETIME 或 TIMESTAMP 值，结果值的时间部分被删除，因此DATE 值未包含时间信息。</p>
</blockquote>
<hr>
<h3 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h3><p>字符串类型用来存储字符串数据，还可以存储图片和声音的二进制数据。<br>字符串可以区分或者不区分大小写的串比较，还可以进行正则表达式的匹配查找。</p>
<p>字符串类型有 <strong>CHAR</strong>、<strong>VARCHAR</strong>、<strong>TINYTEXT</strong>、<strong>TEXT</strong>、<strong>MEDIUMTEXT</strong>、<strong>LONGTEXT</strong>、<strong>ENUM</strong>、<strong>SET</strong> 等。</p>
<p> MySQL 中的字符串数据类型，括号中的<code>M</code>表示可以为其指定长度。</p>
<table>
<thead>
<tr>
<th>类型名称</th>
<th>说明</th>
<th>存储需求</th>
</tr>
</thead>
<tbody>
<tr>
<td>CHAR(M)</td>
<td>固定长度非二进制字符串</td>
<td>M 字节，1&lt;=M&lt;=255</td>
</tr>
<tr>
<td>VARCHAR(M)</td>
<td>变长非二进制字符串</td>
<td>L+1字节，在此，L&lt; = M和 1&lt;=M&lt;=255</td>
</tr>
<tr>
<td>TINYTEXT</td>
<td>非常小的非二进制字符串</td>
<td>L+1字节，在此，L&lt;2^8</td>
</tr>
<tr>
<td>TEXT</td>
<td>小的非二进制字符串</td>
<td>L+2字节，在此，L&lt;2^16</td>
</tr>
<tr>
<td>MEDIUMTEXT</td>
<td>中等大小的非二进制字符串</td>
<td>L+3字节，在此，L&lt;2^24</td>
</tr>
<tr>
<td>LONGTEXT</td>
<td>大的非二进制字符串</td>
<td>L+4字节，在此，L&lt;2^32</td>
</tr>
<tr>
<td>ENUM</td>
<td>枚举类型，只能有一个枚举字符串值</td>
<td>1或2个字节，取决于枚举值的数目 (最大值为65535)</td>
</tr>
<tr>
<td>SET</td>
<td>一个设置，字符串对象可以有零个或 多个SET成员</td>
<td>1、2、3、4或8个字节，取决于集合 成员的数量（最多64个成员）</td>
</tr>
</tbody>
</table>
<p>VARCHAR 和 TEXT 类型是变长类型，其存储需求取决于列值的实际长度（在前面的表格中用 L 表示），而不是取决于类型的最大可能尺寸。</p>
<h5 id="CHAR-和-VARCHAR-类型"><a href="#CHAR-和-VARCHAR-类型" class="headerlink" title="CHAR 和 VARCHAR 类型"></a>CHAR 和 VARCHAR 类型</h5><p>CHAR(M) 为固定长度字符串，在定义时指定字符串列长。<br>当保存时，在右侧填充空格以达到指定的长度。<br>M 表示列的长度，范围是 0～255 个字符。</p>
<p>VARCHAR(M) 是长度可变的字符串，M 表示最大列的长度，M 的范围是 0～65535。<br>VARCHAR 的最大实际长度由最长的行的大小和使用的字符集确定，而实际占用的空间为字符串的实际长度加 1。</p>
<p>将不同的字符串保存到 CHAR(4) 和 VARCHAR(4) 列，说明 CHAR 和 VARCHAR 之间的差别。</p>
<table>
<thead>
<tr>
<th>插入值</th>
<th>CHAR(4)</th>
<th>存储需求</th>
<th>VARCHAR(4)</th>
<th>存储需求</th>
</tr>
</thead>
<tbody>
<tr>
<td>‘ ‘</td>
<td>‘    ‘</td>
<td>4字节</td>
<td>‘’</td>
<td>1字节</td>
</tr>
<tr>
<td>‘ab’</td>
<td>‘ab  ‘</td>
<td>4字节</td>
<td>‘ab’</td>
<td>3字节</td>
</tr>
<tr>
<td>‘abc’</td>
<td>‘abc ‘</td>
<td>4字节</td>
<td>‘abc’</td>
<td>4字节</td>
</tr>
<tr>
<td>‘abcd’</td>
<td>‘abcd’</td>
<td>4字节</td>
<td>‘abcd’</td>
<td>5字节</td>
</tr>
<tr>
<td>‘abcdef’</td>
<td>‘abcd’</td>
<td>4字节</td>
<td>‘abcd’</td>
<td>5字节</td>
</tr>
</tbody>
</table>
<p>对比结果可以看到，CHAR(4) 定义了固定长度为 4 的列，无论存入的数据长度为多少，所占用的空间均为 4 个字节。VARCHAR(4) 定义的列所占的字节数为实际长度加 1。</p>
<hr>
<h3 id="TEXT-类型"><a href="#TEXT-类型" class="headerlink" title="TEXT 类型"></a>TEXT 类型</h3><p>TEXT 列保存非二进制字符串，如文章内容、评论等。<br>当保存或查询 TEXT 列的值时，不删除尾部空格。</p>
<p>TEXT 类型分为 4 种：TINYTEXT、TEXT、MEDIUMTEXT 和 LONGTEXT。<br>不同的 TEXT 类型的存储空间和数据长度不同。</p>
<ul>
<li>TINYTEXT 表示长度为 255（28-1）字符的 TEXT 列。</li>
<li>TEXT 表示长度为 65535（216-1）字符的 TEXT 列。</li>
<li>MEDIUMTEXT 表示长度为 16777215（224-1）字符的 TEXT 列。</li>
<li>LONGTEXT 表示长度为 4294967295 或 4GB（232-1）字符的 TEXT 列。</li>
</ul>
<hr>
<h3 id="ENUM-类型"><a href="#ENUM-类型" class="headerlink" title="ENUM 类型"></a>ENUM 类型</h3><p>ENUM 是一个字符串对象，值为表创建时列规定中枚举的一列值。</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&lt;字段名&gt; ENUM( &apos;值1&apos;, &apos;值1&apos;, …, &apos;值n&apos; )</span><br></pre></td></tr></table></figure></div>
<p>字段名指将要定义的字段，值 n 指枚举列表中第 n 个值。</p>
<p>ENUM 类型的字段在取值时，能在指定的枚举列表中获取，而且一次只能取一个。<br>如果创建的成员中有空格，尾部的空格将自动被删除。</p>
<p>ENUM 值在内部用整数表示，每个枚举值均有一个索引值；列表值所允许的成员值从 1 开始编号，MySQL 存储的就是这个索引编号，枚举最多可以有 65535 个元素。</p>
<hr>
<h3 id="SET-类型"><a href="#SET-类型" class="headerlink" title="SET 类型"></a>SET 类型</h3><p>SET 是一个字符串的对象，可以有零或多个值，SET 列最多可以有 64 个成员，值为表创建时规定的一列值。指定包括多个 SET 成员的 SET 列值时，各成员之间用逗号<code>,</code>隔开，语法格式如下：</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">SET( &apos;值1&apos;, &apos;值2&apos;, …, &apos;值n&apos; )</span><br></pre></td></tr></table></figure></div>
<p>与 ENUM 类型相同，SET 值在内部用整数表示，列表中每个值都有一个索引编号。当创建表时，SET 成员值的尾部空格将自动删除。</p>
<p>但与 ENUM 类型不同的是，ENUM 类型的字段只能从定义的列值中选择一个值插入，而 SET 类型的列可从定义的列值中选择多个字符的联合。</p>
<blockquote>
<p>提示：如果插入 SET 字段中的列值有重复，则 MySQL 自动删除重复的值；插入 SET 字段的值的顺序并不重要，MySQL 会在存入数据库时，按照定义的顺序显示；如果插入了不正确的值，默认情况下，MySQL 将忽视这些值，给出警告。</p>
</blockquote>
<hr>
<h3 id="二进制类型"><a href="#二进制类型" class="headerlink" title="二进制类型"></a>二进制类型</h3><p>两类字符型数据：文本字符串和二进制字符串。</p>
<blockquote>
<p>二进制字符串类型有时候也直接被称为“二进制类型”。</p>
</blockquote>
<p>二进制字符串有 <strong>BIT</strong>、<strong>BINARY</strong>、<strong>VARBINARY</strong>、<strong>TINYBLOB</strong>、<strong>BLOB</strong>、<strong>MEDIUMBLOB</strong> 和 <strong>LONGBLOB</strong>。</p>
<p> MySQL 中的二进制数据类型，括号中的<code>M</code>表示可以为其指定长度。</p>
<table>
<thead>
<tr>
<th>类型名称</th>
<th>说明</th>
<th>存储需求</th>
</tr>
</thead>
<tbody>
<tr>
<td>BIT(M)</td>
<td>位字段类型</td>
<td>大约 (M+7)/8 字节</td>
</tr>
<tr>
<td>BINARY(M)</td>
<td>固定长度二进制字符串</td>
<td>M 字节</td>
</tr>
<tr>
<td>VARBINARY (M)</td>
<td>可变长度二进制字符串</td>
<td>M+1 字节</td>
</tr>
<tr>
<td>TINYBLOB (M)</td>
<td>非常小的BLOB</td>
<td>L+1 字节，在此，L&lt;2^8</td>
</tr>
<tr>
<td>BLOB (M)</td>
<td>小 BLOB</td>
<td>L+2 字节，在此，L&lt;2^16</td>
</tr>
<tr>
<td>MEDIUMBLOB (M)</td>
<td>中等大小的BLOB</td>
<td>L+3 字节，在此，L&lt;2^24</td>
</tr>
<tr>
<td>LONGBLOB (M)</td>
<td>非常大的BLOB</td>
<td>L+4 字节，在此，L&lt;2^32</td>
</tr>
</tbody>
</table>
<h5 id="BIT-类型"><a href="#BIT-类型" class="headerlink" title="BIT 类型"></a>BIT 类型</h5><p>位字段类型。M 表示每个值的位数，范围为 1～64。如果 M 被省略，默认值为 1。如果为 BIT(M) 列分配的值的长度小于 M 位，在值的左边用 0 填充。</p>
<p>BIT 数据类型用来保存位字段值，例如以二进制的形式保存数据 13，13 的二进制形式为 1101，在这里需要位数至少为 4 位的 BIT 类型，即可以定义列类型为 BIT(4)。大于二进制 1111 的数据是不能插入 BIT(4) 类型的字段中的。</p>
<blockquote>
<p>默认情况下，MySQL 不可以插入超出该列允许范围的值，因而插入数据时要确保插入的值在指定的范围内。</p>
</blockquote>
<h5 id="BINARY-和-VARBINARY-类型"><a href="#BINARY-和-VARBINARY-类型" class="headerlink" title="BINARY 和 VARBINARY 类型"></a>BINARY 和 VARBINARY 类型</h5><p>BINARY 和 VARBINARY 类型类似于 CHAR 和 VARCHAR，不同的是它们包含二进制字节字符串。</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">列名称 BINARY(M) 或者 VARBINARY(M)</span><br></pre></td></tr></table></figure></div>
<p>BINARY 类型的长度是固定的，指定长度后，不足最大长度的，将在它们右边填充 “\0” 补齐，以达到指定长度。例如，指定列数据类型为 BINARY(3)，当插入 a 时，存储的内容实际为 “\a0\0”，当插入 ab 时，实际存储的内容为“ab\0”，无论存储的内容是否达到指定的长度，存储空间均为指定的值 M。</p>
<p>VARBINARY 类型的长度是可变的，指定好长度之后，长度可以在 0 到最大值之间。例如，指定列数据类型为 VARBINARY(20)，如果插入的值长度只有 10，则实际存储空间为 10 加 1，实际占用的空间为字符串的实际长度加 1。</p>
<h5 id="BLOB-类型"><a href="#BLOB-类型" class="headerlink" title="BLOB 类型"></a>BLOB 类型</h5><p>BLOB 是一个二进制的对象，用来存储可变数量的数据。BLOB 类型分为 4 种：TINYBLOB、BLOB、MEDIUMBLOB 和 LONGBLOB，它们可容纳值的最大长度不同。</p>
<table>
<thead>
<tr>
<th>数据类型</th>
<th>存储范围</th>
</tr>
</thead>
<tbody>
<tr>
<td>TINYBLOB</td>
<td>最大长度为255 (28-1)字节</td>
</tr>
<tr>
<td>BLOB</td>
<td>最大长度为65535 (216-1)字节</td>
</tr>
<tr>
<td>MEDIUMBLOB</td>
<td>最大长度为16777215 (224-1)字节</td>
</tr>
<tr>
<td>LONGBLOB</td>
<td>最大长度为4294967295或4GB (231-1)字节</td>
</tr>
</tbody>
</table>
<p>BLOB 列存储的是二进制字符串（字节字符串），TEXT 列存储的是非进制字符串（字符字符串）。BLOB 列是字符集，并且排序和比较基于列值字节的数值；TEXT 列有一个字符集，并且根据字符集对值进行排序和比较。</p>
]]></content>
      <categories>
        <category>DB</category>
      </categories>
      <tags>
        <tag>DB</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql自定义排序</title>
    <url>/2020/11/06/Mysql%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<p>mysql对结果集进行排序操作时，可以进行常规的递增递减排序也可以进行自定义排序，记录一下自定义排序使用到的方法！<br><a id="more"></a></p>
<h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">order by field(value,str1,str2,str3,str4,,,strn)</span><br></pre></td></tr></table></figure></div>
<h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">select * from 数据表 order by field(需要排序的列名,&apos;顺序1&apos;,&apos;顺序2&apos;,&apos;顺序3&apos;,&apos;顺序4&apos;&apos;顺序5&apos;);</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>DB</category>
      </categories>
      <tags>
        <tag>DB</tag>
      </tags>
  </entry>
  <entry>
    <title>Vim快速跳转任意列</title>
    <url>/2020/11/13/Vim%E5%BF%AB%E9%80%9F%E8%B7%B3%E8%BD%AC%E4%BB%BB%E6%84%8F%E5%88%97/</url>
    <content><![CDATA[<p>记录vim中简单的跳转操作<br><a id="more"></a></p>
<h2 id="1-跳转到行首"><a href="#1-跳转到行首" class="headerlink" title="1 跳转到行首"></a><strong>1 跳转到行首</strong></h2><p>vim普通模式下，使用命令 <code>0</code> 或 <code>|</code> 可跳转光标到当前行的行首。</p>
<p><strong>注</strong>：<code>|</code> 英文名叫 bar，是<strong>vim普通模式</strong>下用于跳转到当前行某一列的一个命令 (To screen column [count] in the current line)，<code>|</code> 表示当前行的第0列 (行首)</p>
<h2 id="2-跳转到行尾"><a href="#2-跳转到行尾" class="headerlink" title="2 跳转到行尾"></a><strong>2 跳转到行尾</strong></h2><p>vim普通模式下，使用命令 <code>$</code> 跳转光标到当前行的行尾</p>
<h2 id="3-跳转任意列"><a href="#3-跳转任意列" class="headerlink" title="3 跳转任意列"></a><strong>3 跳转任意列</strong></h2><p>vim普通模式下，可使用以下vim命令 <code>0nl</code> 或 <code>n|</code> 跳转到当前行的第 n 列。</p>
<p><strong>注</strong>：</p>
<p><code>0nl</code> 表示先用命令 <code>0</code> 将光标移动到行首，<code>nl</code> 表示执行 n 次向右移动光标操作<code>n|</code> 表示使用 <strong>|</strong> 命令跳转到当前行的第 n 列</p>
]]></content>
      <categories>
        <category>Tool</category>
      </categories>
      <tags>
        <tag>Tool</tag>
      </tags>
  </entry>
  <entry>
    <title>mac中nvm安装使用</title>
    <url>/2020/11/15/mac%E4%B8%ADnvm%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>使用nvm对node进行版本控制<br><a id="more"></a></p>
<h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令:"></a>常用命令:</h4><ol>
<li>nvm list 是查找本电脑上所有的node版本<ul>
<li>nvm list 查看已经安装的版本</li>
<li>nvm list installed 查看已经安装的版本</li>
<li>nvm list available 查看网络可以安装的版本</li>
</ul>
</li>
<li>nvm install 安装最新版本nvm</li>
<li>nvm use <version> ## 切换使用指定的版本node</version></li>
<li>nvm ls 列出所有版本</li>
<li>nvm current显示当前版本</li>
<li>nvm alias <name> <version> ## 给不同的版本号添加别名</version></name></li>
<li>nvm unalias <name> ## 删除已定义的别名</name></li>
<li>nvm reinstall-packages <version> ## 在当前版本node环境下，重新全局安装指定版本号的npm包</version></li>
<li>nvm on 打开nodejs控制</li>
<li>nvm off 关闭nodejs控制</li>
<li>nvm proxy 查看设置与代理</li>
<li>nvm uninstall <version> 卸载制定的版本</version></li>
<li>nvm use [version] [arch] 切换制定的node版本和位数</li>
<li>nvm root [path] 设置和查看root路径</li>
<li>nvm version 查看当前的版本</li>
<li>nvm node_mirror [url] 设置或者查看setting.txt中的node_mirror，如果不设置的默认是 <a href="https://nodejs.org/dist/" target="_blank" rel="noopener">https://nodejs.org/dist/</a></li>
<li>nvm npm_mirror [url] 设置或者查看setting.txt中的npm_mirror,如果不设置的话默认的是： <a href="https://github.com/npm/npm/archive/" target="_blank" rel="noopener">https://github.com/npm/npm/archive/</a></li>
</ol>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>WEB API</title>
    <url>/2020/11/22/WEB-API/</url>
    <content><![CDATA[<p>记录一下常用的web api<br><a id="more"></a></p>
<h2 id="掌握"><a href="#掌握" class="headerlink" title="掌握"></a>掌握</h2><p>根据id获取元素<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">''</span>);</span><br></pre></td></tr></table></figure></div></p>
<p>根据标签名获取元素<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementsByTagName(<span class="string">''</span>);</span><br></pre></td></tr></table></figure></div></p>
<h2 id="了解"><a href="#了解" class="headerlink" title="了解"></a>了解</h2><p>根据name获取元素<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementsByName(<span class="string">''</span>);</span><br></pre></td></tr></table></figure></div></p>
<p>根据类名获取元素<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementsByClassName(<span class="string">''</span>);</span><br></pre></td></tr></table></figure></div></p>
<p>根据选择器获取元素<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">''</span>);</span><br></pre></td></tr></table></figure></div></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>删除Mac上的Microsoft AutoUpdate</title>
    <url>/2020/12/24/%E5%88%A0%E9%99%A4Mac%E4%B8%8A%E7%9A%84Microsoft-AutoUpdate/</url>
    <content><![CDATA[<p>mac上总是弹出来很烦，删除掉，记录一下方法！<br><a id="more"></a></p>
<ol>
<li>进入访达，按住Command+Shift+G</li>
<li>输入:/Library/Application Support/Microsoft/</li>
<li>删除整个目录</li>
<li>清空废纸篓</li>
</ol>
]]></content>
      <categories>
        <category>MAC</category>
      </categories>
      <tags>
        <tag>MAC</tag>
      </tags>
  </entry>
  <entry>
    <title>Homebrew命令合集</title>
    <url>/2020/12/28/Homebrew%E5%91%BD%E4%BB%A4%E5%90%88%E9%9B%86/</url>
    <content><![CDATA[<p>记录一下常用的命令！<br><a id="more"></a><br>安装Homebrew<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">/bin/bash -c <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)</span>"</span></span><br></pre></td></tr></table></figure></div></p>
<p>常用命令<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#安装软件</span></span><br><span class="line">brew install name</span><br><span class="line"><span class="comment">#桌面端软件</span></span><br><span class="line">brew cask install name</span><br><span class="line"><span class="comment">#联网搜索软件是否存在brew中</span></span><br><span class="line">brew search name</span><br><span class="line"><span class="comment">#更新软件</span></span><br><span class="line">brew upgrade name </span><br><span class="line"><span class="comment">#卸载软件</span></span><br><span class="line">brew unistall name</span><br><span class="line"><span class="comment">#重新安装软件</span></span><br><span class="line">brew reinstall name</span><br><span class="line"><span class="comment">#查看软件安装地址</span></span><br><span class="line">brew info name</span><br><span class="line"><span class="comment">#清理缓存</span></span><br><span class="line">brew cleanup</span><br><span class="line"><span class="comment">#查看建议，例如升级等</span></span><br><span class="line">brew doctor</span><br></pre></td></tr></table></figure></div></p>
]]></content>
      <categories>
        <category>MAC</category>
      </categories>
      <tags>
        <tag>MAC</tag>
      </tags>
  </entry>
  <entry>
    <title>nrm安装与配置</title>
    <url>/2020/12/13/nrm%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>nrm(npm registry manager )是npm的镜像源管理工具，可以快速切换npm的源。<br><a id="more"></a><br>安装nrm<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line">npm install -g nrm</span><br></pre></td></tr></table></figure></div></p>
<p>查看可选的源<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">nrm ls</span><br><span class="line"></span><br><span class="line">*npm ---- https://registry.npmjs.org/</span><br><span class="line">cnpm --- http://r.cnpmjs.org/</span><br><span class="line">taobao - http://registry.npm.taobao.org/</span><br><span class="line">eu ----- http://registry.npmjs.eu/</span><br><span class="line">au ----- http://registry.npmjs.org.au/</span><br><span class="line">sl ----- http://npm.strongloop.com/</span><br><span class="line">nj ----- https://registry.nodejitsu.com/</span><br><span class="line">带*的是当前使用的源，上面的输出表明当前源是官方源。</span><br></pre></td></tr></table></figure></div></p>
<p>使用源<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">nrm use *</span><br></pre></td></tr></table></figure></div></p>
<p>增加源<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">nrm add registry http://registry.npm.frp.trmap.cn/</span><br></pre></td></tr></table></figure></div></p>
<p>删除源<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">nrm del &lt;registry&gt;</span><br></pre></td></tr></table></figure></div></p>
<p>速度测试<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">nrm test npm</span><br></pre></td></tr></table></figure></div></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL中substring_index函数使用详解</title>
    <url>/2020/12/30/MySQL%E4%B8%ADsubstring-index%E5%87%BD%E6%95%B0%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<p>substring_index函数使用详解<br><a id="more"></a></p>
<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>SUBSTRING_INDEX - 按分隔符截取字符串</p>
<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">SUBSTRING_INDEX(str, delimiter, count);</span><br></pre></td></tr></table></figure></div>
<p>返回一个 str 的子字符串，在 delimiter 出现 count 次的位置截取。<br>如果 count &gt; 0，从则左边数起，且返回位置前的子串；如果 count &lt; 0，从则右边数起，且返回位置后的子串。<br>delimiter 是大小写敏感，且是多字节安全的。</p>
<p>substring_index（“待截取有用部分的字符串”，“截取数据依据的字符”，截取字符的位置N）</p>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">SELECT SUBSTRING_INDEX(‘192,168,8,203’,’,’,1);</span><br><span class="line"># 192</span><br><span class="line">SELECT SUBSTRING_INDEX(‘192,168,8,203’,’,’,-1);</span><br><span class="line"># 203</span><br><span class="line">SELECT SUBSTRING_INDEX(SUBSTRING_INDEX(‘192,168,8,203’,’,’,2),’,’,-1);</span><br><span class="line"># 168</span><br><span class="line">SELECT SUBSTRING_INDEX(SUBSTRING_INDEX(‘192,168,8,203’,’,’,-2),’,’,1);</span><br><span class="line"># 8</span><br><span class="line">SELECT SUBSTRING_INDEX(‘192,168,8,203’,’,’,-1);</span><br><span class="line"># 203</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>DB</category>
      </categories>
      <tags>
        <tag>DB</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML基础</title>
    <url>/2021/01/21/HTML%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<p>前端基础<br><a id="more"></a></p>
<h2 id="一、认识WEB"><a href="#一、认识WEB" class="headerlink" title="一、认识WEB"></a>一、认识WEB</h2><p><strong>「网页」</strong>主要是由<code>文字</code>、<code>图像</code>和<code>超链接</code>等元素构成，当然除了这些元素，网页中还可以包括音频、视频以及Flash等。</p>
<p><strong>「浏览器」</strong>是网页显示、运行的平台。</p>
<p><strong>「浏览器内核」</strong>(排版引擎、解释引擎、渲染引擎)</p>
<blockquote>
<p>负责读取网页内容，整理讯息，计算网页的显示方式并显示页面。</p>
</blockquote>
<table>
<thead>
<tr>
<th style="text-align:left">浏览器</th>
<th style="text-align:center">内核</th>
<th style="text-align:left">备注</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">IE</td>
<td style="text-align:center">Trident</td>
<td style="text-align:left">IE、猎豹安全、360极速浏览器、百度浏览器</td>
</tr>
<tr>
<td style="text-align:left">firefox</td>
<td style="text-align:center">Gecko</td>
<td style="text-align:left">可惜这几年已经没落了，打开速度慢、升级频繁、猪一样的队友flash、神一样的对手chrome。</td>
</tr>
<tr>
<td style="text-align:left">Safari</td>
<td style="text-align:center">webkit</td>
<td style="text-align:left">现在很多人错误地把 webkit 叫做 chrome内核（即使 chrome内核已经是 blink 了）。苹果感觉像被别人抢了媳妇，都哭晕在厕所里面了。</td>
</tr>
<tr>
<td style="text-align:left">chrome</td>
<td style="text-align:center">Chromium/Blink</td>
<td style="text-align:left">在 Chromium 项目中研发 Blink 渲染引擎（即浏览器核心），内置于 Chrome 浏览器之中。Blink 其实是 WebKit 的分支。大部分国产浏览器最新版都采用Blink内核。二次开发</td>
</tr>
<tr>
<td style="text-align:left">Opera</td>
<td style="text-align:center">blink</td>
<td style="text-align:left">现在跟随chrome用blink内核。</td>
</tr>
</tbody>
</table>
<h3 id="Web标准"><a href="#Web标准" class="headerlink" title="Web标准"></a>Web标准</h3><p><strong>「构成」</strong>👉 <strong>结构标准，表现标准和行为标准</strong></p>
<ul>
<li>结构标准用于对网页元素进行整理和分类(HTML)</li>
<li>表现标准用于设置网页元素的版式、颜色、大小等外观属性(CSS)</li>
<li>行为标准用于对网页模型的定义及交互的编写(JavaScript)</li>
</ul>
<p><strong>「Web标准的优点」</strong>👇</p>
<ul>
<li>易于维护：只需更改CSS文件，就可以改变整站的样式</li>
<li>页面响应快：HTML文档体积变小，响应时间短</li>
<li>可访问性：语义化的HTML（结构和表现相分离的HTML）编写的网页文件，更容易被屏幕阅读器识别</li>
<li>设备兼容性：不同的样式表可以让网页在不同的设备上呈现不同的样式</li>
<li>搜索引擎：语义化的HTML能更容易被搜索引擎解析，提升排名</li>
</ul>
<h2 id="二、HTML初识"><a href="#二、HTML初识" class="headerlink" title="二、HTML初识"></a>二、HTML初识</h2><h3 id="HTML初识"><a href="#HTML初识" class="headerlink" title="HTML初识"></a>HTML初识</h3><p><strong>「HTML」</strong>(Hyper Text Markup Language):超文本标记语言</p>
<p><strong>「所谓超文本，有2层含义：」</strong></p>
<ul>
<li>因为它可以加入图片、声音、动画、多媒体等内容（超越文本限制 ）</li>
<li>不仅如此，它还可以从一个文件跳转到另一个文件，与世界各地主机的文件连接（超级链接文本）。</li>
</ul>
<p><strong>「HTML骨架格式」</strong></p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 页面中最大的标签 根标签 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 头部标签 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span>     </span><br><span class="line">        <span class="comment">&lt;!-- 标题标签 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 文档的主体 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
<p><strong>「团队约定大小写」</strong></p>
<ul>
<li>HTML标签名、类名、标签属性和大部分属性值统一用小写</li>
</ul>
<p><strong>「HTML元素标签分类」</strong></p>
<ul>
<li>常规元素(双标签)</li>
<li>空元素(单标签)</li>
</ul>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="code"><pre><span class="line">常规元素(双标签)</span><br><span class="line"><span class="tag">&lt;<span class="name">标签名</span>&gt;</span> 内容 <span class="tag">&lt;/<span class="name">标签名</span>&gt;</span>   比如<span class="tag">&lt;<span class="name">body</span>&gt;</span>我是文字<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">空元素(单标签)</span><br><span class="line"><span class="tag">&lt;<span class="name">标签名</span> /&gt;</span>  比如 <span class="tag">&lt;<span class="name">br</span> /&gt;</span>或<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
<p><strong>「HTML标签关系」</strong></p>
<ul>
<li><p>嵌套关系父子级包含关系</p>
</li>
<li><p>并列关系兄弟级并列关系</p>
<ul>
<li>如果两个标签之间的关系是嵌套关系，子元素最好缩进一个tab键的身位（一个tab是4个空格）。如果是并列关系，最好上下对齐。</li>
</ul>
</li>
</ul>
<h3 id="文档类型-lt-DOCTYPE-gt"><a href="#文档类型-lt-DOCTYPE-gt" class="headerlink" title="文档类型&lt;!DOCTYPE &gt;"></a>文档类型&lt;!DOCTYPE &gt;</h3><p><strong>「文档类型」</strong>用来说明你用的XHTML或者HTML是什么版本。&lt;!DOCTYPE html&gt;告诉浏览器按照HTML5标准解析页面。</p>
<h3 id="页面语言lang"><a href="#页面语言lang" class="headerlink" title="页面语言lang"></a>页面语言lang</h3><p>lang指定该html标签内容所用的语言</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span>  </span><br><span class="line">en 定义语言为英语 zh-CN定义语言为中文</span><br></pre></td></tr></table></figure></div>
<p><strong>「lang的作用」</strong></p>
<ul>
<li>根据根据lang属性来设定不同语言的css样式，或者字体</li>
<li>告诉搜索引擎做精确的识别</li>
<li>让语法检查程序做语言识别</li>
<li>帮助翻译工具做识别</li>
<li>帮助网页阅读程序做识别</li>
</ul>
<h3 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h3><p><strong>「字符集」</strong>(Character set)是多个字符的集合,计算机要准确的处理各种字符集文字，需要进行字符编码，以便计算机能够识别和存储各种文字。</p>
<ul>
<li>UTF-8是目前最常用的字符集编码方式</li>
<li>让 html 文件是以 UTF-8 编码保存的， 浏览器根据编码去解码对应的html内容。</li>
</ul>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br></pre></td></tr></table></figure></div>
<p><strong>「meta viewport的用法」</strong><br>  通常viewport是指视窗、视口。浏览器上(也可能是一个app中的webview)用来显示网页的那部分区域。在移动端和pc端视口是不同的，pc端的视口是浏览器窗口区域，而在移动端有三个不同的视口概念：布局视口、视觉视口、理想视口</p>
<p>  meta有两个属性name 和 http-equiv</p>
<p><strong>name属性的取值</strong></p>
<ul>
<li>keywords(关键字) 告诉搜索引擎，该网页的关键字</li>
<li>description(网站内容描述) 用于告诉搜索引擎，你网站的主要内容。</li>
<li>viewport(移动端的窗口)</li>
<li>robots(定义搜索引擎爬虫的索引方式) robots用来告诉爬虫哪些页面需要索引，哪些页面不需要索引</li>
<li>author(作者)</li>
<li>generator(网页制作软件）</li>
<li>copyright(版权)</li>
</ul>
<p><strong>http-equiv有以下参数</strong></p>
<p>http-equiv相当于http的文件头作用，它可以向浏览器传回一些有用的信息，以帮助正确和精确地显示网页内容</p>
<ul>
<li>content-Type 设定网页字符集(Html4用法，不推荐)</li>
<li>Expires(期限) ,可以用于设定网页的到期时间。一旦网页过期，必须到服务器上重新传输。</li>
<li>Pragma(cache模式),是用于设定禁止浏览器从本地机的缓存中调阅页面内容，设定后一旦离开网页就无法从Cache中再调出</li>
<li>Refresh(刷新),自动刷新并指向新页面。</li>
<li>cache-control（请求和响应遵循的缓存机制）</li>
</ul>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
<h3 id="HTML标签的语义化"><a href="#HTML标签的语义化" class="headerlink" title="HTML标签的语义化"></a>HTML标签的语义化</h3><ul>
<li>方便代码的阅读和维护，样式丢失的时候能让页面呈现清晰的结构。</li>
<li>有利于SEO，搜索引擎根据标签来确定上下文和各个关键字的权重。</li>
<li>方便其他设备解析，如盲人阅读器根据语义渲染网页</li>
</ul>
<p><strong>「拓展」</strong> 标签：规定页面上所有链接的默认 URL 和设置整体链接的打开状态</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">base</span> <span class="attr">href</span>=<span class="string">"http://www.baidu.com"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">base</span> <span class="attr">target</span>=<span class="string">"_self"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">a</span>&gt;</span> 跳转到 百度</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
<hr>
<h2 id="HTML常用标签"><a href="#HTML常用标签" class="headerlink" title="HTML常用标签"></a>HTML常用标签</h2><h3 id="常用标签"><a href="#常用标签" class="headerlink" title="常用标签"></a>常用标签</h3><p><strong>「1. 排版标签」</strong>主要和css搭配使用，显示网页结构的标签，是网页布局最常用的标签。</p>
<ul>
<li>标题标签h(h1~h6)</li>
<li>段落标签p,可以把 HTML 文档分割为若干段落</li>
<li>水平线标签hr</li>
<li>换行标签br</li>
<li>div和span标签:是没有语义的,是我们网页布局最主要的2个盒子。</li>
</ul>
<p><strong>「2. 排版标签」</strong></p>
<ul>
<li>b和strong 文字以粗体显示</li>
<li>i和em 文字以斜体显示</li>
<li>s和del 文字以加删除线显示</li>
<li>u和ins 文字以加下划线显示</li>
</ul>
<p><strong>「3. 标签属性(行内式)」</strong></p>
<p>使用HTML制作网页时，如果想让HTML标签提供更多的信息，可以使用HTML标签的属性加以设置。</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">标签名</span> 属性<span class="attr">1</span>=<span class="string">"属性值1"</span> 属性<span class="attr">2</span>=<span class="string">"属性值2"</span> …&gt;</span> 内容 <span class="tag">&lt;/<span class="name">标签名</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">手机</span> 颜色=<span class="string">"红色"</span> 大小=<span class="string">"5寸"</span>&gt;</span>  <span class="tag">&lt;/<span class="name">手机</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
<p><strong>「4. 图像标签img」</strong><br><strong>必需的属性：</strong></p>
<table>
<thead>
<tr>
<th style="text-align:left">属性</th>
<th style="text-align:left">值</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><a href="https://www.w3school.com.cn/tags/att_img_alt.asp" target="_blank" rel="noopener">alt</a></td>
<td style="text-align:left"><em>text</em></td>
<td style="text-align:left">规定图像的替代文本。</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.w3school.com.cn/tags/att_img_src.asp" target="_blank" rel="noopener">src</a></td>
<td style="text-align:left"><em>URL</em></td>
<td style="text-align:left">规定显示图像的 URL。</td>
</tr>
</tbody>
</table>
<p><strong>可选的属性：</strong></p>
<table>
<thead>
<tr>
<th style="text-align:left">属性</th>
<th style="text-align:left">值</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><a href="https://www.w3school.com.cn/tags/att_img_align.asp" target="_blank" rel="noopener">align</a></td>
<td style="text-align:left">top bottom middle left right</td>
<td style="text-align:left">不推荐使用。规定如何根据周围的文本来排列图像。</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.w3school.com.cn/tags/att_img_border.asp" target="_blank" rel="noopener">border</a></td>
<td style="text-align:left"><em>pixels</em></td>
<td style="text-align:left">不推荐使用。定义图像周围的边框。</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.w3school.com.cn/tags/att_img_height-width.asp" target="_blank" rel="noopener">height</a></td>
<td style="text-align:left"><em>pixels</em> <em>%</em></td>
<td style="text-align:left">定义图像的高度。</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.w3school.com.cn/tags/att_img_hspace_vspace.asp" target="_blank" rel="noopener">hspace</a></td>
<td style="text-align:left"><em>pixels</em></td>
<td style="text-align:left">不推荐使用。定义图像左侧和右侧的空白。</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.w3school.com.cn/tags/att_img_ismap.asp" target="_blank" rel="noopener">ismap</a></td>
<td style="text-align:left"><em>URL</em></td>
<td style="text-align:left">将图像定义为服务器端图像映射。</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.w3school.com.cn/tags/att_img_longdesc.asp" target="_blank" rel="noopener">longdesc</a></td>
<td style="text-align:left"><em>URL</em></td>
<td style="text-align:left">指向包含长的图像描述文档的 URL。</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.w3school.com.cn/tags/att_img_usemap.asp" target="_blank" rel="noopener">usemap</a></td>
<td style="text-align:left"><em>URL</em></td>
<td style="text-align:left">将图像定义为客户器端图像映射。</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.w3school.com.cn/tags/att_img_hspace_vspace.asp" target="_blank" rel="noopener">vspace</a></td>
<td style="text-align:left"><em>pixels</em></td>
<td style="text-align:left">不推荐使用。定义图像顶部和底部的空白。</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.w3school.com.cn/tags/att_img_height-width.asp" target="_blank" rel="noopener">width</a></td>
<td style="text-align:left"><em>pixels</em> <em>%</em></td>
<td style="text-align:left">设置图像的宽度。</td>
</tr>
</tbody>
</table>
<p><strong>注意：</strong></p>
<ul>
<li>标签可以拥有多个属性，必须写在开始标签中，位于标签名后面。</li>
<li>属性之间不分先后顺序，标签名与属性、属性与属性之间均以空格分开。</li>
<li>采取  键值对 的格式  key=”value”  的格式</li>
</ul>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"cz.jpg"</span> <span class="attr">width</span>=<span class="string">"300"</span> <span class="attr">height</span>=<span class="string">"300"</span> <span class="attr">border</span>=<span class="string">"3"</span> <span class="attr">title</span>=<span class="string">"这是个小蒲公英"</span> /&gt;</span></span><br></pre></td></tr></table></figure></div>
<p><strong>「5. 链接标签(重点)」</strong></p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"跳转目标"</span> <span class="attr">target</span>=<span class="string">"目标窗口的弹出方式"</span>&gt;</span>文本或图像<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">target="_self"  默认窗口弹出方式</span><br><span class="line">target="_blank" 新窗口弹出</span><br></pre></td></tr></table></figure></div>
<table>
<thead>
<tr>
<th style="text-align:left">属性</th>
<th style="text-align:left">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">href</td>
<td style="text-align:left">用于指定链接目标的url地址，（必须属性）当为标签应用href属性时，它就具有了超链接的功能</td>
</tr>
<tr>
<td style="text-align:left">target</td>
<td style="text-align:left">用于指定链接页面的打开方式，其取值有_self和_blank两种，其中_self为默认值，_blank为在新窗口中打开方式。</td>
</tr>
</tbody>
</table>
<p><strong>src 和 href 的区别</strong></p>
<p>一句话概括:<strong>src 是引入资源的 href 是跳转url的</strong></p>
<ol>
<li>src用于替换当前元素，href用于在当前文档和引用资源之间确立联系。</li>
<li>src是source的缩写，指向外部资源的位置，指向的内容将会嵌入到文档中当前标签所在位置；在请求src资源时会将其指向的资源下载并应用到文档内，例如js脚本，img图片和frame等元素。当浏览器解析到该元素时，会暂停其他资源的下载和处理，直到将该资源加载、编译、执行完毕，图片和框架等元素也如此，类似于将所指向资源嵌入当前标签内。这也是为什么将js脚本放在底部而不是头部。</li>
<li>href是Hypertext Reference的缩写，指向网络资源所在位置，建立和当前元素（锚点）或当前文档（链接）之间的链接。如果我们在文档中添加那么浏览器会识别该文档为css文件，就会并行下载资源并且不会停止对当前文档的处理。这也是为什么建议使用link方式来加载css，而不是使用@import方式。</li>
</ol>
<p><strong>注意：</strong></p>
<ol>
<li>外部链接 需要添加 <a href="http://www.baidu.com" target="_blank" rel="noopener">http://www.baidu.com</a></li>
<li>内部链接 直接链接内部页面名称即可 比如 &lt; a href=”index.html”&gt; 首页</li>
<li>如果当时没有确定链接目标时，通常将链接标签的href属性值定义为“#”(即href=”#”)，表示该链接暂时为一个空链接。</li>
<li>不仅可以创建文本超链接，在网页中各种网页元素，如图像、表格、音频、视频等都可以添加超链接。</li>
</ol>
<p><strong>锚点定位：通过创建锚点链接，用户能够快速定位到目标内容。</strong></p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="code"><pre><span class="line">1. 使用相应的id名标注跳转目标的位置。 (找目标)</span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span> <span class="attr">id</span>=<span class="string">"two"</span>&gt;</span>第2集<span class="tag">&lt;/<span class="name">h3</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">2. 使用<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#id名"</span>&gt;</span>链接文本<span class="tag">&lt;/<span class="name">a</span>&gt;</span>创建链接文本（被点击的） </span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#two"</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
<p><strong>「6. 注释标签」</strong></p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注释语句 --&gt;</span>     </span><br><span class="line"> 快捷键是：    ctrl + /       </span><br><span class="line"> 或者 ctrl +shift + /</span><br></pre></td></tr></table></figure></div>
<p><strong>团队约定：</strong>注释内容前后各一个空格字符，注释位于要注释代码的上面，单独占一行</p>
<p><strong>「7. 路径」</strong></p>
<table>
<thead>
<tr>
<th>路径分类</th>
<th>符号</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>上一级路径</td>
<td>../</td>
<td>文件在HTML文件的上级目录</td>
</tr>
<tr>
<td>同一级路径</td>
<td></td>
<td>文件和HTML在同一级目录</td>
</tr>
<tr>
<td>下一级路径</td>
<td>./</td>
<td>文件在HTML的子目录中</td>
</tr>
<tr>
<td>项目根路径</td>
<td>/</td>
<td>文件在整个项目的根目录中</td>
</tr>
</tbody>
</table>
<p><strong>「8. 其他知识」</strong></p>
<p>预格式化文本pre标签元素中的文本通常会保留空格和换行符。而文本也会呈现为等宽字体。格式化文本就是 ，按照我们预先写好的文字格式来显示页面， 保留空格和换行等。</p>
<p>特殊字符<br><img src="/image/HTML/HTML常用字符.png"></p>
<p>什么是XHTML</p>
<ul>
<li>XHTML 指<strong>「可扩展超文本标签语言」</strong>（EXtensible HyperText Markup Language）。</li>
<li>XHTML 的目标是取代 HTML。</li>
<li>XHTML 与 HTML 4.01 几乎是相同的。</li>
<li>XHTML 是更严格更纯净的 HTML 版本。</li>
<li>XHTML 是作为一种 XML 应用被重新定义的 HTML,是严格版本的HTML。例如它要求标签必须小写，标签必须被正确关闭，标签顺序必须正确排列，对于属性都必须使用双引号等。</li>
<li>XHTML 是一个 W3C 标准。</li>
</ul>
<p><strong>写HTML代码时应注意什么？</strong></p>
<ul>
<li>尽可能少的使用无语义的标签div和span；</li>
<li>在语义不明显时，既可以使用div或者p时，尽量用p, 因为p在默认情况下有上下间距，对兼容特殊终端有利；</li>
<li>不要使用纯样式标签，如：b、font、u等，改用css设置。</li>
<li>需要强调的文本，可以包含在strong或者em标签中（浏览器预设样式，能用CSS指定就不用他们），strong默认样式是加粗（不要用b），em是斜体（不用i）；</li>
<li>使用表格时，标题要用caption，表头用thead，主体部分用tbody包围，尾部用tfoot包围。表头和一般单元格要区分开，表头用th，单元格用td；</li>
<li>表单域要用fieldset标签包起来，并用legend标签说明表单的用途；</li>
<li>每个input标签对应的说明文本都需要使用label标签，并且通过为input设置id属性，在lable标签中设置for来让说明文本和相对应的input关联起来。</li>
</ul>
<hr>
<h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p><strong>「1. 表格」</strong></p>
<p>现在还是较为常用的一种标签，但不是用来布局，常见显示、展示表格式数据。因为它可以让数据显示的非常的规整，可读性非常好。特别是后台展示数据的时候表格运用是否熟练就显得很重要，一个清爽简约的表格能够把繁杂的数据表现得很有条理。</p>
<p><strong>「2. 创建表格」</strong></p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&lt;table&gt;</span><br><span class="line">  &lt;tr&gt;</span><br><span class="line">    &lt;td&gt;单元格内的文字&lt;/td&gt;</span><br><span class="line">    ...</span><br><span class="line">  &lt;/tr&gt;</span><br><span class="line">  ...</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure></div>
<p>table、tr、td，他们是创建表格的基本标签，缺一不可</p>
<ul>
<li>table用于定义一个表格标签。</li>
<li>tr标签 用于定义表格中的行，必须嵌套在 table标签中。</li>
<li>td 用于定义表格中的单元格，必须嵌套在<tr></tr>标签中。</li>
<li>字母 td 指表格数据（table data），即数据单元格的内容，现在我们明白，表格最合适的地方就是用来存储数据的。td像一个容器，可以容纳所有的元素。</li>
</ul>
<p><strong>表头单元格标签th</strong>:一般表头单元格位于表格的第一行或第一列，并且文本加粗居中,只需用表头标签<th></th>替代相应的单元格标签<td></td>即可。</p>
<p><strong>表格标题caption</strong>通常这个标题会被居中且显示于表格之上。caption 标签必须紧随 table 标签之后。这个标签只存在 表格里面才有意义。</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&lt;table&gt;</span><br><span class="line">   &lt;caption&gt;我是表格标题&lt;/caption&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure></div>
<p><strong>「3. 表格属性」</strong></p>
<table>
<thead>
<tr>
<th style="text-align:left">属性</th>
<th style="text-align:left">值</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><a href="https://www.w3school.com.cn/tags/att_table_align.asp" target="_blank" rel="noopener">align</a></td>
<td style="text-align:left">leftcenterright</td>
<td style="text-align:left">不赞成使用。请使用样式代替。规定表格相对周围元素的对齐方式。</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.w3school.com.cn/tags/att_table_bgcolor.asp" target="_blank" rel="noopener">bgcolor</a></td>
<td style="text-align:left"><em>rgb(x,x,x)</em> <em>#xxxxxx</em> <em>colorname</em></td>
<td style="text-align:left">不赞成使用。请使用样式代替。规定表格的背景颜色。</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.w3school.com.cn/tags/att_table_border.asp" target="_blank" rel="noopener">border</a></td>
<td style="text-align:left"><em>pixels</em></td>
<td style="text-align:left">规定表格边框的宽度。</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.w3school.com.cn/tags/att_table_cellpadding.asp" target="_blank" rel="noopener">cellpadding</a></td>
<td style="text-align:left"><em>pixels</em> <em>%</em></td>
<td style="text-align:left">规定单元边沿与其内容之间的空白。</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.w3school.com.cn/tags/att_table_cellspacing.asp" target="_blank" rel="noopener">cellspacing</a></td>
<td style="text-align:left"><em>pixels</em> <em>%</em></td>
<td style="text-align:left">规定单元格之间的空白。</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.w3school.com.cn/tags/att_table_frame.asp" target="_blank" rel="noopener">frame</a></td>
<td style="text-align:left">voidabovebelowhsideslhsrhsvsidesboxborder</td>
<td style="text-align:left">规定外侧边框的哪个部分是可见的。</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.w3school.com.cn/tags/att_table_rules.asp" target="_blank" rel="noopener">rules</a></td>
<td style="text-align:left">nonegroupsrowscolsall</td>
<td style="text-align:left">规定内侧边框的哪个部分是可见的。</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.w3school.com.cn/tags/att_table_summary.asp" target="_blank" rel="noopener">summary</a></td>
<td style="text-align:left"><em>text</em></td>
<td style="text-align:left">规定表格的摘要。</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.w3school.com.cn/tags/att_table_width.asp" target="_blank" rel="noopener">width</a></td>
<td style="text-align:left"><em>%</em> <em>pixels</em></td>
<td style="text-align:left">规定表格的宽度。</td>
</tr>
</tbody>
</table>
<p>三参为0，平时开发的我们这三个参数   border  cellpadding  cellspacing 为  0</p>
<p><strong>「4. 合并单元格」</strong>,合并的顺序我们按照  先上 后下   先左  后右 的顺序 ,合并完之后需要删除多余的单元格。</p>
<ul>
<li>跨行合并：rowspan=”合并单元格的个数”</li>
<li>跨列合并：colspan=”合并单元格的个数”</li>
</ul>
<p><strong>「5. 总结表格」</strong></p>
<table>
<thead>
<tr>
<th style="text-align:left">标签名</th>
<th style="text-align:left">定义</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><table></table></td>
<td style="text-align:left">表格标签</td>
<td style="text-align:left">就是一个四方的盒子</td>
</tr>
<tr>
<td style="text-align:left"></td></tr><tr></tr>
<td style="text-align:left">表格行标签</td>
<td style="text-align:left">行标签要再table标签内部才有意义</td>

<tr>
<td style="text-align:left"></td><td></td>
<td style="text-align:left">单元格标签</td>
<td style="text-align:left">单元格标签是个容器级元素，可以放任何东西</td>
</tr>
<tr>
<td style="text-align:left"><th></th></td>
<td style="text-align:left">表头单元格标签</td>
<td style="text-align:left">它还是一个单元格，但是里面的文字会居中且加粗</td>
</tr>
<tr>
<td style="text-align:left"><caption></caption></td>
<td style="text-align:left">表格标题标签</td>
<td style="text-align:left">表格的标题，跟着表格一起走，和表格居中对齐</td>
</tr>
<tr>
<td style="text-align:left">clospan 和 rowspan</td>
<td style="text-align:left">合并属性</td>
<td style="text-align:left">用来合并单元格的</td>
</tr>
</tbody>
</table>
<p><strong>「6. 表格划分结构」</strong></p>
<p>  对于比较复杂的表格，表格的结构也就相对的复杂了，所以又将表格分割成三个部分：题头、正文和脚注。而这三部分分别用:thead,tbody,tfoot来标注， 这样更好的分清表格结构。</p>
<p><strong>注意：</strong><br>1.<thead></thead>：用于定义表格的头部。用来放标题之类的东西。<thead> 内部必须拥有<tr> 标签！<br>\2. <tbody></tbody>：用于定义表格的主体。放数据本体 。<br>\3. <tfoot></tfoot>放表格的脚注之类。<br>\4. 以上标签都是放到table标签中。</tr></thead></p>
<hr>
<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p><strong>「列表ul」</strong>容器里面装载着结构，样式一致的文字或图表的一种形式，叫列表。</p>
<p>列表最大的特点就是整齐 、整洁、 有序，跟表格类似，但是它可组合自由度会更高。</p>
<p><strong>「1. 无序列表 ul」</strong></p>
<ul>
<li><ul></ul>中只能嵌套</li><li></li>，直接在<ul></ul>标签中输入其他标签或者文字的做法是不被允许的。
<li></li><li>与</li>之间相当于一个容器，可以容纳所有元素。
</ul>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">  &lt;li&gt;列表项1&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;列表项2&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;列表项3&lt;/li&gt;</span><br><span class="line">  ......</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure></div>
<p><strong>「2. 有序列表 ol」</strong></p>
<ul>
<li><ol>标签中的type属性值为排序的序列号，不添加type属性时，有序列表默认从数字1开始排序。</ol></li>
<li>常用的type属性值分别为是1，a，A，i，I</li>
<li><ol reversed="reversed">中的reversed属性能够让有序列表中的序列倒序排列。</ol></li>
<li><ol start="3">中的start属性值为3，有序列表中的第一个序列号将从3开始排列。</ol></li>
</ul>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&lt;ol type=&quot;A&quot;&gt; </span><br><span class="line">  &lt;li&gt;列表项1&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;列表二&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;列表三&lt;/li&gt;</span><br><span class="line">&lt;/ol&gt;</span><br></pre></td></tr></table></figure></div>
<p><strong>「2. 自定义列表 dl」</strong></p>
<ul>
<li>定义列表常用于对术语或名词进行解释和描述，定义列表的列表项前没有任何项目符号。</li>
</ul>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&lt;dl&gt;</span><br><span class="line">  &lt;dt&gt;名词1&lt;/dt&gt;</span><br><span class="line">  &lt;dd&gt;名词1解释1&lt;/dd&gt;</span><br><span class="line">  &lt;dd&gt;名词1解释2&lt;/dd&gt;</span><br><span class="line">  ...</span><br><span class="line">  &lt;dt&gt;名词2&lt;/dt&gt;</span><br><span class="line">  &lt;dd&gt;名词2解释1&lt;/dd&gt;</span><br><span class="line">  &lt;dd&gt;名词2解释2&lt;/dd&gt;</span><br><span class="line">  ...</span><br><span class="line">&lt;/dl&gt;</span><br></pre></td></tr></table></figure></div>
<p><img src="/image/HTML/dl案例.png"></p>
<hr>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac上Golang的环境配置</title>
    <url>/2021/01/04/Mac%E4%B8%8AGolang%E7%9A%84%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>记录一下Mac中配置Golang开发环境！<br><a id="more"></a><br>1.初始环境<br>Homerbrew 安装参考:<a href="http://brew.sh/" target="_blank" rel="noopener">http://brew.sh/</a></p>
<ol start="2">
<li><p>安装Golang</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">brew install go</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>查看是否安装成功</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">go version</span><br></pre></td></tr></table></figure></div>
</li>
</ol>
<p>出现如下证明安装成功：<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">go version go1.15 darwin/amd64</span><br></pre></td></tr></table></figure></div></p>
<ol start="4">
<li>配置GOPATH<br>查看go 的环境变量设置的命令<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">go env</span><br></pre></td></tr></table></figure></div>
</li>
</ol>
<p>需要设置的环境变量包括:GOPATH ,GOBIN 以及把GOBIN加入到PATH中,GOROOT变量默认已经设置好。</p>
<p>在fishshell设置GOPATH：<br>最后的路径按照上面的版本号进行对应<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> -gx GOPATH /usr/<span class="built_in">local</span>/Cellar/go/X.X.X</span><br></pre></td></tr></table></figure></div></p>
<p>在bash中设置：<br>vim ~/.bash_profile</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> GOPATH=/usr/<span class="built_in">local</span>/Cellar/go/1.7.6</span><br><span class="line"><span class="built_in">export</span> GOBIN=<span class="variable">$GOPATH</span>/bin</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$GOBIN</span></span><br></pre></td></tr></table></figure></div>
<p>使修改立刻生效:<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bash_profile</span><br></pre></td></tr></table></figure></div></p>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS3基础</title>
    <url>/2021/01/27/CSS3%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<p>css基础巩固！<br><a id="more"></a></p>
<h3 id="CSS-简介"><a href="#CSS-简介" class="headerlink" title="CSS 简介"></a>CSS 简介</h3><h5 id="1-HTML-的局限性"><a href="#1-HTML-的局限性" class="headerlink" title="1. HTML 的局限性"></a>1. HTML 的局限性</h5><p>  HTML只<strong>关注内容</strong>的语义。比如 </p><h1> 表明这是一个大标题，<p> 表 明这是一个段落，<img> 表明这儿有一个图片，<a> 表示此处有链接。<br>  早期HTML的共同特点为：丑。<br>  HTML可以做简单的样式，但是会使整个HTML非常臃肿，不利于后期维护！</a></p>
<h5 id="2-CSS"><a href="#2-CSS" class="headerlink" title="2. CSS"></a>2. CSS</h5><p>  CSS 是<strong>层叠样式表 ( Cascading Style Sheets )</strong> 的简称。也会称之为 CSS <strong>样式表</strong>或<strong>级联样式表</strong>。<br>  CSS 是也是一种标记语言。<br>  CSS 主要用于设置HTML页面中的文本内容(字体、大小、对齐方式等)、图片的外形(宽高、边框样式、 边距等)、版面的布局和外观显示样式。<br>  CSS让HTML更漂亮，页面布局更简单。<br>  CSS 最大价值: 由 HTML 专注去做结构呈现，样式交给 CSS，即结构(HTML)与样式(CSS)相分离。</p>
<h5 id="3-CSS-语法规范"><a href="#3-CSS-语法规范" class="headerlink" title="3. CSS 语法规范"></a>3. CSS 语法规范</h5><p>  CSS 规则由两个主要的部分构成:选择器以及一条或多条声明。<br>  选择器是用于指定CSS样式的HTML标签，花括号内是对该对象设置的具体样式   属性和属性值以“键值对”的形式出现。<br>  属性是对指定的对象设置的样式属性，例如字体大小、文本颜色等。<br>  属性和属性值之间用英文冒号“:”分隔。<br>  多个“键值对”之间用英文分号“;”进行区分。</p>
</h1>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>JMeter聚合报告中90%响应时间解读</title>
    <url>/2021/01/22/JMeter%E8%81%9A%E5%90%88%E6%8A%A5%E5%91%8A%E4%B8%AD90-%E5%93%8D%E5%BA%94%E6%97%B6%E9%97%B4%E8%A7%A3%E8%AF%BB/</url>
    <content><![CDATA[<p>Jmeter报告中90%的响应时间理解<br><a id="more"></a></p>
<h2 id="官方解释："><a href="#官方解释：" class="headerlink" title="官方解释："></a>官方解释：</h2><pre><code>90% Line - 90% of the samples took no more than this time. The remaining samples at least as long as this.
</code></pre><h2 id="通俗解释："><a href="#通俗解释：" class="headerlink" title="通俗解释："></a>通俗解释：</h2><p>有10个请求，将响应时间由小到大排列，求它的第90%百分位，排在第九位的响应时间，那么他的90%Line 就是第九位的响应时间。</p>
<p>一组数由小到大进行排列，找到他的第90%个数（假如是12），那么这个数组中有90%的数将小于等于12 ，也就是90%请求响应时间不会超过12 秒。</p>
]]></content>
      <categories>
        <category>测试</category>
      </categories>
      <tags>
        <tag>测试</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript基础</title>
    <url>/2021/02/27/JavaScript%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<p>JavaScript基础巩固<br><a id="more"></a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>rsync用法教程</title>
    <url>/2021/01/29/rsync%E7%94%A8%E6%B3%95%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<p>记录下sync的常见用法<br><a id="more"></a></p>
<h3 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h3><p>rsync 是 Linux常用的 应用程序，用于文件同步。<br>名称里面的r指的是 remote，rsync 其实就是”远程同步”（remote sync）的意思。<br>与FTP 或 scp等文件传输工具不同，rsync 的最大特点是会检查发送方和接收方已有的文件，仅传输有变动的部分。<br>默认规则是文件大小或修改时间有变动</p>
<p>可以在本地计算机与远程计算机之间，或两个本地目录之间同步文件（但不支持两台远程计算机之间的同步）。<br>可以当作文件复制工具，替代cp和mv命令。</p>
<h3 id="二、安装"><a href="#二、安装" class="headerlink" title="二、安装"></a>二、安装</h3><p>安装命令<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Debian</span></span><br><span class="line">$ sudo apt-get install rsync</span><br><span class="line"><span class="comment"># Red Hat</span></span><br><span class="line">$ sudo yum install rsync</span><br><span class="line"><span class="comment"># Arch Linux</span></span><br><span class="line">$ sudo pacman -S rsync</span><br></pre></td></tr></table></figure></div></p>
<p>注：<br>    传输的双方都必须安装 rsync。</p>
<h3 id="三、参数详解"><a href="#三、参数详解" class="headerlink" title="三、参数详解"></a>三、参数详解</h3><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">-a、--archive参数表示存档模式，保存所有的元数据，比如修改时间（modification time）、权限、所有者等，并且软链接也会同步过去。</span><br><span class="line"></span><br><span class="line">--append参数指定文件接着上次中断的地方，继续传输。</span><br><span class="line"></span><br><span class="line">--append-verify参数跟--append参数类似，但会对传输完成后的文件进行一次校验。如果校验失败，将重新发送整个文件。</span><br><span class="line"></span><br><span class="line">-b、--backup参数指定在删除或更新目标目录已经存在的文件时，将该文件更名后进行备份，默认行为是删除。更名规则是添加由--suffix参数指定的文件后缀名，默认是~。</span><br><span class="line"></span><br><span class="line">--backup-dir参数指定文件备份时存放的目录，比如--backup-dir=/path/to/backups。</span><br><span class="line"></span><br><span class="line">--bwlimit参数指定带宽限制，默认单位是 KB/s，比如--bwlimit=100。</span><br><span class="line"></span><br><span class="line">-c、--checksum参数改变rsync的校验方式。默认情况下，rsync 只检查文件的大小和最后修改日期是否发生变化，如果发生变化，就重新传输；使用这个参数以后，则通过判断文件内容的校验和，决定是否重新传输。</span><br><span class="line"></span><br><span class="line">--delete参数删除只存在于目标目录、不存在于源目标的文件，即保证目标目录是源目标的镜像。</span><br><span class="line"></span><br><span class="line">-e参数指定使用 SSH 协议传输数据。</span><br><span class="line"></span><br><span class="line">--exclude参数指定排除不进行同步的文件，比如--exclude=&quot;*.iso&quot;。</span><br><span class="line"></span><br><span class="line">--exclude-from参数指定一个本地文件，里面是需要排除的文件模式，每个模式一行。</span><br><span class="line"></span><br><span class="line">--existing、--ignore-non-existing参数表示不同步目标目录中不存在的文件和目录。</span><br><span class="line"></span><br><span class="line">-h参数表示以人类可读的格式输出。</span><br><span class="line"></span><br><span class="line">-h、--help参数返回帮助信息。</span><br><span class="line"></span><br><span class="line">-i参数表示输出源目录与目标目录之间文件差异的详细情况。</span><br><span class="line"></span><br><span class="line">--ignore-existing参数表示只要该文件在目标目录中已经存在，就跳过去，不再同步这些文件。</span><br><span class="line"></span><br><span class="line">--include参数指定同步时要包括的文件，一般与--exclude结合使用。</span><br><span class="line"></span><br><span class="line">--link-dest参数指定增量备份的基准目录。</span><br><span class="line"></span><br><span class="line">-m参数指定不同步空目录。</span><br><span class="line"></span><br><span class="line">--max-size参数设置传输的最大文件的大小限制，比如不超过200KB（--max-size=&apos;200k&apos;）。</span><br><span class="line"></span><br><span class="line">--min-size参数设置传输的最小文件的大小限制，比如不小于10KB（--min-size=10k）。</span><br><span class="line"></span><br><span class="line">-n参数或--dry-run参数模拟将要执行的操作，而并不真的执行。配合-v参数使用，可以看到哪些内容会被同步过去。</span><br><span class="line"></span><br><span class="line">-P参数是--progress和--partial这两个参数的结合。</span><br><span class="line"></span><br><span class="line">--partial参数允许恢复中断的传输。不使用该参数时，rsync会删除传输到一半被打断的文件；使用该参数后，传输到一半的文件也会同步到目标目录，下次同步时再恢复中断的传输。一般需要与--append或--append-verify配合使用。</span><br><span class="line"></span><br><span class="line">--partial-dir参数指定将传输到一半的文件保存到一个临时目录，比如--partial-dir=.rsync-partial。一般需要与--append或--append-verify配合使用。</span><br><span class="line"></span><br><span class="line">--progress参数表示显示进展。</span><br><span class="line"></span><br><span class="line">-r参数表示递归，即包含子目录。</span><br><span class="line"></span><br><span class="line">--remove-source-files参数表示传输成功后，删除发送方的文件。</span><br><span class="line"></span><br><span class="line">--size-only参数表示只同步大小有变化的文件，不考虑文件修改时间的差异。</span><br><span class="line"></span><br><span class="line">--suffix参数指定文件名备份时，对文件名添加的后缀，默认是~。</span><br><span class="line"></span><br><span class="line">-u、--update参数表示同步时跳过目标目录中修改时间更新的文件，即不同步这些有更新的时间戳的文件。</span><br><span class="line"></span><br><span class="line">-v参数表示输出细节。-vv表示输出更详细的信息，-vvv表示输出最详细的信息。</span><br><span class="line"></span><br><span class="line">--version参数返回 rsync 的版本。</span><br><span class="line"></span><br><span class="line">-z参数指定同步时压缩数据。</span><br></pre></td></tr></table></figure></div>
<h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><h6 id="1-r-参数"><a href="#1-r-参数" class="headerlink" title="1. -r 参数"></a>1. -r 参数</h6><p>1.1 将源目录同步到目标目录<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#本机使用rsync命令时，可以作为cp和mv命令的替代方法</span></span><br><span class="line">rsync -r <span class="built_in">source</span> destination</span><br></pre></td></tr></table></figure></div></p>
<p>-r表示递归，即包含子目录。<br>-r是必须的，否则 rsync 运行不会成功。</p>
<p>1.2 多个文件或目录同步<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">rsync -r source1 source2 destination</span><br></pre></td></tr></table></figure></div></p>
<p>source1、source2都会被同步到destination目录。</p>
<h6 id="2-a-参数"><a href="#2-a-参数" class="headerlink" title="2. -a 参数"></a>2. -a 参数</h6><p>-a参数可以替代-r，除了可以递归同步以外，还可以同步元信息（比如修改时间、权限等）。<br>由于 rsync 默认使用文件大小和修改时间决定文件是否需要更新，所以-a比-r更有用。<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">rsync -a source destination</span><br></pre></td></tr></table></figure></div></p>
<p>目标目录destination如果不存在，rsync 会自动创建。<br>执行上面的命令后，源目录source被完整地复制到了目标目录destination下面，即形成了destination/source的目录结构。</p>
<p>只想同步源目录source里面的内容到目标目录destination，则需要在源目录后面加上斜杠。<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">rsync -a source/ destination</span><br></pre></td></tr></table></figure></div></p>
<p>source目录里面的内容，就都被复制到了destination目录里面，并不会在destination下面创建一个source子目录。</p>
<h6 id="3-n-参数"><a href="#3-n-参数" class="headerlink" title="3. -n 参数"></a>3. -n 参数</h6><p>不确定 rsync 执行后会产生什么结果，可以先用-n或–dry-run参数模拟执行的结果。<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">rsync -anv source/ destination</span><br></pre></td></tr></table></figure></div></p>
<p>-n参数模拟命令执行的结果，并不真的执行命令。<br>-v参数则是将结果输出到终端，这样就可以看到哪些内容会被同步。</p>
<h6 id="4-–delete-参数"><a href="#4-–delete-参数" class="headerlink" title="4. –delete 参数"></a>4. –delete 参数</h6><p>默认情况下，rsync 只确保源目录的所有内容（明确排除的文件除外）都复制到目标目录。<br>它不会使两个目录保持相同，并且不会删除文件。<br>如果要使得目标目录成为源目录的镜像副本，则必须使用–delete参数，这将删除只存在于目标目录、不存在于源目录的文件。<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">rsync -av --delete source/ destination</span><br></pre></td></tr></table></figure></div></p>
<p>–delete参数会使得destination成为source的一个镜像。</p>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="http://www.ruanyifeng.com/blog/2020/08/rsync.html" target="_blank" rel="noopener">阮一峰-rsync 用法教程</a></p>
]]></content>
      <categories>
        <category>Tool</category>
      </categories>
      <tags>
        <tag>Tool</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS中redis相关操作</title>
    <url>/2021/01/29/CentOS%E4%B8%ADredis%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<p>CentOS中redis的使用<br><a id="more"></a></p>
<h2 id="安装redis"><a href="#安装redis" class="headerlink" title="安装redis"></a>安装redis</h2><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">yum install redis</span><br></pre></td></tr></table></figure></div>
<h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><p>为了能让redis在后台启动，需要修改配置文件中一个参数<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">vim /etc/redis.conf</span><br><span class="line"><span class="comment"># 找到 daemonize 属性</span></span><br><span class="line">daemonize no</span><br><span class="line"><span class="comment"># 将no改为yes</span></span><br><span class="line">daemonize yes</span><br></pre></td></tr></table></figure></div></p>
<h2 id="后台启动"><a href="#后台启动" class="headerlink" title="后台启动"></a>后台启动</h2><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">redis-server /etc/redis.conf &amp;</span><br></pre></td></tr></table></figure></div>
<h2 id="停止redis"><a href="#停止redis" class="headerlink" title="停止redis"></a>停止redis</h2><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">redis-cli shutdown</span><br></pre></td></tr></table></figure></div>
<h2 id="redis命令合集"><a href="#redis命令合集" class="headerlink" title="redis命令合集"></a>redis命令合集</h2><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">redis执行了make install后，redis的课执行文件都会自动复制到 /usr/<span class="built_in">local</span>/bin 目录</span><br><span class="line">redis-server        redis服务器</span><br><span class="line">redis-cli            redis命令行客户端</span><br><span class="line">redis-benchmark        redis性能测试工具</span><br><span class="line">redis-check-aof        aof文件修复工具</span><br><span class="line">redis-check-dump    rdb文件检查工具</span><br></pre></td></tr></table></figure></div>
<h2 id="redis命令行客户端"><a href="#redis命令行客户端" class="headerlink" title="redis命令行客户端"></a>redis命令行客户端</h2><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 发送命令</span></span><br><span class="line">redis-cli shutdown</span><br><span class="line"><span class="comment"># 2. 交互模式，默认是127.0.0.1和6379端口,只要使用这种模式！</span></span><br><span class="line">redis-cli -h 127.0.0.1 -p 6379</span><br><span class="line"><span class="comment"># 命令返回值</span></span><br><span class="line">127.0.0.1:6379&gt; ping</span><br><span class="line">PONG <span class="comment">#表示可用</span></span><br></pre></td></tr></table></figure></div>
<h2 id="错误解决"><a href="#错误解决" class="headerlink" title="错误解决"></a>错误解决</h2><ol>
<li>错误信息：<br>MISCONF Redis is configured to save RDB snapshots, but is currently not able to persist on disk. Commands that may modify the data set are disabled. Please check Redis logs for details about the error.<br>Redis被配置为保存数据库快照，但它目前不能持久化到硬盘。用来修改集合数据的命令不能用。请查看Redis日志的详细错误信息。</li>
<li>原因<br>强制关闭Redis快照导致不能持久化。</li>
<li>解决方案<br>在服务器将stop-writes-on-bgsave-error设置为no<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; config <span class="built_in">set</span> stop-writes-on-bgsave-error no</span><br></pre></td></tr></table></figure></div>
</li>
</ol>
<p><a href="https://www.jianshu.com/p/3aaf21dd34d6" target="_blank" rel="noopener">参考链接</a></p>
]]></content>
      <categories>
        <category>DB</category>
      </categories>
      <tags>
        <tag>DB</tag>
      </tags>
  </entry>
  <entry>
    <title>Jmeter从CSV文件中随机取数据</title>
    <url>/2021/03/19/Jmeter%E4%BB%8ECSV%E6%96%87%E4%BB%B6%E4%B8%AD%E9%9A%8F%E6%9C%BA%E5%8F%96%E6%95%B0%E6%8D%AE/</url>
    <content><![CDATA[<p>Jmeter中Random CSV Data Set使用教程<br><a id="more"></a></p>
<ol>
<li>下载jmeter-plugins-manager插件，插件保存在Jmeter安装目录的lib/ext下<br><img src="/image/JMeter/JMeter-9.png"></li>
<li>安装Random CSV Data Set<br><img src="/image/JMeter/JMeter-10.png"></li>
<li>Jmeter上编写测试脚本<br>3.1 新建随机数据文件<br><img src="/image/JMeter/JMeter-11.png"><br>3.2 字段详解<br><img src="/image/JMeter/JMeter-12.png"><br>3.3 变量使用<br><img src="/image/JMeter/JMeter-14.png"><br>3.4 查看取值</li>
<li>准备CSV测试文件<br><img src="/image/JMeter/JMeter-13.png"></li>
</ol>
]]></content>
      <categories>
        <category>测试</category>
      </categories>
      <tags>
        <tag>测试</tag>
      </tags>
  </entry>
  <entry>
    <title>Python中subprocess模块</title>
    <url>/2021/03/25/Python%E4%B8%ADsubprocess%E6%A8%A1%E5%9D%97/</url>
    <content><![CDATA[<p>Python中subprocess模块使用教程<br><a id="more"></a><br>subprocess 模块允许你生成新的进程，连接它们的输入、输出、错误管道，并且获取它们的返回码。此模块打算代替一些老旧的模块与功能：<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line">os.system</span><br><span class="line">os.spawn*</span><br></pre></td></tr></table></figure></div></p>
<h2 id="使用-subprocess-模块"><a href="#使用-subprocess-模块" class="headerlink" title="使用 subprocess 模块"></a>使用 <a href="https://docs.python.org/zh-cn/3/library/subprocess.html#module-subprocess" target="_blank" rel="noopener"><code>subprocess</code></a> 模块</h2><p>推荐的调用子进程的方式是在任何它支持的用例中使用 run() 函数。对于更进阶的用例，也可以使用底层的 Popen 接口。</p>
<h3 id="subprocess模块中的常用函数"><a href="#subprocess模块中的常用函数" class="headerlink" title="subprocess模块中的常用函数"></a>subprocess模块中的常用函数</h3><table>
<thead>
<tr>
<th>函数</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>subprocess.run()</td>
<td>Python 3.5中新增的函数。执行指定的命令，等待命令执行完成后返回一个包含执行结果的CompletedProcess类的实例。</td>
</tr>
<tr>
<td>subprocess.call()</td>
<td>执行指定的命令，返回命令执行状态，其功能类似于os.system(cmd)。</td>
</tr>
<tr>
<td>subprocess.check_call()</td>
<td>Python 2.5中新增的函数。 执行指定的命令，如果执行成功则返回状态码，否则抛出异常。其功能等价于subprocess.run(…, check=True)。</td>
</tr>
<tr>
<td>subprocess.check_output()</td>
<td>Python 2.7中新增的的函数。执行指定的命令，如果执行状态码为0则返回命令执行结果，否则抛出异常。</td>
</tr>
<tr>
<td>subprocess.getoutput(cmd)</td>
<td>接收字符串格式的命令，执行命令并返回执行结果，其功能类似于os.popen(cmd).read()和commands.getoutput(cmd)。</td>
</tr>
<tr>
<td>subprocess.getstatusoutput(cmd)</td>
<td>执行cmd命令，返回一个元组(命令执行状态, 命令执行结果输出)，其功能类似于commands.getstatusoutput()。</td>
</tr>
</tbody>
</table>
<p><strong>说明：</strong></p>
<ol>
<li>在Python 3.5之后的版本中，官方文档中提倡通过subprocess.run()函数替代其他函数来使用subproccess模块的功能；</li>
<li>在Python 3.5之前的版本中，我们可以通过subprocess.call()，subprocess.getoutput()等上面列出的其他函数来使用subprocess模块的功能；</li>
<li>subprocess.run()、subprocess.call()、subprocess.check_call()和subprocess.check_output()都是通过对subprocess.Popen的封装来实现的高级函数，因此如果我们需要更复杂功能时，可以通过subprocess.Popen来完成。</li>
<li>subprocess.getoutput()和subprocess.getstatusoutput()函数是来自Python 2.x的commands模块的两个遗留函数。它们隐式的调用系统shell，并且不保证其他函数所具有的安全性和异常处理的一致性。并且，从Python 3.3.4开始才支持Windows平台。</li>
</ol>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line">subprocess.run(args, *, stdin=<span class="literal">None</span>, input=<span class="literal">None</span>, stdout=<span class="literal">None</span>, stderr=<span class="literal">None</span>, capture_output=<span class="literal">False</span>, shell=<span class="literal">False</span>, cwd=<span class="literal">None</span>, timeout=<span class="literal">None</span>, check=<span class="literal">False</span>, encoding=<span class="literal">None</span>, errors=<span class="literal">None</span>, text=<span class="literal">None</span>, env=<span class="literal">None</span>, universal_newlines=<span class="literal">None</span>, **other_popen_kwargs)</span><br></pre></td></tr></table></figure></div>
<p><img src="/image/"></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue中跨域问题</title>
    <url>/2021/04/07/Vue%E4%B8%AD%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>记录一下vue中跨域问题的解决方案！<br><a id="more"></a><br>报错信息:<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line">Access to XMLHttpRequest at <span class="string">'http://localhost:8000/test'</span> <span class="keyword">from</span> origin <span class="string">'http://localhost:8080'</span> has been </span><br><span class="line">blocked by CORS policy: No <span class="string">'Access-Control-Allow-Origin'</span> header is present on the requested resource.</span><br></pre></td></tr></table></figure></div></p>
<p>请求的url：<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTTP"><figure class="iseeu highlight /http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">url</span>: 'http://localhost:8000/test'</span><br></pre></td></tr></table></figure></div></p>
<p>解决方案：<br>修改vue.config.js中参数<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line">devServer: &#123;</span><br><span class="line">	proxy: &#123;</span><br><span class="line">		<span class="string">'/api'</span>: &#123;</span><br><span class="line">			target: <span class="string">'http://ip:port'</span>,</span><br><span class="line">			changeOrigin: <span class="literal">true</span>,</span><br><span class="line">			pathRewrite: &#123;</span><br><span class="line">				<span class="string">'/api'</span>: <span class="string">''</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p>
<p>js中请求的url需修改为：<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line">url: <span class="string">'/api/实际要请求的地址'</span></span><br></pre></td></tr></table></figure></div></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>Jmeter控制压测吞吐量上限</title>
    <url>/2020/11/01/Jmeter%E6%8E%A7%E5%88%B6%E5%8E%8B%E6%B5%8B%E5%90%9E%E5%90%90%E9%87%8F%E4%B8%8A%E9%99%90/</url>
    <content><![CDATA[<p>记录一下Jmeter中控制吞吐量的操作步骤！<br><a id="more"></a></p>
]]></content>
      <categories>
        <category>测试</category>
      </categories>
      <tags>
        <tag>测试</tag>
      </tags>
  </entry>
  <entry>
    <title>iview框架中i-table数据处理</title>
    <url>/2021/04/12/iview%E6%A1%86%E6%9E%B6%E4%B8%ADi-table%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<p>iview 框架中 i-table组件对某个单元格进行单独处理！<br><a id="more"></a></p>
<h2 id="1-需求"><a href="#1-需求" class="headerlink" title="1. 需求"></a>1. 需求</h2><p>后端接口数据为10或20，在前端渲染的时候，对其进行相应处理，显示的是文字状态。</p>
<h2 id="2-问题"><a href="#2-问题" class="headerlink" title="2. 问题"></a>2. 问题</h2><p>项目开发使用了iview 框架的 i-table组件，数据渲染都是组件自动进行的，很难对单个单元格进行处理。</p>
<h2 id="3-解决方案"><a href="#3-解决方案" class="headerlink" title="3. 解决方案"></a>3. 解决方案</h2><p>使用 <code>render</code> 看一下解决方案代码吧<br><code>template</code>部分</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;i-table border :columns=&quot;columns0&quot; :data=&quot;data0&quot;&gt;&lt;/i-table&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></div>
<p><code>data</code>部分</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">        components: &#123;Table, Button&#125;,</span><br><span class="line">        data () &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                columns0: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        title: <span class="string">"id"</span>,</span><br><span class="line">                        key: <span class="string">"id"</span>,</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        title: <span class="string">"所属平台"</span>,</span><br><span class="line">                        key: <span class="string">"module"</span>,</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        title: <span class="string">"运行状态"</span>,</span><br><span class="line">                        key: <span class="string">"is_run"</span>,</span><br><span class="line">                        render: <span class="function">(<span class="params">h, params</span>) =&gt;</span> &#123;</span><br><span class="line">                            <span class="keyword">return</span> h(<span class="string">'div'</span>, [</span><br><span class="line">                            h(<span class="string">'span'</span>, &#123;</span><br><span class="line">                                style: &#123;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;, params.row.is_run == <span class="string">'10'</span>?<span class="string">'运行'</span>:<span class="string">'不运行'</span>),</span><br><span class="line">                            ])</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        title: <span class="string">"请求方式"</span>,</span><br><span class="line">                        key: <span class="string">"method"</span>,</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        title: <span class="string">"接口描述"</span>,</span><br><span class="line">                        key: <span class="string">"remark"</span>,</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        title:<span class="string">"操作"</span>,</span><br><span class="line">                        key:<span class="string">"action"</span>,</span><br><span class="line">                        <span class="comment">// width:200,</span></span><br><span class="line">                        align:<span class="string">"center"</span>,</span><br><span class="line">                        render: <span class="function">(<span class="params">h, params</span>) =&gt;</span> &#123;</span><br><span class="line">                            <span class="keyword">return</span> h(<span class="string">"div"</span>, [</span><br><span class="line">                                h(</span><br><span class="line">                                    <span class="string">"Button"</span>,</span><br><span class="line">                                    &#123;</span><br><span class="line">                                        props: &#123;</span><br><span class="line">                                            type:<span class="string">"success"</span>,</span><br><span class="line">                                            size:<span class="string">"default"</span></span><br><span class="line">                                        &#125;,</span><br><span class="line">                                        style: &#123;</span><br><span class="line">                                        &#125;,</span><br><span class="line">                                        on: &#123;</span><br><span class="line">                                            click: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                                                <span class="keyword">this</span>.detail_mission(params.row.id);</span><br><span class="line">                                            &#125;</span><br><span class="line">                                        &#125;</span><br><span class="line">                                    &#125;,</span><br><span class="line">                                    <span class="string">"详情"</span></span><br><span class="line">                                )</span><br><span class="line">                            ]);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                ],</span><br><span class="line">                data0: [&#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">module</span>: <span class="string">"baomojing"</span>, <span class="attr">is_run</span>: <span class="string">"10"</span>, <span class="attr">method</span>: <span class="string">"12112"</span>, <span class="attr">remark</span>: <span class="string">"123"</span>&#125;]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p><code>核心代码：</code></p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//三元表达式</span></span><br><span class="line">params.row.is_run == <span class="string">'10'</span>?<span class="string">'运行'</span>:<span class="string">'不运行'</span></span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>js中const,var,let区别</title>
    <url>/2021/04/09/js%E4%B8%ADconst-var-let%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<p>js中三种定义变量的方式const， var， let的区别。<br><a id="more"></a></p>
<ol>
<li><p>const定义的变量不可以修改，而且必须初始化</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="number">1</span>;<span class="comment">//正确</span></span><br><span class="line"><span class="comment">// const a;//错误，必须初始化 </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'函数外const定义a：'</span> + a);<span class="comment">//有输出值</span></span><br><span class="line"><span class="comment">// a = 2;</span></span><br><span class="line"><span class="comment">// console.log('函数外修改const定义a：' + a);//无法输出</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>var定义的变量可以修改，如果不初始化会输出undefined，不会报错</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="comment">// var a;//不会报错</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'函数外var定义a：'</span> + a);<span class="comment">//可以输出a=1</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">change</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	a = <span class="number">2</span>;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">'函数内var定义a：'</span> + a);<span class="comment">//可以输出a=2</span></span><br><span class="line">&#125; </span><br><span class="line">change();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'函数调用后var定义a为函数内部修改值：'</span> + a);<span class="comment">//可以输出a=2</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>let是块级作用域，函数内部使用let定义后，对函数外部无影响</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'函数外let定义a：'</span> + a);<span class="comment">//输出c=1</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">change</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">let</span> a = <span class="number">2</span>;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">'函数内let定义a：'</span> + a);<span class="comment">//输出c=2</span></span><br><span class="line">&#125; </span><br><span class="line">change();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'函数调用后let定义a不受函数内部定义影响：'</span> + a);<span class="comment">//输出a=1</span></span><br></pre></td></tr></table></figure></div>
</li>
</ol>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>vue ui命令没反应</title>
    <url>/2021/04/18/vue-ui%E5%91%BD%E4%BB%A4%E6%B2%A1%E5%8F%8D%E5%BA%94/</url>
    <content><![CDATA[<p>安装完vue和vue-cli后，使用vue ui命令后没反应解决方案<br><a id="more"></a></p>
<h3 id="原因：版本太低"><a href="#原因：版本太低" class="headerlink" title="原因：版本太低"></a>原因：版本太低</h3><p>版本低于3时没有ui功能<br>查看版本号<br>    vue -V<br>查看是否有ui功能<br>    vue -h<br><img src="/image/"></p>
<h3 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h3><p>卸载老版本：<br>    npm uninstall vue-cli -g<br>下载新版本，vue-cli的3.0+以后使用的不是vue-cli，如果用vue-cli命令安装的并不是最新版的3.0+的，使用@vue/cli替代！<br>    npm install @vue/cli -g</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>vue列表循环指定下标</title>
    <url>/2021/04/15/vue%E5%88%97%E8%A1%A8%E5%BE%AA%E7%8E%AF%E6%8C%87%E5%AE%9A%E4%B8%8B%E6%A0%87/</url>
    <content><![CDATA[<p>vue项目中v-for循环有指定下标的需求。<br><a id="more"></a></p>
<h4 id="方案1"><a href="#方案1" class="headerlink" title="方案1"></a>方案1</h4><p>从数据源头更改，后端直接在列表里去除第一个数组元素。</p>
<h4 id="方案2"><a href="#方案2" class="headerlink" title="方案2"></a>方案2</h4><p>利用slice()函数<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">	&lt;ul&gt;</span><br><span class="line">		&lt;li v-for=&quot;(item, index) in shop_list.slice(1)&quot;&gt;&#123;&#123;item&#125;&#125;&lt;/li&gt;</span><br><span class="line">	&lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></div></p>
<h4 id="方案3"><a href="#方案3" class="headerlink" title="方案3"></a>方案3</h4><p>利用v-if，因为它的优先级低于v-for<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">	&lt;ul&gt;</span><br><span class="line">		&lt;li v-for=&quot;(item, index) in shop_list&quot; v-if=&quot;index &gt;= 1&quot;&gt;&#123;&#123;item&#125;&#125;&lt;/li&gt;</span><br><span class="line">	&lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></div></p>
<h4 id="方案4"><a href="#方案4" class="headerlink" title="方案4"></a>方案4</h4><p>利用method，返回新数组，其实也是切割和第二种类似<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">	&lt;ul&gt;</span><br><span class="line">		&lt;li v-for=&quot;(item, index) in new_shop_list&quot;&gt;&#123;&#123;item&#125;&#125;&lt;/li&gt;</span><br><span class="line">	&lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">var app = new Vue(&#123;</span><br><span class="line">	el: &apos;#app&apos;,</span><br><span class="line">	data: &#123;</span><br><span class="line">    shop_list: []</span><br><span class="line">  &#125;,</span><br><span class="line">	methods:&#123;</span><br><span class="line">		new_shop_list()&#123;</span><br><span class="line">			return this.shop_list.slice(1);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div></p>
<h4 id="方案5"><a href="#方案5" class="headerlink" title="方案5"></a>方案5</h4><p>利用computed<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">	&lt;ul&gt;</span><br><span class="line">		&lt;li v-for=&quot;(item, index) in new_shop_list&quot;&gt;&#123;&#123;item&#125;&#125;&lt;/li&gt;</span><br><span class="line">	&lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">var app = new Vue(&#123;</span><br><span class="line">	el: &apos;#app&apos;,</span><br><span class="line">	data: &#123;</span><br><span class="line">    shop_list: []</span><br><span class="line">  &#125;,</span><br><span class="line">	computed:&#123;</span><br><span class="line">		new_shop_list()&#123;</span><br><span class="line">			return this.shop_list.slice(1);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript截取数组</title>
    <url>/2021/04/22/JavaScript%E6%88%AA%E5%8F%96%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<p>记录一下JavaScript中截取数组函数slice<br><a id="more"></a></p>
<h3 id="slice定义和用法"><a href="#slice定义和用法" class="headerlink" title="slice定义和用法"></a>slice定义和用法</h3><p>slice() 可从已有的数组中返回选定的元素。</p>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>arrayObject.slice(start,end)</p>
<table>
<thead>
<tr>
<th style="text-align:left">参数</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">start</td>
<td style="text-align:left">必需。规定从何处开始选取。如果是负数，那么它规定从数组尾部开始算起的位置。也就是说，-1 指最后一个元素，-2 指倒数第二个元素，以此类推。</td>
</tr>
<tr>
<td style="text-align:left">end</td>
<td style="text-align:left">可选。规定从何处结束选取。该参数是数组片断结束处的数组下标。如果没有指定该参数，那么切分的数组包含从 start 到数组结束的所有元素。如果这个参数是负数，那么它规定的是从数组尾部开始算起的元素。</td>
</tr>
</tbody>
</table>
<h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>返回一个新的数组，包含从 start 到 end （不包括该元素）的 arrayObject 中的元素。</p>
<h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h3><p>该方法不能修改数组，而是返回一个子数组。如果想删除数组中的一段元素，应该使用方法 Array.splice()。</p>
<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>使用负值从数组的尾部选取元素。<br>如果 end 未被规定，那么 slice() 方法会选取从 start 到数组结尾的所有元素。</p>
<h3 id="案例1"><a href="#案例1" class="headerlink" title="案例1"></a>案例1</h3><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">3</span>)</span><br><span class="line">arr[<span class="number">0</span>] = <span class="string">"张三"</span></span><br><span class="line">arr[<span class="number">1</span>] = <span class="string">"李四"</span></span><br><span class="line">arr[<span class="number">2</span>] = <span class="string">"王五"</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">console</span>.log(arr)</span><br><span class="line"><span class="built_in">console</span>.log(arr.slice(<span class="number">1</span>))</span><br><span class="line"><span class="built_in">console</span>.log(arr)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ ["张三", "李四", "王五"]</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ ["李四", "王五"]</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ ["张三", "李四", "王五"]</span></span><br></pre></td></tr></table></figure></div>
<h3 id="案例2"><a href="#案例2" class="headerlink" title="案例2"></a>案例2</h3><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">6</span>)</span><br><span class="line">arr[<span class="number">0</span>] = <span class="string">"张三"</span></span><br><span class="line">arr[<span class="number">1</span>] = <span class="string">"李四"</span></span><br><span class="line">arr[<span class="number">2</span>] = <span class="string">"王五"</span></span><br><span class="line">arr[<span class="number">3</span>] = <span class="string">"赵六"</span></span><br><span class="line">arr[<span class="number">4</span>] = <span class="string">"孙七"</span></span><br><span class="line">arr[<span class="number">5</span>] = <span class="string">"周八"</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">console</span>.log(arr)</span><br><span class="line"><span class="built_in">console</span>.log(arr.slice(<span class="number">2</span>,<span class="number">4</span>))</span><br><span class="line"><span class="built_in">console</span>.log(arr)</span><br><span class="line"> </span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ ["张三", "李四", "王五", "赵六", "孙七", "周八"]</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ ["王五", "赵六"]</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ ["张三", "李四", "王五", "赵六", "孙七", "周八"]</span></span><br></pre></td></tr></table></figure></div>
<h3 id="案例3"><a href="#案例3" class="headerlink" title="案例3"></a>案例3</h3><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"><span class="comment">//JS Array.slice 截取数组</span></span><br><span class="line"><span class="comment">//在JavaScript中，Array对象的slice(start[,end])方法返回数组从下标[start,end)的部分（不包含下标为end的元素）如果没有指定end参数，则从start开始到数组结尾的部分，slice()方法不改变原数组，如果要删除数组的一部分，可以使用splice()方法。</span></span><br><span class="line"><span class="comment">//参数：</span></span><br><span class="line"><span class="comment">//（1）start:开始截取的数组下标，如果start是负数，表明从数组尾部开始计算。</span></span><br><span class="line"><span class="comment">//（2）end:结束截取的数组下标，如果end是负数，表明从数组尾部开始计算。</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr.slice(<span class="number">5</span>));</span><br><span class="line"><span class="built_in">console</span>.log(arr.slice(<span class="number">-5</span>));</span><br><span class="line"><span class="built_in">console</span>.log(arr.slice(<span class="number">0</span>,<span class="number">3</span>));</span><br><span class="line"><span class="built_in">console</span>.log(arr.slice(<span class="number">1</span>,<span class="number">2</span>));</span><br><span class="line"><span class="built_in">console</span>.log(arr.slice(<span class="number">3</span>,<span class="number">-2</span>));</span><br><span class="line"><span class="built_in">console</span>.log(arr.slice(<span class="number">1</span>,<span class="number">9999</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// [6, 7, 8, 9]</span></span><br><span class="line"><span class="comment">// [5, 6, 7, 8, 9]</span></span><br><span class="line"><span class="comment">// [1, 2, 3]</span></span><br><span class="line"><span class="comment">// [2]</span></span><br><span class="line"><span class="comment">// [4, 5, 6, 7]</span></span><br><span class="line"><span class="comment">// [2, 3, 4, 5, 6, 7, 8, 9]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//==================================================================================================</span></span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></div>
<h3 id="案例4"><a href="#案例4" class="headerlink" title="案例4"></a>案例4</h3><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="comment">//JS Array.splice(start,delete_count,value,...) 插入、删除、替换数组</span></span><br><span class="line"><span class="comment">//参数：</span></span><br><span class="line"><span class="comment">//（1）start:开始插入和（或）删除的数组元素的下标。</span></span><br><span class="line"><span class="comment">//（2）delete_count:结束截取的数组下标，如果end是负数，表明从数组尾部开始计算。</span></span><br><span class="line"><span class="comment">//（3）value,...：要插入数组的元素。</span></span><br><span class="line"><span class="comment">//返回：如果从数组中删除了元素，则返回的是被删除的元素的数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>];</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"arr="</span> + arr);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"arr.splice(5)="</span> + arr.splice(<span class="number">5</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"arr="</span> + arr);</span><br><span class="line"></span><br><span class="line"><span class="comment">// arr=1,2,3,4,5,6,7,8,9</span></span><br><span class="line"><span class="comment">// arr.splice(5)=6,7,8,9</span></span><br><span class="line"><span class="comment">// arr=1,2,3,4,5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>];</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"arr="</span> + arr);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"arr.splice(5,1,99,100)="</span> + arr.splice(<span class="number">5</span>,<span class="number">1</span>,<span class="number">99</span>,<span class="number">100</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"arr="</span> + arr);</span><br><span class="line"></span><br><span class="line"><span class="comment">// arr=1,2,3,4,5,6,7,8,9</span></span><br><span class="line"><span class="comment">// arr.splice(5,1,99,100)=6</span></span><br><span class="line"><span class="comment">// arr=1,2,3,4,5,99,100,7,8,9</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac安装adb教程</title>
    <url>/2021/04/29/Mac%E5%AE%89%E8%A3%85adb%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<p>Mac需要使用adb操作安卓手机，记录一下adb安装步骤。<br><a id="more"></a></p>
<h2 id="adb介绍"><a href="#adb介绍" class="headerlink" title="adb介绍"></a>adb介绍</h2><p>adb全称Android Debug Bridge，简单说就是通过命令行调试手机。</p>
<h3 id="adb安装"><a href="#adb安装" class="headerlink" title="adb安装"></a>adb安装</h3><p>使用Homebrew 安装<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">brew cask install android-platform-tools</span><br></pre></td></tr></table></figure></div></p>
<h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打开bash_profile</span></span><br><span class="line">vim ~/.bash_profile</span><br><span class="line"><span class="comment"># 在文末加入如下命令</span></span><br><span class="line"><span class="built_in">export</span> ANDROID_HOME=/Users/yourname/Library/Android/sdk</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$ANDROID_HOME</span>/tools</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$ANDROID_HOME</span>/platform-tools</span><br><span class="line"><span class="comment"># 重新加载配置文件</span></span><br><span class="line"><span class="built_in">source</span> ~/.bash_profile</span><br><span class="line"><span class="comment"># ---------</span></span><br><span class="line"><span class="comment"># 打开zshrc</span></span><br><span class="line">vim ~/.zshrc</span><br><span class="line"><span class="comment"># 在文末加入如下命令</span></span><br><span class="line"><span class="built_in">export</span> ANDROID_HOME=/Users/yourname/Library/Android/sdk</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$ANDROID_HOME</span>/tools</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$ANDROID_HOME</span>/platform-tools</span><br><span class="line"><span class="comment"># 重新加载配置文件</span></span><br><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure></div>
<h3 id="验证adb"><a href="#验证adb" class="headerlink" title="验证adb"></a>验证adb</h3><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">adb devices</span><br></pre></td></tr></table></figure></div>
<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># adb push 电脑端路径 手机端路径 用于将文件推送到手机</span></span><br><span class="line"><span class="comment"># 将data下名为xinbo的文件夹复制到存储根目录</span></span><br><span class="line">adb push /data/xinbo/ /sdcard/</span><br><span class="line"><span class="comment"># adb reboot 参数</span></span><br><span class="line"><span class="comment"># 手机会正常重启</span></span><br><span class="line">adb reboot</span><br><span class="line"><span class="comment"># 手机会重启到recovery卡刷模式</span></span><br><span class="line">adb reboot recovery</span><br><span class="line"><span class="comment"># 手机会重启到bootloader（fastboot）线刷模式</span></span><br><span class="line">adb reboot bootloader</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>MAC</category>
      </categories>
      <tags>
        <tag>MAC</tag>
      </tags>
  </entry>
  <entry>
    <title>Tornado框架Session封装</title>
    <url>/2021/04/28/tornado%E6%A1%86%E6%9E%B6Session%E5%B0%81%E8%A3%85/</url>
    <content><![CDATA[<p>Tornado框架官方没有提供Session相关方案，看到一个简单的封装，记录一下！<br><a id="more"></a></p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Session</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="comment">#request_handler_obj为当前RequestHandler对象的self参数#</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, request_handler_obj)</span>:</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 先判断用户的session_id是否存在</span></span><br><span class="line">        self._request_handler = request_handler_obj</span><br><span class="line">        self.session_id = request_handler_obj.get_secure_cookie(<span class="string">"session_id"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 如果不存在session_id,生成session_id</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.session_id:</span><br><span class="line">            self.session_id = uuid.uuid4().hex</span><br><span class="line">            self.data = &#123;&#125;</span><br><span class="line">            request_handler_obj.set_secure_cookie(<span class="string">"session_id"</span>, self.session_id)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 如果存在session_id, 去redis中取出data</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                json_data = request_handler_obj.redis.get(<span class="string">"sess_%s"</span> % self.session_id)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                logging.error(e)</span><br><span class="line">                <span class="keyword">raise</span> e</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> json_data:</span><br><span class="line">                self.data = &#123;&#125;</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.data = json.loads(json_data)</span><br><span class="line">    <span class="comment">#在需要存储数据的地方调用save方法#</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save</span><span class="params">(self)</span>:</span></span><br><span class="line">        json_data = json.dumps(self.data)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self._request_handler.redis.setex(<span class="string">"sess_%s"</span> % self.session_id,</span><br><span class="line">                                             SESSION_EXPIRES_SECONDS, json_data)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            logging.error(e)</span><br><span class="line">            <span class="keyword">raise</span> e</span><br><span class="line">    <span class="comment">#清除redis中的session_id#</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">clear</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self._request_handler.redis.delete(<span class="string">"sess_%s"</span> % self.session_id)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            logging.error(e)</span><br><span class="line">        self._request_handler.clear_cookie(<span class="string">"session_id"</span>)</span><br></pre></td></tr></table></figure></div>
<p><a href="https://blog.csdn.net/pengxuan3507/article/details/80431492" target="_blank" rel="noopener">代码参考链接</a></p>
]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>axios传递数组参数の坑</title>
    <url>/2021/05/11/axios%E4%BC%A0%E9%80%92%E6%95%B0%E7%BB%84%E5%8F%82%E6%95%B0%E3%81%AE%E5%9D%91/</url>
    <content><![CDATA[<p>使用axios发送请求时，当参数中有数组，参数的键值会带上[]。<br><a id="more"></a><br>引入js：<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">import axios from &apos;axios&apos;</span><br><span class="line">import qs from &apos;qs&apos;</span><br></pre></td></tr></table></figure></div></p>
<p>get / delete请求方式解决方式如下<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">axios.get(url, &#123;</span><br><span class="line">    params: &#123;</span><br><span class="line">     ids: [1,2,3]</span><br><span class="line">    &#125;,</span><br><span class="line">    paramsSerializer: params =&gt; &#123;</span><br><span class="line">      return qs.stringify(params, &#123; indices: false &#125;)</span><br><span class="line">&#125;&#125;)</span><br><span class="line"></span><br><span class="line">axios.delete(url, &#123;</span><br><span class="line">     params: &#123;</span><br><span class="line">     ids: [1,2,3]</span><br><span class="line">    &#125;,</span><br><span class="line">    paramsSerializer: params =&gt; &#123;</span><br><span class="line">      return qs.stringify(params, &#123; indices: false &#125;)</span><br><span class="line">&#125;&#125;)</span><br></pre></td></tr></table></figure></div></p>
<p>post / put 请求方式解决方式如下<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">axios.post(url, qs.stringify(</span><br><span class="line">    params: &#123;</span><br><span class="line">     ids: [1,2,3]</span><br><span class="line">&#125;, &#123; indices: false &#125;))</span><br><span class="line"></span><br><span class="line"> axios.put(url, qs.stringify(params: &#123;</span><br><span class="line">     ids: [1,2,3]</span><br><span class="line">&#125;, &#123; indices: false &#125;))</span><br></pre></td></tr></table></figure></div></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>Charles抓包异常排查</title>
    <url>/2021/05/20/Charles%E6%8A%93%E5%8C%85%E5%BC%82%E5%B8%B8%E6%8E%92%E6%9F%A5/</url>
    <content><![CDATA[<p>记录一下遇到的异常情况和解决方案<br><a id="more"></a></p>
]]></content>
      <categories>
        <category>测试</category>
      </categories>
      <tags>
        <tag>测试</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript展开运算符</title>
    <url>/2021/05/23/JavaScript%E5%B1%95%E5%BC%80%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
    <content><![CDATA[<p>记录一下展开运算符这个新知识点<br><a id="more"></a></p>
<ul>
<li>ES6 里面号新添加了一个运算符 … ，叫做展开运算符</li>
<li><p>作用是把数组展开</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="built_in">console</span>.log(...arr);</span><br><span class="line"><span class="comment">// 1 2 3 4 5</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>合并数组</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> arr2 = [...arr, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr2);</span><br><span class="line"><span class="comment">//  [1, 2, 3, 6, 7, 8]</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>合并对象</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">	name: <span class="string">'jack'</span>,</span><br><span class="line">	age: <span class="number">18</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> obj2 = &#123;</span><br><span class="line">	...obj,</span><br><span class="line">	gender:<span class="string">"男"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(obj2);</span><br><span class="line"><span class="comment">// &#123;name: "jack", age: 18, gender: "男"&#125;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>函数传递参数</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">a, b, c</span>)</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(a);</span><br><span class="line">	<span class="built_in">console</span>.log(b);</span><br><span class="line">	<span class="built_in">console</span>.log(c);</span><br><span class="line">&#125;</span><br><span class="line">fn(...arr);</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 3</span></span><br></pre></td></tr></table></figure></div>
</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScriptのjoin()方法</title>
    <url>/2021/05/31/JavaScript%E3%81%AEjoin()%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>记录一下JavaScript中join()的使用！<br><a id="more"></a></p>
<h3 id="定义和用法"><a href="#定义和用法" class="headerlink" title="定义和用法"></a>定义和用法</h3><p>join() 方法将数组中的所有元素拼接为一个字符串。<br>元素可以通过指定的分隔符进行分隔的。</p>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line">arrayObject.join(separator)</span><br><span class="line"><span class="comment">// separator：可选,指定要使用的分隔符。省略该参数，默认使用逗号作为分隔符。</span></span><br></pre></td></tr></table></figure></div>
<h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>返回一个字符串，通过把arrayObject中的每个元素转换为字符串，然后把这些字符串连接起来，每个元素之间插入separator分隔符。</p>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><h5 id="例1"><a href="#例1" class="headerlink" title="例1:"></a>例1:</h5><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">3</span>)</span><br><span class="line">arr[<span class="number">0</span>] = <span class="string">"张三"</span></span><br><span class="line">arr[<span class="number">1</span>] = <span class="string">"李四"</span></span><br><span class="line">arr[<span class="number">2</span>] = <span class="string">"王五"</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.join())</span><br><span class="line"></span><br><span class="line"><span class="comment">// 张三,李四,王五</span></span><br></pre></td></tr></table></figure></div>
<h5 id="例2"><a href="#例2" class="headerlink" title="例2:"></a>例2:</h5><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">3</span>)</span><br><span class="line">arr[<span class="number">0</span>] = <span class="string">"山东省"</span></span><br><span class="line">arr[<span class="number">1</span>] = <span class="string">"烟台市"</span></span><br><span class="line">arr[<span class="number">2</span>] = <span class="string">"莱山区"</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.join(<span class="string">"."</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 山东省.烟台市.莱山区</span></span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>axios超时时间设置</title>
    <url>/2021/06/02/axios%E8%B6%85%E6%97%B6%E6%97%B6%E9%97%B4%E8%AE%BE%E7%BD%AE/</url>
    <content><![CDATA[<p>后端某个接口运行时间长，需要单独对接口设置超时时间！<br><a id="more"></a></p>
<h3 id="全局设置网络超时："><a href="#全局设置网络超时：" class="headerlink" title="全局设置网络超时："></a>全局设置网络超时：</h3><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">axios.defaults.timeout = 30000;</span><br></pre></td></tr></table></figure></div>
<h3 id="某个请求单独设置网络超时："><a href="#某个请求单独设置网络超时：" class="headerlink" title="某个请求单独设置网络超时："></a>某个请求单独设置网络超时：</h3><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">let timeout = parseInt(30000);</span><br><span class="line">this.$ajax.post(url, params, &#123;timeout: timeout&#125;)</span><br><span class="line">  .then(res =&gt; &#123;</span><br><span class="line">    console.log(&apos;response=&apos;+response);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(reason =&gt; &#123;</span><br><span class="line">    console.log(&apos;reason&apos;+reason);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>less-loader因为版本导致的问题</title>
    <url>/2021/04/20/less-loader%E5%9B%A0%E4%B8%BA%E7%89%88%E6%9C%AC%E5%AF%BC%E8%87%B4%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>升级less-loader后因为版本过高报错！<br><a id="more"></a></p>
<h4 id="报错信息"><a href="#报错信息" class="headerlink" title="报错信息"></a>报错信息</h4><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line">Syntax <span class="built_in">Error</span>: <span class="built_in">TypeError</span>: <span class="keyword">this</span>.getOptions is not a <span class="function"><span class="keyword">function</span></span></span><br></pre></td></tr></table></figure></div>
<h4 id="场景重现"><a href="#场景重现" class="headerlink" title="场景重现"></a>场景重现</h4><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line">npm install -D less-loader less</span><br></pre></td></tr></table></figure></div>
<h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><ol>
<li><p>卸载 less-loader</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line">npm uninstall --save less-loader</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>安装低版本的less-loader</p>
<div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line">npm install -D less-loader@<span class="number">7.3</span><span class="number">.0</span></span><br></pre></td></tr></table></figure></div>
</li>
</ol>
<p>经查询资料版本为7.3.0以下目前是没有问题</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>测试学习笔记二</title>
    <url>/2021/11/18/%E6%B5%8B%E8%AF%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8C/</url>
    <content><![CDATA[<p>测试基础相关的学习笔记。<br><a id="more"></a></p>
<h3 id="黑盒测试、白盒测试、单元测试、集成测试、系统测试、验收测试的区别"><a href="#黑盒测试、白盒测试、单元测试、集成测试、系统测试、验收测试的区别" class="headerlink" title="黑盒测试、白盒测试、单元测试、集成测试、系统测试、验收测试的区别"></a>黑盒测试、白盒测试、单元测试、集成测试、系统测试、验收测试的区别</h3><p>  黑盒测试:把测试对象当成一个黑盒子，测试人员完全不考虑逻辑结构和内部特性， 只依据程式的需求说明书来检查程序的功能是否满足它的功能说明。<br>  白盒测试:把测试对象当成一个透明的盒子，允许测试人员利用程序内部逻辑结构及相关信息，设计或选择测试用例，对程序所有逻辑路径进行测试。<br>  单元测试:白盒测试的一种，对软件设计中的单元模块进行测试。<br>  集成测试:在单元测试的基础上，对单元模块之间的连接和组装进行测试。<br>  系统测试:在所有都考虑的情况下，对系统进行测试。<br>  验收测试:第三方进行的确认软件满足需求的测试。</p>
<h3 id="黑盒测试和白盒测试常用的测试方法有哪些，举个例子"><a href="#黑盒测试和白盒测试常用的测试方法有哪些，举个例子" class="headerlink" title="黑盒测试和白盒测试常用的测试方法有哪些，举个例子?"></a>黑盒测试和白盒测试常用的测试方法有哪些，举个例子?</h3><p>  黑盒：等价类划分法，边界分析法，因果图法和错误猜测法。<br>  白盒：逻辑覆盖法，循环测试路径选择，基本路径测试。</p>
<h3 id="黑盒测试和白盒测试的优缺点"><a href="#黑盒测试和白盒测试的优缺点" class="headerlink" title="黑盒测试和白盒测试的优缺点"></a>黑盒测试和白盒测试的优缺点</h3><p>※ 黑盒测试的优点有:</p>
<ol>
<li>比较简单，不需要了解代码的内部逻辑及实现;</li>
<li>从用户角度出发，能很容易的知道用户会用到哪些功能，会遇到哪些问题;</li>
<li>基于软件开发文档，清楚软件实现了文档中的哪些功能;</li>
<li>自动化测试较为方便。<br>※ 黑盒测试的缺点有:</li>
<li>不能覆盖所有的代码，覆盖率较低，大概只能达到总代码量的 30%;</li>
<li>自动化测试的复用性较低。<br>※ 白盒测试的优点有:</li>
<li>测试人员增大代码覆盖率，提高代码的质量，能发现代码中隐藏的问题。<br>※ 白盒测试的缺点有:</li>
<li>程序运行会有很多不同的路径，测试不能覆盖所有的运行路径;测试基于代码，只能测试开发人员做的对不对，而不能知道设计的正确与否，可能会漏掉一些功能需求;系统庞大时，测试开销会非常大。<h3 id="好测试用例的特点"><a href="#好测试用例的特点" class="headerlink" title="好测试用例的特点"></a>好测试用例的特点</h3>质量属性:<br>正确性:确保测试标题描述部分的内容正确性。<br>经济性:只为确定需要的目的设计相应的测试步骤。<br>可重复性:自我一致性，即不管谁执行此用例，结果一样。<br>适应性:既能适应短期需要，又能考虑长远需要。<br>可追踪性:用例能追踪到一个具体的需求。<br>自我清理性:单个用例不会影响整个测试环境，即用例执行完了可以恢复原有的测试环境。<br>结构化和可测试性<br>含有规范的测试标题和编号。<br>含有一个确定的测试某一个特定需求的目的。<br>含有关于测试方法的描述。<br>指定条件信息-环境、数据、预置的条件测试、安全入口等。<br>含有操作步骤和预期结果。<br>陈述任何辅助证据，例如截图报告并确保这些东西妥善保存。<br>确保测试环境的干净(即用例不会影响整个环境)。<br>描述时使用主动语气结构。<br>操作步骤不要超过 15 步。<br>确保单个用例测试执行时用时不超过 20 分钟。<br>自动化脚本用例添加必要的注释，比如目的、输入和期望结果。<br>如果可能，建议提供可选择性的预置条件测试。<br>用例之间的先后顺序是否跟业务流程一致，即用例在业务流程中的彼此顺序关系是否合理。<br>配置管理:<br>采用命名和编号规范归档。<br>保存为特定的格式，文件类型。<br>用例版本是否与当前被测试软件版本一致(对应)。<br>包含用例需要的相应测试对象，如特定数据库。<br>存档阅读。<br>存档时按角色控制访问方式<br>当网络备份时存档。<br>离线归档。</li>
</ol>
<h3 id="如何降低漏测率"><a href="#如何降低漏测率" class="headerlink" title="如何降低漏测率"></a>如何降低漏测率</h3><p>1、需求评审<br>2、梳理需求，尽早与开发人员、需求人员进行需求确认，统一不同角色对需求的认识<br>3、用例设计及评审<br>4、测试执行<br>5、bug回归<br>6、发布前的功能回归</p>
<h3 id="测试用例的基本设计方法"><a href="#测试用例的基本设计方法" class="headerlink" title="测试用例的基本设计方法"></a>测试用例的基本设计方法</h3><p>1、等价类划分法<br>2、边界值分析法<br>3、错误推断法<br>4、因果图判定表法<br>5、正交实验法<br>6、流程法<br>7、场景法</p>
<h3 id="写测试用例的原因"><a href="#写测试用例的原因" class="headerlink" title="写测试用例的原因"></a>写测试用例的原因</h3><p>1、深入了解需求的过程<br>2、测试执行的指导<br>3、规划测试数据的准备<br>4、反应测试进度<br>5、举一反三发现隐藏缺陷<br>6、分析缺陷标准</p>
<h3 id="缺陷报告是什么、缺陷报告的作用、缺陷报告的要点"><a href="#缺陷报告是什么、缺陷报告的作用、缺陷报告的要点" class="headerlink" title="缺陷报告是什么、缺陷报告的作用、缺陷报告的要点"></a>缺陷报告是什么、缺陷报告的作用、缺陷报告的要点</h3><p>1、缺陷报告是描述软件缺陷现象和重现步骤的集合。软件缺陷报告 Software Bug Report(SBR)或软件问题报告software Problem Report(SPR)。<br>2、缺陷报告是软件测试人员的工作成果之一，体现软件测试的价值缺陷报告可以把软件存在的缺陷准确的描述出来，便于开发人员修正缺陷报告可以反映项目/产品当前的质量状态，便于项目整体进度和质量控制软件测试缺陷报告是软件测试的输出成果之一，可以衡量测试人员的工作能力。<br>3、缺陷报告的要点<br>a.标题(Title)：简洁、准确、完整、反映缺陷本质、方便查询前缀+标题正文，标题正文采用结果和动作，或者 现象和位置的方式表达;<br>b.步骤(Steps)：可复现、完整、简洁、准确按数字编号;<br>c.实际结果(Actual results)准确、详细描述软件的现象和特征;<br>d.期望结果(Expected results)：准确、丰富、有理有据;<br>e.平台(Platforms)：准确;<br>f.截图 (Sereenshots)：准确反映缺陷特征;<br>g.注释(Notes)：关于缺陷的辅助说明</p>
<h3 id="软件测试缺陷报告的-5C-原则"><a href="#软件测试缺陷报告的-5C-原则" class="headerlink" title="软件测试缺陷报告的 5C 原则"></a>软件测试缺陷报告的 5C 原则</h3><p>Correct(准确):每个组成部分的描述准确，不会引起误解;<br>Clear(清晰):每个组成部分的描述清晰，易于理解;<br>Concise(简洁):只包含必不可少的信息，不包括任何多余的内容;<br>Complete(完整):包含复现该缺陷的完整步骤和其他本质信息;<br>Consistent(一致):按照一致的格式书写全部缺陷报告; </p>
<h3 id="软件缺陷的生命周期"><a href="#软件缺陷的生命周期" class="headerlink" title="软件缺陷的生命周期"></a>软件缺陷的生命周期</h3><p>测试人员提交新的Bug，错误状态为New;<br>测试人员验证错误，如果确认是错误，分配给相应的开 发人员，设置状态为 Open;<br>开发人员查询状态为Open的Bug，不是错误，则置状态为 Declined;<br>Bug修复并置状态为Fixed;<br>不能解决的 Bug，要留下文字说明及保持 Bug为Open状态。对于不能解决和延期解决的 Bug，不能由开发人员自己决定，一般要通过某种会议(评审会)通过才能认可;<br>测试人员查询状态为 Fixed 的 Bug，然后验证 Bug 是否已解决，如解决置 Bug 的状态为 Closed，如没有解决置状态为 Reopen;</p>
<h3 id="一个缺陷被开发人员认为不是缺陷，怎么处理"><a href="#一个缺陷被开发人员认为不是缺陷，怎么处理" class="headerlink" title="一个缺陷被开发人员认为不是缺陷，怎么处理?"></a>一个缺陷被开发人员认为不是缺陷，怎么处理?</h3><p>1、缺陷提交到缺陷管理库里面进行备案。<br>2、判断的依据和标准:<br>v.根据需求说明书、产品说明、设计文档等，确认实际结果与计划不一致的地方，提供缺陷是否确认的直接依据;<br>vi.如果没有文档依据，可以根据类似软件的一般特性来说明是否存在不一致的地方，来确认是否是缺陷;<br>vii.根据用户的一般使用习惯，来确认是否是缺陷;<br>viii.与设计人员、开发人员和客户代表等相关人员探讨，确认是否是缺陷;<br>3、合理的论述，向测试经理说明自己的判断的理由，注意客观、严谨，不掺杂个人情绪。<br>4、等待测试经理做出最终决定，如果仍然存在争议，可以通过公司政策所提供的渠道，向上级反映，并有上级做出决定。</p>
<h3 id="缺陷的优先级划分和描述"><a href="#缺陷的优先级划分和描述" class="headerlink" title="缺陷的优先级划分和描述"></a>缺陷的优先级划分和描述</h3><p>一般来说按照下面的来分，具体的是由每个公司而定。<br>软件缺陷有四种级别，分别为:致命的(Fatal)、严重的(Critical)、一般的(Major)、微小的(Minor)<br>A 类：致命的软件缺陷(Fatal):造成系统或应用程序崩溃、死机、系统挂起，或造成数据丢失，主要功能完全丧失，导致本模块以及相关模块异常等问题。如代码错误，死循环，数据库发生死锁、与数据库连接错误或数据通讯错误， 未考虑异常操作，功能错误等<br>B 类：严重错误的软件缺陷(critical):系统的主要功能部分丧失、数据不能保存，系统的次要功能完全丧失。 问题局限在本模块，导致模块功能失效或异常退出。如致命的错误声明，程序接口错误，数据库的表、业务规则、缺省值未加完整性等约束条件<br>C 类：一般错误的软件缺陷(major):次要功能没有完全实现但不影响使用。如提示信息不太准确，或用户界面差，操作时间长，模块功能部分失效等，打印内容、格式错误，删除操作未给出提示，数据库表中有过多的空字段等<br>D 类：较小错误的软件缺陷(Minor):使操作者不方便或遇到麻烦，但它不影响功能过的操作和执行，如错别字、界面不规范(字体大小不统一，文字排列不整齐，可输入区域和只读区域没有明显的区分标志)，辅助说明描述不清 楚<br>E 类：建议问题的软件缺陷(Enhancemental):由问题提出人对测试对象的改进意见或测试人员提出的建议、质疑。</p>
]]></content>
      <categories>
        <category>测试</category>
      </categories>
      <tags>
        <tag>测试</tag>
      </tags>
  </entry>
  <entry>
    <title>测试学习笔记一</title>
    <url>/2021/11/16/%E6%B5%8B%E8%AF%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80/</url>
    <content><![CDATA[<p>非技术面的常见问题和参考答案。<br><a id="more"></a></p>
<h3 id="1-请你自我介绍一下你自己"><a href="#1-请你自我介绍一下你自己" class="headerlink" title="1.请你自我介绍一下你自己"></a>1.请你自我介绍一下你自己</h3><p>不能只说姓名、年龄、爱好、工作经验等，这些信息简历上都有，面试官没必要问你。<br>面试官希望知道的是求职者能否胜任这份工作，自我介绍内容最好包括：最强的技能、最深入研究的知识领域、个性中最积极的部分、做过的最成功的事，主要的成就等，和学习有没有关系无所谓，一定要突出积极的个性和做事的能力，要说得合情合理，太假面试官不会相信。<br>回答面试官问题的时候要自然，有底气，否则给面试官留下很“假”的印象。</p>
<h3 id="2-你最大的优点和缺点是什么"><a href="#2-你最大的优点和缺点是什么" class="headerlink" title="2.你最大的优点和缺点是什么"></a>2.你最大的优点和缺点是什么</h3><p>不希望听到的优缺点：<br>我优点很多、我最大的优点就是追求完美，最大的缺点就是优点太多，缺点是小心眼、爱忌妒人、非常懒、脾气大、工作效率低。这些回答，面试官肯定不会录用你！<br>希望听到的优缺点：<br>沉着冷静、条理清楚、立场坚定、顽强向上、乐于助人和关心他人、适应能力和幽默感、乐观和友爱。我在××单位经过一到两年的项目实战，使我更适合这份工作，面试官喜欢求职者先从自己的优点说起，中间加一些小缺点，最后再把问题转回到优点上，突出优点的部分，企业喜欢聪明的求职者。</p>
<h3 id="3-谈谈你对公司加班的看法"><a href="#3-谈谈你对公司加班的看法" class="headerlink" title="3.谈谈你对公司加班的看法"></a>3.谈谈你对公司加班的看法</h3><p>千万不要幼稚地反问面试官：“加班是否有加班费”？<br>如果是工作需要我会义不容辞的加班，目前我还单身，没有家庭负担，可以全身心的投入工作。但是，我也会提高工作效率，减少不必要的加班；<br>如果是工作需要我会义不容辞加班，我现在已经成家，生活上已经稳定，这样更能全身心的投入工作。但是，我也会提高工作效率，减少不必要的加班。</p>
<h3 id="4-在未来的五年的时间内，你的职业规划是什么"><a href="#4-在未来的五年的时间内，你的职业规划是什么" class="headerlink" title="4.在未来的五年的时间内，你的职业规划是什么"></a>4.在未来的五年的时间内，你的职业规划是什么</h3><p>最普通的回答应该是“我准备在技术领域有所作为，比如「技术上有所突破」或「我希望能按照公司的管理思路发展」。</p>
<h3 id="5-谈谈你的朋友对你的评价是什么"><a href="#5-谈谈你的朋友对你的评价是什么" class="headerlink" title="5.谈谈你的朋友对你的评价是什么"></a>5.谈谈你的朋友对你的评价是什么</h3><p>是一个可以信赖的人。因为，我一旦答应别人的事情，就一定会做到。如果我做不到，我就不会轻易许诺；<br>觉的我是一个比较随和的人，与不同的人都可以友好相处。在我与人相处时，我总是能站在别人的角度考虑问题。</p>
<h3 id="6-如果我们公司录用了你，但你却在工作后发现根本不适合这个职位，你怎么办"><a href="#6-如果我们公司录用了你，但你却在工作后发现根本不适合这个职位，你怎么办" class="headerlink" title="6.如果我们公司录用了你，但你却在工作后发现根本不适合这个职位，你怎么办"></a>6.如果我们公司录用了你，但你却在工作后发现根本不适合这个职位，你怎么办</h3><ol>
<li>不断学习，虚心向领导和同事学习业务知识和处事经验，力争减少差距；</li>
<li>积极和领导沟通，说出自己不适应的原因，寻求领导的帮助，来克服不适应。<h3 id="7-在完成某项工作时，你认为自己的方式比领导要求的更好，你应该怎么做？"><a href="#7-在完成某项工作时，你认为自己的方式比领导要求的更好，你应该怎么做？" class="headerlink" title="7.在完成某项工作时，你认为自己的方式比领导要求的更好，你应该怎么做？"></a>7.在完成某项工作时，你认为自己的方式比领导要求的更好，你应该怎么做？</h3>1.尊重和服从领导的工作安排，私底下请教的口吻，婉转地表达自己的想法，听一下领导的意见和建议。<br>2.若领导没有采纳我的建议，首先按领导的要求认真地完成这项工作，并私下找领导分析下我的想法有哪些考虑不足点，提高自己的思维能力。<br>3.假如领导要求的方式违背原则，我会坚决提出反对意见，若领导仍固执己见，我会毫不犹豫地向上级领导反映。（注：这个你可以在面试的时候这么说，但一定要明确是面试官不是你将来的直接主管，而且实际中你也不要这么干！）<h3 id="8-如果你出现工作失误，给公司造成经济损失，你认为该怎么办？"><a href="#8-如果你出现工作失误，给公司造成经济损失，你认为该怎么办？" class="headerlink" title="8.如果你出现工作失误，给公司造成经济损失，你认为该怎么办？"></a>8.如果你出现工作失误，给公司造成经济损失，你认为该怎么办？</h3>1.如果造成经济损失，首要的方案是想方设法去弥补或挽回经济损失。如果超出我的能力范围，希望公司能够给予帮助。<br>2.分清责任，各负其责，如果是我的责任，我甘愿受罚；如果是我负责的团队中组员的失误，也不能幸灾乐祸，作为一个团队，需要互相提携共同完成工作，安慰同事并且帮助同事查找原因总结经验。<br>3.总结经验教训，从自己的或者是别人的错误中吸取经验教训，并在以后的工作中避免发生同类的错误。<br>4.检讨自己的工作方法、分析问题的深度和力度是否不够，以致出现了本可以避免的错误。<h3 id="9-谈谈你对跳槽的看法？"><a href="#9-谈谈你对跳槽的看法？" class="headerlink" title="9.谈谈你对跳槽的看法？"></a>9.谈谈你对跳槽的看法？</h3>1.正常的『跳槽』能促进人才合理流动，应该支持。<br>2.频繁的『跳槽』对双方都不利，应该反对。<h3 id="10-谈谈工作中你难以和同事、上级相处，你该怎么办？"><a href="#10-谈谈工作中你难以和同事、上级相处，你该怎么办？" class="headerlink" title="10.谈谈工作中你难以和同事、上级相处，你该怎么办？"></a>10.谈谈工作中你难以和同事、上级相处，你该怎么办？</h3>1.服从领导的指挥，配合同事的工作。<br>2.先从自身找原因，仔细分析自己工作哪里做得让领导不满意，同事看不惯。认真思考为人处世方面有没有问题，并努力改正找到的原因。<br>3.如果找不到原因，会找机会跟同事进行沟通，请同事们指出自己的不足，及时改正同事指出的错误。<br>4.工作中以大局为重，即使在一段时间内，领导和同事对我不理解，我也会做好本职工作，虚心向他们学习，我相信，他们会看见我在努力。<h3 id="11-因工作比较突出，虽说得到领导肯定，但同事越来越孤立你，你该怎么办？"><a href="#11-因工作比较突出，虽说得到领导肯定，但同事越来越孤立你，你该怎么办？" class="headerlink" title="11.因工作比较突出，虽说得到领导肯定，但同事越来越孤立你，你该怎么办？"></a>11.因工作比较突出，虽说得到领导肯定，但同事越来越孤立你，你该怎么办？</h3>1.成绩比较突出，得到领导的肯定是件好事情，以后更加努力。<br>2.检讨自己是不是对工作的热心超过同事间交往的热心了，加强同事间的交流。<br>3.工作中，切勿伤害别人的自尊心。<br>4.不在领导面前拨弄是非。<h3 id="12-怎样看待学历和能力的"><a href="#12-怎样看待学历和能力的" class="headerlink" title="12.怎样看待学历和能力的"></a>12.怎样看待学历和能力的</h3>一个人工作能力的高低直接决定其职场命运，而学历的高低只是进入一个企业的敲门砖。<br>我认为要是把学历和能力挂钩，这不一定只是个人的损失，企业也会因此失去很多虽然学历不太好，但是能力很出众的候选人。<h3 id="13-还有什么问题要问我的吗？"><a href="#13-还有什么问题要问我的吗？" class="headerlink" title="13.还有什么问题要问我的吗？"></a>13.还有什么问题要问我的吗？</h3>面试官不喜欢说“没问题”的人，企业都是很注重员工的个性和创新能力。其次不喜欢求职者问个人福利之类的问题。<br>贵公司对新入公司的员工有没有什么培训项目，我可以参加吗？<br>贵公司的晋升机制是什么样的？<br>能体现出你对学习的热情和对公司的忠诚度以及你的上进心。<h3 id="14-薪资的要求"><a href="#14-薪资的要求" class="headerlink" title="14.薪资的要求"></a>14.薪资的要求</h3>投递简历不要在简历上体现“期望薪资”、“原来薪资”等一些关于薪资明确的数字，如果用一些招聘网站的简历模板时，该项必须要填写的时候，大家可以写“面议”。真正的薪资不是你写出来的，而是你在面试的时候根据自己的面试表现体现出的！<br>只要你之前技术测试很顺利，那么谈薪酬的时候就会更有底气，可以这么回答：我对工资没有硬性要求，我相信贵公司在处理我的问题上会友善合理。我注重的是找对工作机会，所以只要条件公平，我则不会计较太多或者说：我受过系统的软件编程的训练，不需要进行大量的培训，而且我本人也对编程特别感兴趣。因此，我希望公司能根据我的情况和市场标准的水平，给我合理的薪水。</li>
</ol>
]]></content>
      <categories>
        <category>测试</category>
      </categories>
      <tags>
        <tag>测试</tag>
      </tags>
  </entry>
  <entry>
    <title>Cookie中的httponly的属性和作用</title>
    <url>/2021/11/24/Cookie%E4%B8%AD%E7%9A%84httponly%E7%9A%84%E5%B1%9E%E6%80%A7%E5%92%8C%E4%BD%9C%E7%94%A8/</url>
    <content><![CDATA[<p>偶尔接触到Cookie中的httponly的属性，学习下。<br><a id="more"></a></p>
<h4 id="HttpOnly是什么"><a href="#HttpOnly是什么" class="headerlink" title="HttpOnly是什么"></a>HttpOnly是什么</h4><p>cookie中设置了HttpOnly属性，通过js脚本无法读取到cookie信息，能有效的防止XSS攻击，窃取cookie内容，增加cookie的安全性，但是也不要将重要信息存入cookie中。<br>XSS全称Cross SiteScript，跨站脚本攻击，是Web程序中常见的漏洞，XSS属于被动式且用于客户端的攻击方式，所以容易被忽略其危害性。<br>XSS的原理是攻击者向有XSS漏洞的网站中输入(传入)恶意的HTML代码，当其它用户浏览该网站时，这段HTML代码会自动执行，达到攻击的目的。如：盗取用户Cookie、破坏页面结构、重定向到其它网站等。</p>
<h4 id="HttpOnly的设置样例"><a href="#HttpOnly的设置样例" class="headerlink" title="HttpOnly的设置样例"></a>HttpOnly的设置样例</h4><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line">response.setHeader( <span class="string">"Set-Cookie"</span> , <span class="string">"cookiename=httponlyTest;Path=/;Domain=domainvalue;Max-Age=seconds;HTTPOnly"</span>);</span><br><span class="line"><span class="comment">// 例如：</span></span><br><span class="line"><span class="comment">// 设置cookie</span></span><br><span class="line">response.addHeader(<span class="string">"Set-Cookie"</span>, <span class="string">"uid=112; Path=/; HttpOnly"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置多个cookie</span></span><br><span class="line">response.addHeader(<span class="string">"Set-Cookie"</span>, <span class="string">"uid=112; Path=/; HttpOnly"</span>);</span><br><span class="line">response.addHeader(<span class="string">"Set-Cookie"</span>, <span class="string">"timeout=30; Path=/test; HttpOnly"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置https的cookie</span></span><br><span class="line">response.addHeader(<span class="string">"Set-Cookie"</span>, <span class="string">"uid=112; Path=/; Secure; HttpOnly"</span>);</span><br></pre></td></tr></table></figure></div>
<p>设置完毕后通过js脚本是读不到该cookie的，但使用如下方式可以读取。<br><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line">Cookie cookies[]=request.getCookies();</span><br></pre></td></tr></table></figure></div></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux基础学习一</title>
    <url>/2021/12/02/Linux%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E4%B8%80/</url>
    <content><![CDATA[<p>复习Linux基础知识。<br><a id="more"></a></p>
<h3 id="1、查看一个文件的头部5行和尾部5行。"><a href="#1、查看一个文件的头部5行和尾部5行。" class="headerlink" title="1、查看一个文件的头部5行和尾部5行。"></a>1、查看一个文件的头部5行和尾部5行。</h3><p>查看文件前 5 行内容:<br>head -n 5 文件<br>查看文件后 5 行内容:<br>tail -n 5 文件</p>
<h3 id="2、查看文件中带某个关键词的行"><a href="#2、查看文件中带某个关键词的行" class="headerlink" title="2、查看文件中带某个关键词的行"></a>2、查看文件中带某个关键词的行</h3><p>grep “关键词” 文件<br>cat 文件 | grep “关键词”</p>
<h3 id="3、查看某端口号"><a href="#3、查看某端口号" class="headerlink" title="3、查看某端口号"></a>3、查看某端口号</h3><p>netstat -anp | grep 端口号</p>
<h3 id="4、查看某进程号"><a href="#4、查看某进程号" class="headerlink" title="4、查看某进程号"></a>4、查看某进程号</h3><p>ps -ef | grep 进程名<br>ps -ef | grep 进程号</p>
<h3 id="5、创建和删除多级目录"><a href="#5、创建和删除多级目录" class="headerlink" title="5、创建和删除多级目录"></a>5、创建和删除多级目录</h3><p>mkdir -p ./a/b<br>rm -rf ./a</p>
<h3 id="6、查找根目录下-haha-txt-文件"><a href="#6、查找根目录下-haha-txt-文件" class="headerlink" title="6、查找根目录下 haha.txt 文件?"></a>6、查找根目录下 haha.txt 文件?</h3><p>find ~/ -name haha.txt</p>
<h3 id="7、查询出-tomcat-的进程并杀掉进程"><a href="#7、查询出-tomcat-的进程并杀掉进程" class="headerlink" title="7、查询出 tomcat 的进程并杀掉进程"></a>7、查询出 tomcat 的进程并杀掉进程</h3><p>ps -ef | grep tomcat<br>kill -9 tomcat_port</p>
<h3 id="8、动态查看日志文件"><a href="#8、动态查看日志文件" class="headerlink" title="8、动态查看日志文件"></a>8、动态查看日志文件</h3><p>tail -f log_file</p>
<h3 id="9、查看系统硬盘空间"><a href="#9、查看系统硬盘空间" class="headerlink" title="9、查看系统硬盘空间"></a>9、查看系统硬盘空间</h3><p>df -aTh</p>
<h3 id="10、查看当前机器监听的所有端口"><a href="#10、查看当前机器监听的所有端口" class="headerlink" title="10、查看当前机器监听的所有端口"></a>10、查看当前机器监听的所有端口</h3><p>netstat -tlnp</p>
<h3 id="11、打包压缩成-tar-gz-的命令，解压拆包-tar-gz-的命令"><a href="#11、打包压缩成-tar-gz-的命令，解压拆包-tar-gz-的命令" class="headerlink" title="11、打包压缩成.tar.gz 的命令，解压拆包.tar.gz 的命令"></a>11、打包压缩成.tar.gz 的命令，解压拆包.tar.gz 的命令</h3><p>tar zcvf xxx.tar.gz file<br>tar zxvf xxx.tar.gz</p>
<h3 id="12、-etc-passwd-的前五行内容提取用户名"><a href="#12、-etc-passwd-的前五行内容提取用户名" class="headerlink" title="12、/etc/passwd 的前五行内容提取用户名"></a>12、/etc/passwd 的前五行内容提取用户名</h3><p>cat /etc/passwd | head -n 5 | cut -d : -f 1</p>
<h3 id="13、-find-和-grep-的区别"><a href="#13、-find-和-grep-的区别" class="headerlink" title="13、 find 和 grep 的区别"></a>13、 find 和 grep 的区别</h3><p>grep：<br>一种强大的文本搜索工具，它能使用正则表达式搜索文本，并把匹配的行打印出来。 grep全称是 Global Regular Expression Print，表示全局正则表达式版本，它的使用权限是所有用户。<br>find：<br>功能：在目录结构中搜索文件，并执行指定的操作。此命令提供了相当多的查找条件，功能很强大。<br>语法：find起始目录寻找条件操作<br>说明：find命令从指定的起始目录开始，递归地搜索其各个子目录，查找满足寻找条件的文件并对之采取相关的操作。<br>总结：grep是查找匹配条件的行，find 是搜索匹配条件的文件。</p>
]]></content>
      <categories>
        <category>测试</category>
      </categories>
      <tags>
        <tag>测试</tag>
      </tags>
  </entry>
  <entry>
    <title>测试学习笔记五</title>
    <url>/2021/11/29/%E6%B5%8B%E8%AF%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%94/</url>
    <content><![CDATA[<p>常见的面试题<br><a id="more"></a></p>
<h3 id="移动端和web端测试有什么区别"><a href="#移动端和web端测试有什么区别" class="headerlink" title="移动端和web端测试有什么区别"></a>移动端和web端测试有什么区别</h3><p>单纯从功能测试的层面上来讲的话，APP测试、web测试 在流程和功能测试上是没有区别的。 根据两者载体不一样，则区别如下:<br>系统结构方面<br>web项目，b/s 架构，基于浏览器的;web 测试只要更新了服务器端，客户端就会同步会更新。<br>app项目，c/s结构的，必须要有客户端;app修改了服务端，则客户端用户所有核心版本都需要进行回归 测试一遍。<br>性能方面<br>web项目需监测响应时间、CPU、Memory<br>app项目除了监测响应时间、CPU、Memory 外，还需监测流量、电量等<br>兼容方面<br>(1)web 项目:<br>1、浏览器(火狐、谷歌、IE 等)<br>2、操作系统(Windows7、Windows10、Linux 等)<br>(2)app 项目:<br>1、设备系统:iOS(ipad、iphone)、Android(三星、华为、联想等) 、Windows(Win7、Win8)、 OSX(Mac)<br>2、手机设备可根据 手机型号、分辨率不同<br>相对于 Wed 项目，APP 有专项测试<br>1、干扰测试:中断，来电，短信，关机，重启等<br>2、弱网络测试(模拟 2g、3g、4g，wifi 网络状态以及丢包情况);网络切换测试(网络断开后重连、3g 切换到 4g/wifi 等)<br>3、安装、更新、卸载<br>安装:需考虑安装时的中断、弱网、安装后删除安装文件等情况<br>卸载:需考虑卸载后是否删除 app 相关的文件<br>更新:分强制更新、非强制更新、增量包更新、断点续传、弱网状态下更新<br>4、界面操作:关于手机端测试，需注意手势，横竖屏切换，多点触控，前后台切换<br>5、安全测试:安装包是否可反编译代码、安装包是否签名、权限设置，例如访问通讯录等<br>6、边界测试:可用存储空间少、没有SD卡/双SD卡、飞行模式、系统时间有误、第三方依赖(QQ、微信登录)等<br>7、权限测试:设置某个 App 是否可以获取该权限，例如是否可访问通讯录、相册、照相机等<br>测试工具方面<br>自动化工具:APP一般使用Appium; Web一般使用Selenium<br>性能测试工具:APP 一般使用 JMeter; Web 一般使用 LR、JMeter</p>
<h3 id="测试一个-C-S-客户端时，需要考虑的因素"><a href="#测试一个-C-S-客户端时，需要考虑的因素" class="headerlink" title="测试一个 C/S 客户端时，需要考虑的因素"></a>测试一个 C/S 客户端时，需要考虑的因素</h3><p>客户端安装测试<br>  客户端升级测试<br>  客户端可维护性测试<br>(1)个体的客户端应用以“分离的”模式被测试——不考虑服务器和底层网络的运行;<br>(2)客户端软件和关联的服务器端应用被一起测试，但网络运行不被明显的考虑;<br>(3)完整的C/S体系结构，包括网络运行和性能被测试。<br>应用功能测试——客户端应用被独立地执行，以揭示在其运行中的错误。<br>服务器测试——测试服务器的协调和数据管理功能，也考虑服务器性能(整体反映时间和数据吞吐量)。<br>数据库测试——测试服务器存储的数据的精确性和完整性，检查客户端应用提交的事务，以保证数据被正确地存储、更新和检索。<br>事务测试——创建一系列的测试以保证每类事务被按照需求处理。测试着重于处理的正确性，也关注性能问题。<br>网络通信测试——这些测试验证网络节点间的通信正常地发生，并且消息传递、事务和相关的网络交通无错的发生</p>
]]></content>
      <categories>
        <category>测试</category>
      </categories>
      <tags>
        <tag>测试</tag>
      </tags>
  </entry>
  <entry>
    <title>测试学习笔记六</title>
    <url>/2021/11/30/%E6%B5%8B%E8%AF%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%85%AD/</url>
    <content><![CDATA[<p>网页测试用例<br><a id="more"></a></p>
<h3 id="身份证号码输入框，测试用例设计"><a href="#身份证号码输入框，测试用例设计" class="headerlink" title="身份证号码输入框，测试用例设计"></a>身份证号码输入框，测试用例设计</h3><p>校验身份证号规则的有效性(包括地址码、生日期码、顺序码和校验码）<br>校验 15 位身份证号和 18 位身份正好都是可用的<br>校验末位是 X 的情况<br>校验不足 15 位、16-17 位和大于 18 位的情况<br>如果是必输项，校验不输入的时候会不会有正确的提示<br>如果不是必输项，则要校验不输入的时候流程能否正常进行<br>校验输入非数字的情况，是否会有正确提示信息(包括大小写字母、汉字、特殊字符和标点符号)<br>校验输入全角的数字的时候，系统是否会识别(这个得根据需求确定是否可以使用全角的数字)</p>
<h3 id="登录功能测试用例设计"><a href="#登录功能测试用例设计" class="headerlink" title="登录功能测试用例设计"></a>登录功能测试用例设计</h3><p>具体需求:<br>有一个登录页面，有一个账号和一个密码输入框, 一个提交按钮。</p>
<p>此题的考察目的:<br>1、了解需求(测什么都是从了解需求开始);<br>2、是否有设计 Test Case 的能力<br>3、是否熟悉各种测试方法;<br>4、是否有丰富的 Web 测试经验;<br>5、是否了解 Web 开发;</p>
<p>了解需求:<br>1、登录界面应该是弹出窗口式的，还是直接在网页里面;<br>2、账号长度和密码的强度(比如需要多少位、大小写敏感、特殊字符混搭等); 3、界面美观是否有特殊要求?(即是否要进行 UI 测试);<br>4、……..</p>
<p>用例设计:<br>测试需求分析完成后，开始用例设计，主要可以从以下几个方面考虑:<br>功能测试(Function Test)<br>1、输入正确的账号和密码，点击提交按钮，验证是否能正确登录。(正常输入)<br>2、输入错误的账号或者密码, 验证登录会失败，并且提示相应的错误信息。(错误校验)<br>3、登录成功后能否跳转到正确的页面(低)<br>4、账号和密码，如果太短或者太长，应该怎么处理(安全性，密码太短时是否有提示)<br>5、账号和密码，中有特殊字符(比如空格)，和其他非英文的情况(是否做了过滤)<br>6、记住账号的功能<br>7、登录失败后，不能记录密码的功能<br>8、账号和密码前后有空格的处理<br>9、密码是否加密显示(星号圆点等)<br>10、牵扯到验证码的，还要考虑文字是否扭曲过度导致辨认难度大，考虑颜色(色盲使用者)，刷新或换一个按钮是否好用<br>11、登录页面中的注册、忘记密码，登出用另一帐号登录等链接是否正确 12、输入密码的时候，大写键盘开启的时候要有提示信息。<br>13、什么都不输入，点击提交按钮，看提示信息。(非空检查)</p>
<p>界面测试(UI Test)<br>1、布局是否合理，2 个 Testbox 和一个按钮是否对齐<br>2、Testbox 和按钮的长度，高度是否符合要求<br>3、界面的设计风格是否与 UI 的设计风格统一<br>4、界面中的文字简洁易懂，没有错别字。</p>
<p>性能测试(Performance Test)<br>1、打开登录页面，需要几秒<br>2 、输入正确的账号和密码后，登录成功跳转到新页面，不超过5秒</p>
<p>安全性测试(Security Test)<br>1、登录成功后生成的 Cookie 是否有 HttpOnly(降低脚本盗取风险)<br>2、账号和密码是否通过加密的方式，发送给 Web 服务器<br>3、账号和密码的验证，应该是用服务器端验证，而不能单单是在客户端用 javaScript 验证<br>4、账号和密码的输入框，应该屏蔽 SQL 注入攻击<br>5、账号和密码的输入框，应该禁止输入脚本(防止 XSS 攻击)<br>6、错误登录的次数限制(防止暴力破解)<br>7、考虑是否支持多用户在同一机器上登录;<br>8、考虑一用户在多台机器上登录</p>
<p>可用性测试(Usability Test)<br>1、是否可以全用键盘操作，是否有快捷键<br>2、输入账号，密码后按回车，是否可以登录<br>3、输入框是否可以以 Tab 键切换</p>
<p>兼容性测试(Compatibility Test)<br>1、主流的浏览器下能否显示正常已经功能正常(IE6~11, FireFox, Chrome, Safari 等 )<br>2、不同的平台是否能正常工作，比如 Windows, Mac<br>3、移动设备上是否正常工作，比如 iPhone, Android<br>4、不同的分辨率</p>
<p>本地化测试 (Localization Test)<br>1、不同语言环境下，页面的显示是否正确。<br>软件辅助性测试 (Accessibility Test)<br>软件辅助功能测试是指测试软件是否向残疾用户提供足够的辅助功能<br>1、高对比度下能否显示正常(视力不好的人使用)</p>
<h3 id="测试一个网上购物的购物车"><a href="#测试一个网上购物的购物车" class="headerlink" title="测试一个网上购物的购物车"></a>测试一个网上购物的购物车</h3><p>界面测试: </p>
<ul>
<li>打开页面后，页面的布局是否合理，显示是否完整; </li>
<li>鼠标浮动在购物车按钮，迷你购物车界面显示是否正常; </li>
<li>不同卖家的商品在不同的 table 区域显示，区分明显;</li>
<li>页面的 tooltips 能正常显示; 功能测试:</li>
<li>所有页面链接功能正常，可以点击到正确页面;</li>
<li>页面关联本地软件阿里旺旺的 icon 点击后，能打开软件; </li>
<li>从商品信息页面添加的商品能显示在购物车中; </li>
<li>购物车页面打开的同时，在其他页面添加了商品，购物车页面刷新后，新的商品能显示; </li>
<li>若未登录，点击购物车，则提示用户输入用户名和密码，或者提示其他的非注册用户购物方式; </li>
<li>商品未勾选的状态下，结算按钮是灰色无法点击的; </li>
<li>勾选商品后，已选商品的总价会显示，结算按钮变高亮可点击工作; </li>
<li>勾选商品，点击结算按钮后，进入确认订单信息页面; </li>
<li>购物车页面中，可以对添加的商品信息做信息的修改，并自动保存成功; </li>
<li>卖家在线的时候，旺旺 icon 高亮，反之，灰色; </li>
<li>购物车有商品降价或者库存告急的，那么点击对应的 tab，降价或者告急商品会归类后显示; </li>
<li>购物车能添加的商品种类是有数量上限的;</li>
<li>不要的商品，可以删除;</li>
</ul>
<p>(其他特有的功能不做赘述，只讨论常见通用功能)<br>若商品已经失效，购物车的商品是否可以继续结算<br>已进入支付界面但支付未成功，重新进入购物车，又重新添加了一些物品，则原有的物品是否能正确保留;<br>(感觉这个还挺关键，经常是没完成支付，又添加了一些物品，最后再一起支付)<br>性能测试:</p>
<ul>
<li>打开购物车页面要多久;<br>可用性测试:</li>
<li>快捷键功能知否支持 兼容测试:</li>
<li>不同浏览器上的测试功能是否正常; </li>
<li>app 上测试</li>
</ul>
<h3 id="微信点赞，功能测试"><a href="#微信点赞，功能测试" class="headerlink" title="微信点赞，功能测试"></a>微信点赞，功能测试</h3><p>1、功能测试<br>  考虑功能是否符合预期<br>2、接口<br>  考虑各内部和外部的接口，比如朋友圈客户端和服务端的交互接口的功能。朋友圈点赞功能和消息提示功能的<br>  接口(点了赞之后对应的朋友收到提示信息)<br>3、平台<br>  手机版 pad 版 web 版<br>4、用户操作场景<br>  测试用户常用场景，比如:用户打开微信看到十条消息提示，点击后进入朋友圈界面显示了“谁谁谁点了赞”<br>5、速度、延迟<br>6、性能测试<br>  模拟一些多用户并发操作的场景<br>7、安全</p>
<h3 id="搜索框怎么测"><a href="#搜索框怎么测" class="headerlink" title="搜索框怎么测"></a>搜索框怎么测</h3><p>增:<br>  搜索功能分为简单搜索和高级搜索<br>简单搜索:<br>  先展示百度的简单搜索界面，仅供参考:<br>界面测试</p>
<ul>
<li>搜索框 UI 显示正常，布局合理;</li>
<li>搜索页面布局合理，无错别字;</li>
<li>搜索出的结果展示，布局合理; </li>
<li>已查看过的结果链接，链接的眼神要灰化处理，和没有点击过的结果链接区分; </li>
<li>结果数量庞大时，页面的分页布局合理;<br>功能测试</li>
<li>链接测试:页面上的链接都可连接至正确的页面 </li>
<li>搜索历史内容记录，便于查找检索过的内容 </li>
<li>搜索内容联想输入，便于用户搜索的便捷与准确性</li>
<li>搜索功能测试(重点)</li>
<li>搜索内容为空，验证系统如何处理 </li>
<li>搜索内容为空格，查看系统如何处理 </li>
<li>边界值验证，在允许的字符串范围内外，验证系统的处理 </li>
<li>超长字符串的输入，系统是否会截取允许的长度来检索结果</li>
<li>合法的字符串长度后，加空格，验证检索结果 </li>
<li>多个关键词中间加入空格，tab，逗号后，验证系统的结果是否正确 </li>
<li>验证每种合法的输入，结果是否正确 </li>
<li>是否支持检索内容的复制、粘贴、编辑等操作 </li>
<li>是否支持回车键搜索 </li>
<li>多次输入相同的内容，查看系统每次检索的结果是否正确，相同 </li>
<li>特殊字符，转义符，html 脚本等需作处理 </li>
<li>敏感词汇，提示用户无权限等信息 </li>
<li>输入的内容，是否支持快捷键操作等</li>
<li>只能输入允许的字符串长度<br>安全性测试(没有做过，只能列出一些简单的注意点)</li>
<li>脚本的禁用</li>
<li>SQl 注入，检索 sql select 语句等</li>
<li>敏感内容的检索是禁止的</li>
<li>特殊字符的检索 </li>
<li>被删除、加密、授权的数据，不允许被查出来的，是否有安全控制设计<br>兼容性测试</li>
<li>多平台 windows，mac</li>
<li>移动平台 ios，android</li>
<li>多浏览器 FF，Chrome，IE，国内主流浏览器等<br>性能测试</li>
<li>搜索页面打开的速度是否满足设计要求 </li>
<li>搜索出结果消耗的时间，是否满足设计要求<br>本地化测试</li>
<li>登录时，自动切换至相应语言国家的搜索主页</li>
</ul>
]]></content>
      <categories>
        <category>测试</category>
      </categories>
      <tags>
        <tag>测试</tag>
      </tags>
  </entry>
  <entry>
    <title>测试学习笔记三</title>
    <url>/2021/11/24/%E6%B5%8B%E8%AF%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%89/</url>
    <content><![CDATA[<p>现实物品测试实例<br><a id="more"></a></p>
<h3 id="有广告的纸杯子，测试用例设计"><a href="#有广告的纸杯子，测试用例设计" class="headerlink" title="有广告的纸杯子，测试用例设计"></a>有广告的纸杯子，测试用例设计</h3><p>测试项目:杯子<br>需求测试:查看杯子使用说明书<br>界面测试:查看杯子外观<br>功能度:用水杯装水看漏不漏;水能不能被喝到<br>安全性:杯子有没有毒或细菌<br>可靠性:杯子从不同高度落下的损坏程度<br>可移植性:杯子在不同的地方、温度等环境下是否都可以正常使用<br>兼容性:杯子是否能够容纳果汁、白水、酒精、汽油等<br>易用性:杯子是否烫手、是否有防滑措施、是否方便饮用<br>用户文档:使用手册是否对杯子的用法、限制、使用条件等有详细描述<br>疲劳测试:将杯子盛上水(案例一)放 24 小时检查泄漏时间和情况;盛上汽油(案例二)放 24 小时检查泄漏<br>时间和情况等<br>压力测试:用根针并在针上面不断加重量，看压强多大时会穿透<br>跌落测试: 杯子加包装(有填充物),在多高的情况摔下不破损<br>震动测试: 杯子加包装(有填充物),六面震动,检查产品是否能应对恶劣的铁路\公路\航空运输</p>
<p>基本功能测试(逻辑功能测试)。<br>(1)硬度:是否达到设计标准。<br>装载能力:在杯子内分别装入少量的、半杯的、满杯的，看其装载量是否达到设计标准。<br>装载种类:开水(是否产生异味)、温水、冷水、冰水、咖啡…<br>(2)界面测试(UI 测试)。<br>看其形状、大小设计是否适合人方便拿起。<br>外观是否吸引人(广告嘛)，赏心悦目。<br>带广告的图案沾水受是否掉色、模糊。<br>(3)易用性测试。<br>看其形状、大小设计是否适合人方便拿起。<br>残疾人士用此杯去喝水的容程度。<br>杯子设计是否上大下小，在运输过程中可以套在一起有效利用空间，在使用时也容易拿开。<br>(4)稳定性测试(24 X 7 测试)。装入液体后记录其多少以后漏水。<br>(5)安全性测试。杯子所用的材料(包括纸基、涂层和广告颜料)是否符合食品卫生标准，在内外温度等环境因素下是否会与所盛各种饮料相反应，而产生对人体有害的物质。<br>(6)本地化测试。为国际化和本地化的需要，广告图案和文字是否在政治、宗教和文化方面具有广泛的适用性。<br>(7)对设计的改进建议。“如果是一次性杯子，能否标示已使用(比如变色)”和“杯子是否有使用者标贴(多人使用时防止混淆)”。</p>
<h3 id="电梯测试用例"><a href="#电梯测试用例" class="headerlink" title="电梯测试用例"></a>电梯测试用例</h3><p>如果给你一台电梯，请问你如何测试它，分析如下:<br>1、功能:上升、下降、停止、开门、关门、梯内电话、灯光、指示灯等;<br>2、性能:速度、反应时间、关门时间等;<br>3、压力:超载、尖锐物碰撞电梯壁等;<br>4、安全:停电、报警装置、轿箱停靠位置、有人扒门时的情况等;<br>5、可用性:按键高度、操作是否方便、舒适程度等;<br>6、UI:美观程度、光滑程度、形状、质感等;<br>7、稳定性:长时间运行情况等;<br>8、兼容性:不同电压是否可工作、不同类型电话是否可安装等。其实在简单分析的过程中，发现许多东西根本 测试不全，比如电话、灯光、材质、调度程序、可维修性等，当发现在一个用例中无法说清楚时，这些应该拆分开 来分别测试。可以告诉主考官，你需要模块化地测试电话、灯光等。再有在一起的组装测试。</p>
<p>下面是详细的测试点:<br>需求测试:查看电梯使用说明书、安全说明书等<br>界面测试:查看电梯外观<br>功能测试:<br>1、测试电梯能否实现正常的上升和下降功能。<br>2、电梯的按钮是否都可以使用。<br>3、电梯门的打开，关闭是否正常。<br>4、报警装置是否可用。<br>5、与其他电梯之间是否协作良好。<br>6、通风状况如何。<br>7、突然停电时的情况。<br>8、上升途中的响应。<br>  1)电梯本来在 1 楼，如果有人按 18 楼，那么电梯在上升到 5 楼的时候，有人按了 10 楼，这时候是否会在 10 楼先停下来<br>  2)电梯下降到 10 层时显示满员，此时若 8 层有人等待电梯，是否在 8 层停。<br>9、是否有手机信号<br>可靠性测试:<br>1、门关上的一刹那出现障碍物。<br>2、同时按关门和开门按钮。<br>3、点击当前楼层号码<br>4、多次点击同一楼层号码<br>5、同时按上键和下键<br>易用性:电梯的按钮的设计符合一般人的习惯吗 用户文档:使用手册是否对电梯的用法、限制、使用条件等有详细的描述<br>压力测试:1.看电梯的最大承重量，在负载过重时报警装置是否有提醒<br>稳定性测试:看垫底在最大负载下平行运行的最长时间</p>
<h3 id="对一只圆珠笔进行测试"><a href="#对一只圆珠笔进行测试" class="headerlink" title="对一只圆珠笔进行测试"></a>对一只圆珠笔进行测试</h3><p>1.界面测试，无论我们做那类软件(嵌入式别提)，只要给用户有看到的东西，印刷在产品上的图片，文字，这可能涉及不同的东西，有圆珠笔厂家的信息，也有针对不同用户的信息(譬如小孩子喜欢颜色搭配多一点的，而成人用稳重的产品等)，可能涉及的还有人的审美观，你圆珠笔色彩搭配之类的<br>2.功能测试，测试的重点，也是客户针对某家公司产品给出满意度的参考点，圆珠笔功能主要是书写，这里面涉及一个功用方面的焦点——书写的快慢程度，也就是流利不流利的问题(这涉及笔芯的材质问题) 针对这方面的测试，个人认为应从以下几点<br>  a.材质问题，这涉及程序员和用户之间的关系，两者利益均有，程序员考虑成本问题，用户考虑污染问题，也就是说制作圆珠笔的材料与环境的问题，厂商考虑价格因素，用户考虑环境因素以及安全性因素这就把安全性测试给说出来了，大的方面因为笔油材质的问题，和使用者之间的健康问题有联系，要测小的方面，笔油的速率，以及书写后是否马上可以涂抹，可否修改，这都涉及安全性的问题<br>  b.性能问题，温度，湿度，气压对笔芯产生不同的影响<br>3.安全性问题<br>  测试不同的高度，笔身做自由落体损坏程度<br>4.兼容性问题<br>  不同的笔筒和笔芯之间的互相兼容<br>5.强度测试<br>  弹簧在不同的压力之下，承受变形的程度<br>6.在金山面试时候，考官特意问我针对笔芯那个米珠如何测试<br>或者<br>1、界面测试<br>  界面测试也就是对其外表先进行判断。<br>  尺寸是否适合用户使用?用户需要的是什么样的尺寸，小孩和成年人使用的尺寸是有区别的;<br>  色彩搭配是否合理?形状是否美观?<br>  是否方便携带和存放?<br>  笔芯颜色是否与客户要求一致?<br>  笔身印的 logo 或者文字是否这么正确<br>2、功能测试<br>  笔筒开合;<br>  笔芯替换;<br>  出墨快慢;<br>  笔头出墨粗细;<br>  是不是可操作性签字笔;<br>3、性能测试<br>  笔芯的寿命;<br>  笔墨的气味;<br>  写过的字用纸水浸透后，笔墨是否会晕开<br>压力测试:笔尖在多大压力范围内可以正常写字，不能正常出墨，太重损坏笔尖或纸张;<br>笔壳能在多大压力范围内正常使用?成人用力太重掰断笔壳，掉到地上易摔，能在纸上写出清晰的字<br>4、性能测试<br>  握笔的地方纹路是否会硌手或太滑;<br>  书写的流畅度;<br>  写出的墨水多久能干;<br>  高温和低温环境对笔芯出墨和笔壳的影响;<br>  长时间不盖笔套，或笔盖盖多长时间不用，会不会对笔下次写字有影响<br>5、安全测试<br>  笔墨是否有易燃性;<br>  笔墨是否对皮肤有害;<br>  笔杆折断，材质是否容易刮伤手;<br>  误食笔芯是否会引起中毒(有小孩或者有人喜欢咬笔头)<br>6、兼容性测试<br>  笔壳和笔芯是否能够很好的适应主流签字笔尺寸;<br>  这个笔芯的笔尖如果损坏，换上其他的笔芯的笔尖是否能用;<br>  这个笔芯的笔墨如果用完，换上其他笔芯的笔墨是否可以使用;<br>  笔的笔墨如果在其他笔的笔墨上写字是否可以成功覆盖<br>7、其他测试<br>(1)比较测试<br>  与其他品牌签字笔比较，优劣在哪些地方?<br>(2)场景测试<br>  笔从高处摔到地上，笔尖是否会摔坏;<br>  倒着写，是否可以写出很多字来;<br>  扔到水里，笔墨会不会一直晕开;<br>  笔在粗糙的纸上是否能写出字…</p>
]]></content>
      <categories>
        <category>测试</category>
      </categories>
      <tags>
        <tag>测试</tag>
      </tags>
  </entry>
</search>
